package main

import (
	errors2 "errors"
	"fmt"
	"github.com/Optum/dce/pkg/account"
	accountMocks "github.com/Optum/dce/pkg/account/accountiface/mocks"
	accountManagerMocks "github.com/Optum/dce/pkg/accountmanager/accountmanageriface/mocks"
	"github.com/Optum/dce/pkg/api"
	apiMocks "github.com/Optum/dce/pkg/api/mocks"
	"github.com/Optum/dce/pkg/api/response"
	"github.com/Optum/dce/pkg/arn"
	"github.com/Optum/dce/pkg/errors"
	"github.com/Optum/dce/pkg/lease"
	leaseMocks "github.com/Optum/dce/pkg/lease/leaseiface/mocks"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"testing"
)

type leaseAuthTestInput struct {
	// Mock user to return from the UserDetailer
	user *api.User

	// Lease ID to request creds for
	leaseID *string
	// Mock lease to return from the LeaseService.Get()
	lease *lease.Lease
	// Mock results from LeaseService.List()
	leaseQueryResults *[]lease.Lease
	// Error to return from LeaseService.Get()
	getLeaseError error

	// Mock account to return from AccountService.Get()
	account *account.Account
	// Error to return from AccountService.Get()
	getAccountError error

	// Expected ARN used when generating IAM Role creds
	expectedCredsArn *arn.ARN
	// Expected session name used when generating IAM Role creds
	expectedCredsSessionName string
	// Credentials to return from AccountManager.Credentials()
	creds credentials.Value
	// Error to return from AccountManager.Credentials()
	credsError error

	// URL to return from AccountManager.Console.URL()
	consoleURL string
	// Error to return from AccountManager.Console.URL()
	consoleURLError error

	// Expected error returned from leaseAuth()
	expectedError error
	// Expected result from leaseAuth()
	expectedResult *response.LeaseAuthResponse
}

func leaseAuthTest(t *testing.T, input *leaseAuthTestInput) {
	// Set default inputs
	//
	// Default to an admin user
	if input.user == nil {
		input.user = &api.User{Role: api.AdminGroupName}
	}
	// Default lease obj
	if input.lease == nil {
		input.lease = &lease.Lease{
			PrincipalID: aws.String("user-123"),
			Status:      lease.StatusActive.StatusPtr(),
		}
	}
	// Give the mocked lease an AccountID, if not provided
	if input.lease.AccountID == nil {
		input.lease.AccountID = aws.String("account-123")
	}
	if input.account == nil {
		input.account = &account.Account{
			PrincipalRoleArn: mockRoleArn("test-role"),
		}
	}
	if input.expectedCredsArn == nil {
		input.expectedCredsArn = input.account.PrincipalRoleArn
	}
	if input.expectedCredsSessionName == "" {
		input.expectedCredsSessionName = *input.lease.PrincipalID
	}

	// Mock the user
	userDetails := &apiMocks.UserDetailer{}
	userDetails.
		On("GetUser", mock.Anything).
		Return(input.user)

	// Mock the lease from the DB
	leaseSvc := &leaseMocks.Servicer{}
	leaseSvc.
		On("Get", "lease-123").
		Return(input.lease, input.getLeaseError)

	// Mock lease query using principal ID
	if input.leaseQueryResults != nil {
		leaseList := lease.Leases(*input.leaseQueryResults)
		leaseSvc.
			On("List", &lease.Lease{
				PrincipalID: aws.String(input.user.Username),
				Status:      lease.StatusActive.StatusPtr(),
			}).
			Return(&leaseList, nil)
	}

	// Mock the account for the lease
	accountSvc := &accountMocks.Servicer{}
	accountSvc.
		On("Get", *input.lease.AccountID).
		Return(input.account, input.getAccountError)

	// Mock the credentials from the account manager
	accountMgr := &accountManagerMocks.Servicer{}
	mockCreds := accountMgr.MockCredentials(
		input.expectedCredsArn,
		input.expectedCredsSessionName,
		input.creds,
		input.credsError,
	)

	// Mock the Console URL generated by the account manager
	accountMgr.
		On("ConsoleURL", mockCreds).
		Return(input.consoleURL, input.consoleURLError)

	// Call the LeasAuth controller
	res, err := leaseAuth(&leaseAuthInput{
		leaseID:        input.leaseID,
		leaseService:   leaseSvc,
		accountService: accountSvc,
		userDetailer:   userDetails,
		accountManager: accountMgr,
	})
	if input.expectedError != nil {
		require.IsType(t, &errors.StatusError{}, err)
		require.Truef(t, err.(*errors.StatusError).Is(input.expectedError),
			"Expected error: %v\nActual error: %v", input.expectedError, err)
	} else {
		require.Nil(t, err)
	}

	if input.expectedResult != nil {
		require.Equal(t, input.expectedResult, res)
	}
}

func TestLeaseAuth(t *testing.T) {
	t.Run("should return credentials for a lease", func(t *testing.T) {
		// For an admin user, requesting an active lease,
		// I should get creds for my PrincipalRole
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: aws.String("lease-123"),
			user:    &api.User{Role: api.AdminGroupName},
			lease: &lease.Lease{
				PrincipalID: aws.String("test-user"),
				Status:      lease.StatusActive.StatusPtr(),
			},
			account: &account.Account{
				PrincipalRoleArn: mockRoleArn("dce-principal"),
			},
			creds: credentials.Value{
				AccessKeyID:     "mock-access-key-id",
				SecretAccessKey: "mock-secret-access-key",
				SessionToken:    "mock-session-token",
			},
			consoleURL: "http://example.com/mock/signin",
			// Should return the generated creds and URL
			expectedResult: &response.LeaseAuthResponse{
				AccessKeyID:     "mock-access-key-id",
				SecretAccessKey: "mock-secret-access-key",
				SessionToken:    "mock-session-token",
				ConsoleURL:      "http://example.com/mock/signin",
			},
		})
	})

	t.Run("should return a 401 if the lease is not active", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: aws.String("lease-123"),
			lease: &lease.Lease{
				PrincipalID: aws.String("test-user"),
				Status:      lease.StatusInactive.StatusPtr(),
			},
			expectedError: errors.NewUnauthorized("Unable to authorize against non-active lease"),
		})
	})

	t.Run("should return a 401 if the lease does not belong to the requesting user", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: aws.String("lease-123"),
			user: &api.User{
				Username: "user-a",
				// Note that admins may assume other user's role,
				// but regular users may not
				Role: api.UserGroupName,
			},
			lease: &lease.Lease{
				ID:          aws.String("lease-123"),
				Status:      lease.StatusActive.StatusPtr(),
				PrincipalID: aws.String("user-b"),
			},
			expectedError: errors.NewUnauthorized(
				"User user-a does not have access to lease lease-123",
			),
		})
	})

	t.Run("should allow admins to auth against other user's leases", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: aws.String("lease-123"),
			user: &api.User{
				Username: "user-a",
				// Note that admins may assume other user's role,
				// but regular users may not
				Role: api.AdminGroupName,
			},
			lease: &lease.Lease{
				Status:      lease.StatusActive.StatusPtr(),
				PrincipalID: aws.String("user-b"),
			},
			// Should use the username as the session name
			expectedCredsSessionName: "user-a",
			// Shouldn't fail
			expectedError: nil,
		})
	})

	t.Run("should look up the lease by principal ID for the requesting user, if no ID is provided", func(t *testing.T) {
		// For an admin user, requesting an active lease,
		// I should get creds for my PrincipalRole
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: nil,
			user: &api.User{
				Username: "test-user",
				Role:     api.UserGroupName,
			},
			leaseQueryResults: &[]lease.Lease{{
				AccountID:   aws.String("account-123"),
				PrincipalID: aws.String("test-user"),
				Status:      lease.StatusActive.StatusPtr(),
			}},
			account: &account.Account{
				ID:               aws.String("account-123"),
				PrincipalRoleArn: mockRoleArn("dce-principal"),
			},
			creds: credentials.Value{
				AccessKeyID:     "mock-access-key-id",
				SecretAccessKey: "mock-secret-access-key",
				SessionToken:    "mock-session-token",
			},
			consoleURL:               "http://example.com/mock/signin",
			expectedCredsSessionName: "test-user",
			// Should return the generated creds and URL
			expectedResult: &response.LeaseAuthResponse{
				AccessKeyID:     "mock-access-key-id",
				SecretAccessKey: "mock-secret-access-key",
				SessionToken:    "mock-session-token",
				ConsoleURL:      "http://example.com/mock/signin",
			},
		})
	})

	t.Run("should return a 404 if no lease ID or username is provided", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: nil,
			user: &api.User{
				Username: "test-user",
				Role:     api.UserGroupName,
			},
			leaseQueryResults: &[]lease.Lease{},
			expectedError:     errors.NewNotFound("lease for user", "test-user"),
		})
	})

	t.Run("should return a 404 if the lease does not exist", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID:       aws.String("lease-123"),
			getLeaseError: errors.NewNotFound("lease", "lease-123"),
			expectedError: errors.NewNotFound("lease", "lease-123"),
		})
	})

	t.Run("should return a 500 if the leased account does not exist", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: aws.String("lease-123"),
			lease: &lease.Lease{
				AccountID:   aws.String("not-an-account"),
				PrincipalID: aws.String("test-user"),
				Status:      lease.StatusActive.StatusPtr(),
			},
			getAccountError: errors.NewNotFound("account", "account-123"),
			expectedError: errors.NewInternalServer(
				"Account record is missing for the requested lease", errors2.New(""),
			),
		})
	})

	t.Run("should return a 500 for lease DB errors", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID:       aws.String("lease-123"),
			getLeaseError: errors.NewInternalServer("failed to get lease", errors2.New("")),
			expectedError: errors.NewInternalServer("failed to get lease", errors2.New("")),
		})
	})

	t.Run("should return a 500 for account DB errors", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID:         aws.String("lease-123"),
			getAccountError: errors.NewInternalServer("failed to get account", errors2.New("")),
			expectedError:   errors.NewInternalServer("failed to get account", errors2.New("")),
		})
	})

	t.Run("should return a 500 for console URL errors", func(t *testing.T) {
		leaseAuthTest(t, &leaseAuthTestInput{
			leaseID: aws.String("lease-123"),
			account: &account.Account{
				PrincipalRoleArn: mockRoleArn("test-role"),
			},
			consoleURLError: errors.NewInternalServer("failed to get url", errors2.New("")),
			expectedError: errors.NewInternalServer(
				"Failed to generate console URL for arn:aws:iam::123456789012:role/test-role", errors2.New(""),
			),
		})
	})

}

func mockRoleArn(roleName string) *arn.ARN {
	newARN, _ := arn.NewFromArn(
		fmt.Sprintf("arn:aws:iam::123456789012:role/%s", roleName),
	)
	return newARN
}
