// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/Optum/dce/pkg/model"

// AccountData is an autogenerated mock type for the AccountData type
type AccountData struct {
	mock.Mock
}

// DeleteAccount provides a mock function with given fields: account
func (_m *AccountData) DeleteAccount(account *model.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByID provides a mock function with given fields: accountID
func (_m *AccountData) GetAccountByID(accountID string) (*model.Account, error) {
	ret := _m.Called(accountID)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields: q
func (_m *AccountData) GetAccounts(q *model.Account) (*model.Accounts, error) {
	ret := _m.Called(q)

	var r0 *model.Accounts
	if rf, ok := ret.Get(0).(func(*model.Account) *model.Accounts); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Accounts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Account) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteAccount provides a mock function with given fields: account, prevLastModifiedOn
func (_m *AccountData) WriteAccount(account *model.Account, prevLastModifiedOn *int64) error {
	ret := _m.Called(account, prevLastModifiedOn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account, *int64) error); ok {
		r0 = rf(account, prevLastModifiedOn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
