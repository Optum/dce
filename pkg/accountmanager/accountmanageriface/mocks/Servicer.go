// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import account "github.com/Optum/dce/pkg/account"

import arn "github.com/Optum/dce/pkg/arn"
import mock "github.com/stretchr/testify/mock"
import time "time"
import types "github.com/Optum/dce/internal/types"

// Servicer is an autogenerated mock type for the Servicer type
type Servicer struct {
	mock.Mock
}

// DeletePrincipalAccess provides a mock function with given fields: _a0
func (_m *Servicer) DeletePrincipalAccess(_a0 *account.Account) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsageBetweenDates provides a mock function with given fields: _a0, startDate, endDate
func (_m *Servicer) GetUsageBetweenDates(_a0 *account.Account, startDate time.Time, endDate time.Time) (types.Usages, error) {
	ret := _m.Called(_a0, startDate, endDate)

	var r0 types.Usages
	if rf, ok := ret.Get(0).(func(*account.Account, time.Time, time.Time) types.Usages); ok {
		r0 = rf(_a0, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Usages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*account.Account, time.Time, time.Time) error); ok {
		r1 = rf(_a0, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPrincipalAccess provides a mock function with given fields: _a0
func (_m *Servicer) UpsertPrincipalAccess(_a0 *account.Account) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateAccess provides a mock function with given fields: role
func (_m *Servicer) ValidateAccess(role *arn.ARN) error {
	ret := _m.Called(role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*arn.ARN) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
