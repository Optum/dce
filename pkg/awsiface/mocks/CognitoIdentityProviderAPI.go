// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import cognitoidentityprovider "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
import context "context"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// CognitoIdentityProviderAPI is an autogenerated mock type for the CognitoIdentityProviderAPI type
type CognitoIdentityProviderAPI struct {
	mock.Mock
}

// AddCustomAttributes provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AddCustomAttributes(_a0 *cognitoidentityprovider.AddCustomAttributesInput) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AddCustomAttributesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AddCustomAttributesInput) *cognitoidentityprovider.AddCustomAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AddCustomAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AddCustomAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCustomAttributesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AddCustomAttributesRequest(_a0 *cognitoidentityprovider.AddCustomAttributesInput) (*request.Request, *cognitoidentityprovider.AddCustomAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AddCustomAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AddCustomAttributesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AddCustomAttributesInput) *cognitoidentityprovider.AddCustomAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AddCustomAttributesOutput)
		}
	}

	return r0, r1
}

// AddCustomAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AddCustomAttributesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AddCustomAttributesInput, _a2 ...request.Option) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AddCustomAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AddCustomAttributesInput, ...request.Option) *cognitoidentityprovider.AddCustomAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AddCustomAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AddCustomAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminAddUserToGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminAddUserToGroup(_a0 *cognitoidentityprovider.AdminAddUserToGroupInput) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminAddUserToGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminAddUserToGroupInput) *cognitoidentityprovider.AdminAddUserToGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminAddUserToGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminAddUserToGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminAddUserToGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminAddUserToGroupRequest(_a0 *cognitoidentityprovider.AdminAddUserToGroupInput) (*request.Request, *cognitoidentityprovider.AdminAddUserToGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminAddUserToGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminAddUserToGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminAddUserToGroupInput) *cognitoidentityprovider.AdminAddUserToGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminAddUserToGroupOutput)
		}
	}

	return r0, r1
}

// AdminAddUserToGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminAddUserToGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminAddUserToGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminAddUserToGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminAddUserToGroupInput, ...request.Option) *cognitoidentityprovider.AdminAddUserToGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminAddUserToGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminAddUserToGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminConfirmSignUp provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminConfirmSignUp(_a0 *cognitoidentityprovider.AdminConfirmSignUpInput) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminConfirmSignUpOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminConfirmSignUpInput) *cognitoidentityprovider.AdminConfirmSignUpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminConfirmSignUpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminConfirmSignUpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminConfirmSignUpRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminConfirmSignUpRequest(_a0 *cognitoidentityprovider.AdminConfirmSignUpInput) (*request.Request, *cognitoidentityprovider.AdminConfirmSignUpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminConfirmSignUpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminConfirmSignUpOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminConfirmSignUpInput) *cognitoidentityprovider.AdminConfirmSignUpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminConfirmSignUpOutput)
		}
	}

	return r0, r1
}

// AdminConfirmSignUpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminConfirmSignUpWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminConfirmSignUpInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminConfirmSignUpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminConfirmSignUpInput, ...request.Option) *cognitoidentityprovider.AdminConfirmSignUpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminConfirmSignUpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminConfirmSignUpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminCreateUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminCreateUser(_a0 *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminCreateUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminCreateUserInput) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminCreateUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminCreateUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminCreateUserRequest(_a0 *cognitoidentityprovider.AdminCreateUserInput) (*request.Request, *cognitoidentityprovider.AdminCreateUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminCreateUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminCreateUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminCreateUserInput) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	return r0, r1
}

// AdminCreateUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminCreateUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminCreateUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminCreateUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...request.Option) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDeleteUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDeleteUser(_a0 *cognitoidentityprovider.AdminDeleteUserInput) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminDeleteUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDeleteUserInput) *cognitoidentityprovider.AdminDeleteUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDeleteUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDeleteUserAttributes provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDeleteUserAttributes(_a0 *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminDeleteUserAttributesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDeleteUserAttributesInput) *cognitoidentityprovider.AdminDeleteUserAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDeleteUserAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDeleteUserAttributesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDeleteUserAttributesRequest(_a0 *cognitoidentityprovider.AdminDeleteUserAttributesInput) (*request.Request, *cognitoidentityprovider.AdminDeleteUserAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDeleteUserAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminDeleteUserAttributesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDeleteUserAttributesInput) *cognitoidentityprovider.AdminDeleteUserAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
		}
	}

	return r0, r1
}

// AdminDeleteUserAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminDeleteUserAttributesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminDeleteUserAttributesInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminDeleteUserAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserAttributesInput, ...request.Option) *cognitoidentityprovider.AdminDeleteUserAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDeleteUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDeleteUserRequest(_a0 *cognitoidentityprovider.AdminDeleteUserInput) (*request.Request, *cognitoidentityprovider.AdminDeleteUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDeleteUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminDeleteUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDeleteUserInput) *cognitoidentityprovider.AdminDeleteUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminDeleteUserOutput)
		}
	}

	return r0, r1
}

// AdminDeleteUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminDeleteUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminDeleteUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminDeleteUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...request.Option) *cognitoidentityprovider.AdminDeleteUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableProviderForUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDisableProviderForUser(_a0 *cognitoidentityprovider.AdminDisableProviderForUserInput) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminDisableProviderForUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDisableProviderForUserInput) *cognitoidentityprovider.AdminDisableProviderForUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDisableProviderForUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableProviderForUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDisableProviderForUserRequest(_a0 *cognitoidentityprovider.AdminDisableProviderForUserInput) (*request.Request, *cognitoidentityprovider.AdminDisableProviderForUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDisableProviderForUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminDisableProviderForUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDisableProviderForUserInput) *cognitoidentityprovider.AdminDisableProviderForUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
		}
	}

	return r0, r1
}

// AdminDisableProviderForUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminDisableProviderForUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminDisableProviderForUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminDisableProviderForUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableProviderForUserInput, ...request.Option) *cognitoidentityprovider.AdminDisableProviderForUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDisableProviderForUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDisableUser(_a0 *cognitoidentityprovider.AdminDisableUserInput) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminDisableUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDisableUserInput) *cognitoidentityprovider.AdminDisableUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDisableUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminDisableUserRequest(_a0 *cognitoidentityprovider.AdminDisableUserInput) (*request.Request, *cognitoidentityprovider.AdminDisableUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminDisableUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminDisableUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminDisableUserInput) *cognitoidentityprovider.AdminDisableUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminDisableUserOutput)
		}
	}

	return r0, r1
}

// AdminDisableUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminDisableUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminDisableUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminDisableUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...request.Option) *cognitoidentityprovider.AdminDisableUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminEnableUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminEnableUser(_a0 *cognitoidentityprovider.AdminEnableUserInput) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminEnableUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminEnableUserInput) *cognitoidentityprovider.AdminEnableUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminEnableUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminEnableUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminEnableUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminEnableUserRequest(_a0 *cognitoidentityprovider.AdminEnableUserInput) (*request.Request, *cognitoidentityprovider.AdminEnableUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminEnableUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminEnableUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminEnableUserInput) *cognitoidentityprovider.AdminEnableUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminEnableUserOutput)
		}
	}

	return r0, r1
}

// AdminEnableUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminEnableUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminEnableUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminEnableUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...request.Option) *cognitoidentityprovider.AdminEnableUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminEnableUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminForgetDevice provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminForgetDevice(_a0 *cognitoidentityprovider.AdminForgetDeviceInput) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminForgetDeviceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminForgetDeviceInput) *cognitoidentityprovider.AdminForgetDeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminForgetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminForgetDeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminForgetDeviceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminForgetDeviceRequest(_a0 *cognitoidentityprovider.AdminForgetDeviceInput) (*request.Request, *cognitoidentityprovider.AdminForgetDeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminForgetDeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminForgetDeviceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminForgetDeviceInput) *cognitoidentityprovider.AdminForgetDeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminForgetDeviceOutput)
		}
	}

	return r0, r1
}

// AdminForgetDeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminForgetDeviceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminForgetDeviceInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminForgetDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminForgetDeviceInput, ...request.Option) *cognitoidentityprovider.AdminForgetDeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminForgetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminForgetDeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetDevice provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminGetDevice(_a0 *cognitoidentityprovider.AdminGetDeviceInput) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminGetDeviceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminGetDeviceInput) *cognitoidentityprovider.AdminGetDeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminGetDeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetDeviceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminGetDeviceRequest(_a0 *cognitoidentityprovider.AdminGetDeviceInput) (*request.Request, *cognitoidentityprovider.AdminGetDeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminGetDeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminGetDeviceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminGetDeviceInput) *cognitoidentityprovider.AdminGetDeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminGetDeviceOutput)
		}
	}

	return r0, r1
}

// AdminGetDeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminGetDeviceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminGetDeviceInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminGetDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetDeviceInput, ...request.Option) *cognitoidentityprovider.AdminGetDeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminGetDeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminGetUser(_a0 *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminGetUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminGetUserInput) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminGetUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminGetUserRequest(_a0 *cognitoidentityprovider.AdminGetUserInput) (*request.Request, *cognitoidentityprovider.AdminGetUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminGetUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminGetUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminGetUserInput) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	return r0, r1
}

// AdminGetUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminGetUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminGetUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminGetUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...request.Option) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminInitiateAuth provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminInitiateAuth(_a0 *cognitoidentityprovider.AdminInitiateAuthInput) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminInitiateAuthOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminInitiateAuthInput) *cognitoidentityprovider.AdminInitiateAuthOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminInitiateAuthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminInitiateAuthInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminInitiateAuthRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminInitiateAuthRequest(_a0 *cognitoidentityprovider.AdminInitiateAuthInput) (*request.Request, *cognitoidentityprovider.AdminInitiateAuthOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminInitiateAuthInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminInitiateAuthOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminInitiateAuthInput) *cognitoidentityprovider.AdminInitiateAuthOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminInitiateAuthOutput)
		}
	}

	return r0, r1
}

// AdminInitiateAuthWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminInitiateAuthWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminInitiateAuthInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminInitiateAuthOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminInitiateAuthInput, ...request.Option) *cognitoidentityprovider.AdminInitiateAuthOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminInitiateAuthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminInitiateAuthInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminLinkProviderForUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminLinkProviderForUser(_a0 *cognitoidentityprovider.AdminLinkProviderForUserInput) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminLinkProviderForUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminLinkProviderForUserInput) *cognitoidentityprovider.AdminLinkProviderForUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminLinkProviderForUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminLinkProviderForUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminLinkProviderForUserRequest(_a0 *cognitoidentityprovider.AdminLinkProviderForUserInput) (*request.Request, *cognitoidentityprovider.AdminLinkProviderForUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminLinkProviderForUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminLinkProviderForUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminLinkProviderForUserInput) *cognitoidentityprovider.AdminLinkProviderForUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
		}
	}

	return r0, r1
}

// AdminLinkProviderForUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminLinkProviderForUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminLinkProviderForUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminLinkProviderForUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminLinkProviderForUserInput, ...request.Option) *cognitoidentityprovider.AdminLinkProviderForUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminLinkProviderForUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListDevices provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminListDevices(_a0 *cognitoidentityprovider.AdminListDevicesInput) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminListDevicesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListDevicesInput) *cognitoidentityprovider.AdminListDevicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListDevicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminListDevicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListDevicesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminListDevicesRequest(_a0 *cognitoidentityprovider.AdminListDevicesInput) (*request.Request, *cognitoidentityprovider.AdminListDevicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListDevicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminListDevicesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminListDevicesInput) *cognitoidentityprovider.AdminListDevicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminListDevicesOutput)
		}
	}

	return r0, r1
}

// AdminListDevicesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminListDevicesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminListDevicesInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminListDevicesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListDevicesInput, ...request.Option) *cognitoidentityprovider.AdminListDevicesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListDevicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminListDevicesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListGroupsForUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminListGroupsForUser(_a0 *cognitoidentityprovider.AdminListGroupsForUserInput) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminListGroupsForUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListGroupsForUserInput) *cognitoidentityprovider.AdminListGroupsForUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListGroupsForUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminListGroupsForUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListGroupsForUserPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) AdminListGroupsForUserPages(_a0 *cognitoidentityprovider.AdminListGroupsForUserInput, _a1 func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListGroupsForUserInput, func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminListGroupsForUserPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) AdminListGroupsForUserPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminListGroupsForUserInput, _a2 func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListGroupsForUserInput, func(*cognitoidentityprovider.AdminListGroupsForUserOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminListGroupsForUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminListGroupsForUserRequest(_a0 *cognitoidentityprovider.AdminListGroupsForUserInput) (*request.Request, *cognitoidentityprovider.AdminListGroupsForUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListGroupsForUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminListGroupsForUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminListGroupsForUserInput) *cognitoidentityprovider.AdminListGroupsForUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminListGroupsForUserOutput)
		}
	}

	return r0, r1
}

// AdminListGroupsForUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminListGroupsForUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminListGroupsForUserInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminListGroupsForUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListGroupsForUserInput, ...request.Option) *cognitoidentityprovider.AdminListGroupsForUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListGroupsForUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminListGroupsForUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListUserAuthEvents provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminListUserAuthEvents(_a0 *cognitoidentityprovider.AdminListUserAuthEventsInput) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminListUserAuthEventsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListUserAuthEventsInput) *cognitoidentityprovider.AdminListUserAuthEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminListUserAuthEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListUserAuthEventsPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) AdminListUserAuthEventsPages(_a0 *cognitoidentityprovider.AdminListUserAuthEventsInput, _a1 func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListUserAuthEventsInput, func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminListUserAuthEventsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) AdminListUserAuthEventsPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminListUserAuthEventsInput, _a2 func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListUserAuthEventsInput, func(*cognitoidentityprovider.AdminListUserAuthEventsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminListUserAuthEventsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminListUserAuthEventsRequest(_a0 *cognitoidentityprovider.AdminListUserAuthEventsInput) (*request.Request, *cognitoidentityprovider.AdminListUserAuthEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminListUserAuthEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminListUserAuthEventsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminListUserAuthEventsInput) *cognitoidentityprovider.AdminListUserAuthEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
		}
	}

	return r0, r1
}

// AdminListUserAuthEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminListUserAuthEventsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminListUserAuthEventsInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminListUserAuthEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListUserAuthEventsInput, ...request.Option) *cognitoidentityprovider.AdminListUserAuthEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminListUserAuthEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRemoveUserFromGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminRemoveUserFromGroup(_a0 *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminRemoveUserFromGroupInput) *cognitoidentityprovider.AdminRemoveUserFromGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminRemoveUserFromGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRemoveUserFromGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminRemoveUserFromGroupRequest(_a0 *cognitoidentityprovider.AdminRemoveUserFromGroupInput) (*request.Request, *cognitoidentityprovider.AdminRemoveUserFromGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminRemoveUserFromGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminRemoveUserFromGroupInput) *cognitoidentityprovider.AdminRemoveUserFromGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
		}
	}

	return r0, r1
}

// AdminRemoveUserFromGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminRemoveUserFromGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminRemoveUserFromGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminRemoveUserFromGroupInput, ...request.Option) *cognitoidentityprovider.AdminRemoveUserFromGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminRemoveUserFromGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminResetUserPassword provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminResetUserPassword(_a0 *cognitoidentityprovider.AdminResetUserPasswordInput) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminResetUserPasswordOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminResetUserPasswordInput) *cognitoidentityprovider.AdminResetUserPasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminResetUserPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminResetUserPasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminResetUserPasswordRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminResetUserPasswordRequest(_a0 *cognitoidentityprovider.AdminResetUserPasswordInput) (*request.Request, *cognitoidentityprovider.AdminResetUserPasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminResetUserPasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminResetUserPasswordOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminResetUserPasswordInput) *cognitoidentityprovider.AdminResetUserPasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminResetUserPasswordOutput)
		}
	}

	return r0, r1
}

// AdminResetUserPasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminResetUserPasswordWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminResetUserPasswordInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminResetUserPasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminResetUserPasswordInput, ...request.Option) *cognitoidentityprovider.AdminResetUserPasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminResetUserPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminResetUserPasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRespondToAuthChallenge provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminRespondToAuthChallenge(_a0 *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminRespondToAuthChallengeInput) *cognitoidentityprovider.AdminRespondToAuthChallengeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminRespondToAuthChallengeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRespondToAuthChallengeRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminRespondToAuthChallengeRequest(_a0 *cognitoidentityprovider.AdminRespondToAuthChallengeInput) (*request.Request, *cognitoidentityprovider.AdminRespondToAuthChallengeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminRespondToAuthChallengeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminRespondToAuthChallengeInput) *cognitoidentityprovider.AdminRespondToAuthChallengeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
		}
	}

	return r0, r1
}

// AdminRespondToAuthChallengeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminRespondToAuthChallengeWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminRespondToAuthChallengeInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminRespondToAuthChallengeInput, ...request.Option) *cognitoidentityprovider.AdminRespondToAuthChallengeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminRespondToAuthChallengeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserMFAPreference provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminSetUserMFAPreference(_a0 *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminSetUserMFAPreferenceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserMFAPreferenceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminSetUserMFAPreferenceRequest(_a0 *cognitoidentityprovider.AdminSetUserMFAPreferenceInput) (*request.Request, *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminSetUserMFAPreferenceInput) *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
		}
	}

	return r0, r1
}

// AdminSetUserMFAPreferenceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminSetUserMFAPreferenceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, ...request.Option) *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserPassword provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminSetUserPassword(_a0 *cognitoidentityprovider.AdminSetUserPasswordInput) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminSetUserPasswordOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminSetUserPasswordInput) *cognitoidentityprovider.AdminSetUserPasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminSetUserPasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserPasswordRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminSetUserPasswordRequest(_a0 *cognitoidentityprovider.AdminSetUserPasswordInput) (*request.Request, *cognitoidentityprovider.AdminSetUserPasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminSetUserPasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminSetUserPasswordOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminSetUserPasswordInput) *cognitoidentityprovider.AdminSetUserPasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminSetUserPasswordOutput)
		}
	}

	return r0, r1
}

// AdminSetUserPasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminSetUserPasswordWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminSetUserPasswordInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminSetUserPasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserPasswordInput, ...request.Option) *cognitoidentityprovider.AdminSetUserPasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminSetUserPasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserSettings provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminSetUserSettings(_a0 *cognitoidentityprovider.AdminSetUserSettingsInput) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminSetUserSettingsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminSetUserSettingsInput) *cognitoidentityprovider.AdminSetUserSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminSetUserSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserSettingsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminSetUserSettingsRequest(_a0 *cognitoidentityprovider.AdminSetUserSettingsInput) (*request.Request, *cognitoidentityprovider.AdminSetUserSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminSetUserSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminSetUserSettingsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminSetUserSettingsInput) *cognitoidentityprovider.AdminSetUserSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminSetUserSettingsOutput)
		}
	}

	return r0, r1
}

// AdminSetUserSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminSetUserSettingsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminSetUserSettingsInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminSetUserSettingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserSettingsInput, ...request.Option) *cognitoidentityprovider.AdminSetUserSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminSetUserSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateAuthEventFeedback provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUpdateAuthEventFeedback(_a0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateAuthEventFeedbackRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUpdateAuthEventFeedbackRequest(_a0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) (*request.Request, *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput) *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
		}
	}

	return r0, r1
}

// AdminUpdateAuthEventFeedbackWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminUpdateAuthEventFeedbackWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, ...request.Option) *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateDeviceStatus provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUpdateDeviceStatus(_a0 *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUpdateDeviceStatusInput) *cognitoidentityprovider.AdminUpdateDeviceStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUpdateDeviceStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateDeviceStatusRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUpdateDeviceStatusRequest(_a0 *cognitoidentityprovider.AdminUpdateDeviceStatusInput) (*request.Request, *cognitoidentityprovider.AdminUpdateDeviceStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUpdateDeviceStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUpdateDeviceStatusInput) *cognitoidentityprovider.AdminUpdateDeviceStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
		}
	}

	return r0, r1
}

// AdminUpdateDeviceStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminUpdateDeviceStatusWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminUpdateDeviceStatusInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateDeviceStatusInput, ...request.Option) *cognitoidentityprovider.AdminUpdateDeviceStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateDeviceStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateUserAttributes provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUpdateUserAttributes(_a0 *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUpdateUserAttributesInput) *cognitoidentityprovider.AdminUpdateUserAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUpdateUserAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateUserAttributesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUpdateUserAttributesRequest(_a0 *cognitoidentityprovider.AdminUpdateUserAttributesInput) (*request.Request, *cognitoidentityprovider.AdminUpdateUserAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUpdateUserAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminUpdateUserAttributesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUpdateUserAttributesInput) *cognitoidentityprovider.AdminUpdateUserAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
		}
	}

	return r0, r1
}

// AdminUpdateUserAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminUpdateUserAttributesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminUpdateUserAttributesInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...request.Option) *cognitoidentityprovider.AdminUpdateUserAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUserGlobalSignOut provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUserGlobalSignOut(_a0 *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AdminUserGlobalSignOutOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUserGlobalSignOutInput) *cognitoidentityprovider.AdminUserGlobalSignOutOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUserGlobalSignOutInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUserGlobalSignOutRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AdminUserGlobalSignOutRequest(_a0 *cognitoidentityprovider.AdminUserGlobalSignOutInput) (*request.Request, *cognitoidentityprovider.AdminUserGlobalSignOutOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminUserGlobalSignOutInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AdminUserGlobalSignOutOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminUserGlobalSignOutInput) *cognitoidentityprovider.AdminUserGlobalSignOutOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
		}
	}

	return r0, r1
}

// AdminUserGlobalSignOutWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AdminUserGlobalSignOutWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AdminUserGlobalSignOutInput, _a2 ...request.Option) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AdminUserGlobalSignOutOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUserGlobalSignOutInput, ...request.Option) *cognitoidentityprovider.AdminUserGlobalSignOutOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUserGlobalSignOutInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSoftwareToken provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AssociateSoftwareToken(_a0 *cognitoidentityprovider.AssociateSoftwareTokenInput) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.AssociateSoftwareTokenOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AssociateSoftwareTokenInput) *cognitoidentityprovider.AssociateSoftwareTokenOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AssociateSoftwareTokenInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSoftwareTokenRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) AssociateSoftwareTokenRequest(_a0 *cognitoidentityprovider.AssociateSoftwareTokenInput) (*request.Request, *cognitoidentityprovider.AssociateSoftwareTokenOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AssociateSoftwareTokenInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.AssociateSoftwareTokenOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AssociateSoftwareTokenInput) *cognitoidentityprovider.AssociateSoftwareTokenOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
		}
	}

	return r0, r1
}

// AssociateSoftwareTokenWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) AssociateSoftwareTokenWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.AssociateSoftwareTokenInput, _a2 ...request.Option) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.AssociateSoftwareTokenOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AssociateSoftwareTokenInput, ...request.Option) *cognitoidentityprovider.AssociateSoftwareTokenOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AssociateSoftwareTokenInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ChangePassword(_a0 *cognitoidentityprovider.ChangePasswordInput) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ChangePasswordOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ChangePasswordInput) *cognitoidentityprovider.ChangePasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ChangePasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ChangePasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePasswordRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ChangePasswordRequest(_a0 *cognitoidentityprovider.ChangePasswordInput) (*request.Request, *cognitoidentityprovider.ChangePasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ChangePasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ChangePasswordOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ChangePasswordInput) *cognitoidentityprovider.ChangePasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ChangePasswordOutput)
		}
	}

	return r0, r1
}

// ChangePasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ChangePasswordWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ChangePasswordInput, _a2 ...request.Option) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ChangePasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ChangePasswordInput, ...request.Option) *cognitoidentityprovider.ChangePasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ChangePasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ChangePasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmDevice provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ConfirmDevice(_a0 *cognitoidentityprovider.ConfirmDeviceInput) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ConfirmDeviceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ConfirmDeviceInput) *cognitoidentityprovider.ConfirmDeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ConfirmDeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmDeviceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ConfirmDeviceRequest(_a0 *cognitoidentityprovider.ConfirmDeviceInput) (*request.Request, *cognitoidentityprovider.ConfirmDeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ConfirmDeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ConfirmDeviceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ConfirmDeviceInput) *cognitoidentityprovider.ConfirmDeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ConfirmDeviceOutput)
		}
	}

	return r0, r1
}

// ConfirmDeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ConfirmDeviceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ConfirmDeviceInput, _a2 ...request.Option) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ConfirmDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmDeviceInput, ...request.Option) *cognitoidentityprovider.ConfirmDeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ConfirmDeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmForgotPassword provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ConfirmForgotPassword(_a0 *cognitoidentityprovider.ConfirmForgotPasswordInput) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ConfirmForgotPasswordOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ConfirmForgotPasswordInput) *cognitoidentityprovider.ConfirmForgotPasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ConfirmForgotPasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmForgotPasswordRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ConfirmForgotPasswordRequest(_a0 *cognitoidentityprovider.ConfirmForgotPasswordInput) (*request.Request, *cognitoidentityprovider.ConfirmForgotPasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ConfirmForgotPasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ConfirmForgotPasswordOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ConfirmForgotPasswordInput) *cognitoidentityprovider.ConfirmForgotPasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
		}
	}

	return r0, r1
}

// ConfirmForgotPasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ConfirmForgotPasswordWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ConfirmForgotPasswordInput, _a2 ...request.Option) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ConfirmForgotPasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmForgotPasswordInput, ...request.Option) *cognitoidentityprovider.ConfirmForgotPasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ConfirmForgotPasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmSignUp provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ConfirmSignUp(_a0 *cognitoidentityprovider.ConfirmSignUpInput) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ConfirmSignUpOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ConfirmSignUpInput) *cognitoidentityprovider.ConfirmSignUpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmSignUpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ConfirmSignUpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmSignUpRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ConfirmSignUpRequest(_a0 *cognitoidentityprovider.ConfirmSignUpInput) (*request.Request, *cognitoidentityprovider.ConfirmSignUpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ConfirmSignUpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ConfirmSignUpOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ConfirmSignUpInput) *cognitoidentityprovider.ConfirmSignUpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ConfirmSignUpOutput)
		}
	}

	return r0, r1
}

// ConfirmSignUpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ConfirmSignUpWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ConfirmSignUpInput, _a2 ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ConfirmSignUpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmSignUpInput, ...request.Option) *cognitoidentityprovider.ConfirmSignUpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmSignUpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ConfirmSignUpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateGroup(_a0 *cognitoidentityprovider.CreateGroupInput) (*cognitoidentityprovider.CreateGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateGroupInput) *cognitoidentityprovider.CreateGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateGroupRequest(_a0 *cognitoidentityprovider.CreateGroupInput) (*request.Request, *cognitoidentityprovider.CreateGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateGroupInput) *cognitoidentityprovider.CreateGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateGroupOutput)
		}
	}

	return r0, r1
}

// CreateGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateGroupInput, ...request.Option) *cognitoidentityprovider.CreateGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIdentityProvider provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateIdentityProvider(_a0 *cognitoidentityprovider.CreateIdentityProviderInput) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateIdentityProviderInput) *cognitoidentityprovider.CreateIdentityProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateIdentityProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIdentityProviderRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateIdentityProviderRequest(_a0 *cognitoidentityprovider.CreateIdentityProviderInput) (*request.Request, *cognitoidentityprovider.CreateIdentityProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateIdentityProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateIdentityProviderOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateIdentityProviderInput) *cognitoidentityprovider.CreateIdentityProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateIdentityProviderOutput)
		}
	}

	return r0, r1
}

// CreateIdentityProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateIdentityProviderWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateIdentityProviderInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateIdentityProviderInput, ...request.Option) *cognitoidentityprovider.CreateIdentityProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateIdentityProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceServer provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateResourceServer(_a0 *cognitoidentityprovider.CreateResourceServerInput) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateResourceServerOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateResourceServerInput) *cognitoidentityprovider.CreateResourceServerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateResourceServerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceServerRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateResourceServerRequest(_a0 *cognitoidentityprovider.CreateResourceServerInput) (*request.Request, *cognitoidentityprovider.CreateResourceServerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateResourceServerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateResourceServerOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateResourceServerInput) *cognitoidentityprovider.CreateResourceServerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateResourceServerOutput)
		}
	}

	return r0, r1
}

// CreateResourceServerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateResourceServerWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateResourceServerInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateResourceServerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateResourceServerInput, ...request.Option) *cognitoidentityprovider.CreateResourceServerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateResourceServerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserImportJob provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserImportJob(_a0 *cognitoidentityprovider.CreateUserImportJobInput) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateUserImportJobOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserImportJobInput) *cognitoidentityprovider.CreateUserImportJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserImportJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserImportJobRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserImportJobRequest(_a0 *cognitoidentityprovider.CreateUserImportJobInput) (*request.Request, *cognitoidentityprovider.CreateUserImportJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserImportJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateUserImportJobOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserImportJobInput) *cognitoidentityprovider.CreateUserImportJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateUserImportJobOutput)
		}
	}

	return r0, r1
}

// CreateUserImportJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateUserImportJobWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateUserImportJobInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateUserImportJobOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserImportJobInput, ...request.Option) *cognitoidentityprovider.CreateUserImportJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserImportJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPool provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserPool(_a0 *cognitoidentityprovider.CreateUserPoolInput) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateUserPoolOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserPoolInput) *cognitoidentityprovider.CreateUserPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolClient provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserPoolClient(_a0 *cognitoidentityprovider.CreateUserPoolClientInput) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserPoolClientInput) *cognitoidentityprovider.CreateUserPoolClientOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserPoolClientInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolClientRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserPoolClientRequest(_a0 *cognitoidentityprovider.CreateUserPoolClientInput) (*request.Request, *cognitoidentityprovider.CreateUserPoolClientOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserPoolClientInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateUserPoolClientOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserPoolClientInput) *cognitoidentityprovider.CreateUserPoolClientOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateUserPoolClientOutput)
		}
	}

	return r0, r1
}

// CreateUserPoolClientWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateUserPoolClientWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateUserPoolClientInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolClientInput, ...request.Option) *cognitoidentityprovider.CreateUserPoolClientOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserPoolClientInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolDomain provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserPoolDomain(_a0 *cognitoidentityprovider.CreateUserPoolDomainInput) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.CreateUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserPoolDomainInput) *cognitoidentityprovider.CreateUserPoolDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserPoolDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolDomainRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserPoolDomainRequest(_a0 *cognitoidentityprovider.CreateUserPoolDomainInput) (*request.Request, *cognitoidentityprovider.CreateUserPoolDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserPoolDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateUserPoolDomainOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserPoolDomainInput) *cognitoidentityprovider.CreateUserPoolDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateUserPoolDomainOutput)
		}
	}

	return r0, r1
}

// CreateUserPoolDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateUserPoolDomainWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateUserPoolDomainInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolDomainInput, ...request.Option) *cognitoidentityprovider.CreateUserPoolDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserPoolDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) CreateUserPoolRequest(_a0 *cognitoidentityprovider.CreateUserPoolInput) (*request.Request, *cognitoidentityprovider.CreateUserPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.CreateUserPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.CreateUserPoolOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.CreateUserPoolInput) *cognitoidentityprovider.CreateUserPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.CreateUserPoolOutput)
		}
	}

	return r0, r1
}

// CreateUserPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) CreateUserPoolWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.CreateUserPoolInput, _a2 ...request.Option) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.CreateUserPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolInput, ...request.Option) *cognitoidentityprovider.CreateUserPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteGroup(_a0 *cognitoidentityprovider.DeleteGroupInput) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteGroupInput) *cognitoidentityprovider.DeleteGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteGroupRequest(_a0 *cognitoidentityprovider.DeleteGroupInput) (*request.Request, *cognitoidentityprovider.DeleteGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteGroupInput) *cognitoidentityprovider.DeleteGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteGroupOutput)
		}
	}

	return r0, r1
}

// DeleteGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteGroupInput, ...request.Option) *cognitoidentityprovider.DeleteGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityProvider provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteIdentityProvider(_a0 *cognitoidentityprovider.DeleteIdentityProviderInput) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteIdentityProviderInput) *cognitoidentityprovider.DeleteIdentityProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteIdentityProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityProviderRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteIdentityProviderRequest(_a0 *cognitoidentityprovider.DeleteIdentityProviderInput) (*request.Request, *cognitoidentityprovider.DeleteIdentityProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteIdentityProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteIdentityProviderOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteIdentityProviderInput) *cognitoidentityprovider.DeleteIdentityProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteIdentityProviderOutput)
		}
	}

	return r0, r1
}

// DeleteIdentityProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteIdentityProviderWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteIdentityProviderInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteIdentityProviderInput, ...request.Option) *cognitoidentityprovider.DeleteIdentityProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteIdentityProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceServer provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteResourceServer(_a0 *cognitoidentityprovider.DeleteResourceServerInput) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteResourceServerOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteResourceServerInput) *cognitoidentityprovider.DeleteResourceServerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteResourceServerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceServerRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteResourceServerRequest(_a0 *cognitoidentityprovider.DeleteResourceServerInput) (*request.Request, *cognitoidentityprovider.DeleteResourceServerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteResourceServerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteResourceServerOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteResourceServerInput) *cognitoidentityprovider.DeleteResourceServerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteResourceServerOutput)
		}
	}

	return r0, r1
}

// DeleteResourceServerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteResourceServerWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteResourceServerInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteResourceServerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteResourceServerInput, ...request.Option) *cognitoidentityprovider.DeleteResourceServerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteResourceServerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUser(_a0 *cognitoidentityprovider.DeleteUserInput) (*cognitoidentityprovider.DeleteUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserInput) *cognitoidentityprovider.DeleteUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserAttributes provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserAttributes(_a0 *cognitoidentityprovider.DeleteUserAttributesInput) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteUserAttributesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserAttributesInput) *cognitoidentityprovider.DeleteUserAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserAttributesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserAttributesRequest(_a0 *cognitoidentityprovider.DeleteUserAttributesInput) (*request.Request, *cognitoidentityprovider.DeleteUserAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteUserAttributesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserAttributesInput) *cognitoidentityprovider.DeleteUserAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteUserAttributesOutput)
		}
	}

	return r0, r1
}

// DeleteUserAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteUserAttributesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteUserAttributesInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteUserAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserAttributesInput, ...request.Option) *cognitoidentityprovider.DeleteUserAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPool provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserPool(_a0 *cognitoidentityprovider.DeleteUserPoolInput) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteUserPoolOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserPoolInput) *cognitoidentityprovider.DeleteUserPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolClient provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolClient(_a0 *cognitoidentityprovider.DeleteUserPoolClientInput) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserPoolClientInput) *cognitoidentityprovider.DeleteUserPoolClientOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserPoolClientInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolClientRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolClientRequest(_a0 *cognitoidentityprovider.DeleteUserPoolClientInput) (*request.Request, *cognitoidentityprovider.DeleteUserPoolClientOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserPoolClientInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteUserPoolClientOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserPoolClientInput) *cognitoidentityprovider.DeleteUserPoolClientOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteUserPoolClientOutput)
		}
	}

	return r0, r1
}

// DeleteUserPoolClientWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolClientWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteUserPoolClientInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolClientInput, ...request.Option) *cognitoidentityprovider.DeleteUserPoolClientOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolClientInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolDomain provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolDomain(_a0 *cognitoidentityprovider.DeleteUserPoolDomainInput) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DeleteUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserPoolDomainInput) *cognitoidentityprovider.DeleteUserPoolDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserPoolDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolDomainRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolDomainRequest(_a0 *cognitoidentityprovider.DeleteUserPoolDomainInput) (*request.Request, *cognitoidentityprovider.DeleteUserPoolDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserPoolDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteUserPoolDomainOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserPoolDomainInput) *cognitoidentityprovider.DeleteUserPoolDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
		}
	}

	return r0, r1
}

// DeleteUserPoolDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolDomainWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteUserPoolDomainInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolDomainInput, ...request.Option) *cognitoidentityprovider.DeleteUserPoolDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolRequest(_a0 *cognitoidentityprovider.DeleteUserPoolInput) (*request.Request, *cognitoidentityprovider.DeleteUserPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteUserPoolOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserPoolInput) *cognitoidentityprovider.DeleteUserPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteUserPoolOutput)
		}
	}

	return r0, r1
}

// DeleteUserPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteUserPoolWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteUserPoolInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteUserPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolInput, ...request.Option) *cognitoidentityprovider.DeleteUserPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DeleteUserRequest(_a0 *cognitoidentityprovider.DeleteUserInput) (*request.Request, *cognitoidentityprovider.DeleteUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DeleteUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DeleteUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DeleteUserInput) *cognitoidentityprovider.DeleteUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DeleteUserOutput)
		}
	}

	return r0, r1
}

// DeleteUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DeleteUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DeleteUserInput, _a2 ...request.Option) (*cognitoidentityprovider.DeleteUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DeleteUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserInput, ...request.Option) *cognitoidentityprovider.DeleteUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityProvider provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeIdentityProvider(_a0 *cognitoidentityprovider.DescribeIdentityProviderInput) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeIdentityProviderInput) *cognitoidentityprovider.DescribeIdentityProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeIdentityProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityProviderRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeIdentityProviderRequest(_a0 *cognitoidentityprovider.DescribeIdentityProviderInput) (*request.Request, *cognitoidentityprovider.DescribeIdentityProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeIdentityProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeIdentityProviderOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeIdentityProviderInput) *cognitoidentityprovider.DescribeIdentityProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeIdentityProviderOutput)
		}
	}

	return r0, r1
}

// DescribeIdentityProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeIdentityProviderWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeIdentityProviderInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeIdentityProviderInput, ...request.Option) *cognitoidentityprovider.DescribeIdentityProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeIdentityProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourceServer provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeResourceServer(_a0 *cognitoidentityprovider.DescribeResourceServerInput) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeResourceServerOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeResourceServerInput) *cognitoidentityprovider.DescribeResourceServerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeResourceServerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourceServerRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeResourceServerRequest(_a0 *cognitoidentityprovider.DescribeResourceServerInput) (*request.Request, *cognitoidentityprovider.DescribeResourceServerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeResourceServerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeResourceServerOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeResourceServerInput) *cognitoidentityprovider.DescribeResourceServerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeResourceServerOutput)
		}
	}

	return r0, r1
}

// DescribeResourceServerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeResourceServerWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeResourceServerInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeResourceServerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeResourceServerInput, ...request.Option) *cognitoidentityprovider.DescribeResourceServerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeResourceServerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRiskConfiguration provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeRiskConfiguration(_a0 *cognitoidentityprovider.DescribeRiskConfigurationInput) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeRiskConfigurationOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeRiskConfigurationInput) *cognitoidentityprovider.DescribeRiskConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeRiskConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRiskConfigurationRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeRiskConfigurationRequest(_a0 *cognitoidentityprovider.DescribeRiskConfigurationInput) (*request.Request, *cognitoidentityprovider.DescribeRiskConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeRiskConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeRiskConfigurationOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeRiskConfigurationInput) *cognitoidentityprovider.DescribeRiskConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
		}
	}

	return r0, r1
}

// DescribeRiskConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeRiskConfigurationWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeRiskConfigurationInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeRiskConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeRiskConfigurationInput, ...request.Option) *cognitoidentityprovider.DescribeRiskConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeRiskConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserImportJob provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserImportJob(_a0 *cognitoidentityprovider.DescribeUserImportJobInput) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeUserImportJobOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserImportJobInput) *cognitoidentityprovider.DescribeUserImportJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserImportJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserImportJobRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserImportJobRequest(_a0 *cognitoidentityprovider.DescribeUserImportJobInput) (*request.Request, *cognitoidentityprovider.DescribeUserImportJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserImportJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeUserImportJobOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserImportJobInput) *cognitoidentityprovider.DescribeUserImportJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeUserImportJobOutput)
		}
	}

	return r0, r1
}

// DescribeUserImportJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeUserImportJobWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeUserImportJobInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeUserImportJobOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserImportJobInput, ...request.Option) *cognitoidentityprovider.DescribeUserImportJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserImportJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPool provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserPool(_a0 *cognitoidentityprovider.DescribeUserPoolInput) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeUserPoolOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserPoolInput) *cognitoidentityprovider.DescribeUserPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolClient provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolClient(_a0 *cognitoidentityprovider.DescribeUserPoolClientInput) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserPoolClientInput) *cognitoidentityprovider.DescribeUserPoolClientOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserPoolClientInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolClientRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolClientRequest(_a0 *cognitoidentityprovider.DescribeUserPoolClientInput) (*request.Request, *cognitoidentityprovider.DescribeUserPoolClientOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserPoolClientInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeUserPoolClientOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserPoolClientInput) *cognitoidentityprovider.DescribeUserPoolClientOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeUserPoolClientOutput)
		}
	}

	return r0, r1
}

// DescribeUserPoolClientWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolClientWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeUserPoolClientInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolClientInput, ...request.Option) *cognitoidentityprovider.DescribeUserPoolClientOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolClientInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolDomain provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolDomain(_a0 *cognitoidentityprovider.DescribeUserPoolDomainInput) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.DescribeUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserPoolDomainInput) *cognitoidentityprovider.DescribeUserPoolDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserPoolDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolDomainRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolDomainRequest(_a0 *cognitoidentityprovider.DescribeUserPoolDomainInput) (*request.Request, *cognitoidentityprovider.DescribeUserPoolDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserPoolDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeUserPoolDomainOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserPoolDomainInput) *cognitoidentityprovider.DescribeUserPoolDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
		}
	}

	return r0, r1
}

// DescribeUserPoolDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolDomainWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeUserPoolDomainInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolDomainInput, ...request.Option) *cognitoidentityprovider.DescribeUserPoolDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolRequest(_a0 *cognitoidentityprovider.DescribeUserPoolInput) (*request.Request, *cognitoidentityprovider.DescribeUserPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.DescribeUserPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.DescribeUserPoolOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.DescribeUserPoolInput) *cognitoidentityprovider.DescribeUserPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.DescribeUserPoolOutput)
		}
	}

	return r0, r1
}

// DescribeUserPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) DescribeUserPoolWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.DescribeUserPoolInput, _a2 ...request.Option) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.DescribeUserPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolInput, ...request.Option) *cognitoidentityprovider.DescribeUserPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetDevice provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ForgetDevice(_a0 *cognitoidentityprovider.ForgetDeviceInput) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ForgetDeviceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ForgetDeviceInput) *cognitoidentityprovider.ForgetDeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ForgetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ForgetDeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetDeviceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ForgetDeviceRequest(_a0 *cognitoidentityprovider.ForgetDeviceInput) (*request.Request, *cognitoidentityprovider.ForgetDeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ForgetDeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ForgetDeviceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ForgetDeviceInput) *cognitoidentityprovider.ForgetDeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ForgetDeviceOutput)
		}
	}

	return r0, r1
}

// ForgetDeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ForgetDeviceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ForgetDeviceInput, _a2 ...request.Option) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ForgetDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ForgetDeviceInput, ...request.Option) *cognitoidentityprovider.ForgetDeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ForgetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ForgetDeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPassword provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ForgotPassword(_a0 *cognitoidentityprovider.ForgotPasswordInput) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ForgotPasswordOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ForgotPasswordInput) *cognitoidentityprovider.ForgotPasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ForgotPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ForgotPasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPasswordRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ForgotPasswordRequest(_a0 *cognitoidentityprovider.ForgotPasswordInput) (*request.Request, *cognitoidentityprovider.ForgotPasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ForgotPasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ForgotPasswordOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ForgotPasswordInput) *cognitoidentityprovider.ForgotPasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ForgotPasswordOutput)
		}
	}

	return r0, r1
}

// ForgotPasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ForgotPasswordWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ForgotPasswordInput, _a2 ...request.Option) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ForgotPasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ForgotPasswordInput, ...request.Option) *cognitoidentityprovider.ForgotPasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ForgotPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ForgotPasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCSVHeader provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetCSVHeader(_a0 *cognitoidentityprovider.GetCSVHeaderInput) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetCSVHeaderOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetCSVHeaderInput) *cognitoidentityprovider.GetCSVHeaderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetCSVHeaderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetCSVHeaderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCSVHeaderRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetCSVHeaderRequest(_a0 *cognitoidentityprovider.GetCSVHeaderInput) (*request.Request, *cognitoidentityprovider.GetCSVHeaderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetCSVHeaderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetCSVHeaderOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetCSVHeaderInput) *cognitoidentityprovider.GetCSVHeaderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetCSVHeaderOutput)
		}
	}

	return r0, r1
}

// GetCSVHeaderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetCSVHeaderWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetCSVHeaderInput, _a2 ...request.Option) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetCSVHeaderOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetCSVHeaderInput, ...request.Option) *cognitoidentityprovider.GetCSVHeaderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetCSVHeaderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetCSVHeaderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetDevice(_a0 *cognitoidentityprovider.GetDeviceInput) (*cognitoidentityprovider.GetDeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetDeviceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetDeviceInput) *cognitoidentityprovider.GetDeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetDeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetDeviceRequest(_a0 *cognitoidentityprovider.GetDeviceInput) (*request.Request, *cognitoidentityprovider.GetDeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetDeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetDeviceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetDeviceInput) *cognitoidentityprovider.GetDeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetDeviceOutput)
		}
	}

	return r0, r1
}

// GetDeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetDeviceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetDeviceInput, _a2 ...request.Option) (*cognitoidentityprovider.GetDeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetDeviceInput, ...request.Option) *cognitoidentityprovider.GetDeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetDeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetGroup(_a0 *cognitoidentityprovider.GetGroupInput) (*cognitoidentityprovider.GetGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetGroupInput) *cognitoidentityprovider.GetGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetGroupRequest(_a0 *cognitoidentityprovider.GetGroupInput) (*request.Request, *cognitoidentityprovider.GetGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetGroupInput) *cognitoidentityprovider.GetGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetGroupOutput)
		}
	}

	return r0, r1
}

// GetGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.GetGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetGroupInput, ...request.Option) *cognitoidentityprovider.GetGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityProviderByIdentifier provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetIdentityProviderByIdentifier(_a0 *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetIdentityProviderByIdentifierInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityProviderByIdentifierRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetIdentityProviderByIdentifierRequest(_a0 *cognitoidentityprovider.GetIdentityProviderByIdentifierInput) (*request.Request, *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetIdentityProviderByIdentifierInput) *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
		}
	}

	return r0, r1
}

// GetIdentityProviderByIdentifierWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetIdentityProviderByIdentifierWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, _a2 ...request.Option) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, ...request.Option) *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSigningCertificate provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetSigningCertificate(_a0 *cognitoidentityprovider.GetSigningCertificateInput) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetSigningCertificateOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetSigningCertificateInput) *cognitoidentityprovider.GetSigningCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetSigningCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetSigningCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSigningCertificateRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetSigningCertificateRequest(_a0 *cognitoidentityprovider.GetSigningCertificateInput) (*request.Request, *cognitoidentityprovider.GetSigningCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetSigningCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetSigningCertificateOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetSigningCertificateInput) *cognitoidentityprovider.GetSigningCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetSigningCertificateOutput)
		}
	}

	return r0, r1
}

// GetSigningCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetSigningCertificateWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetSigningCertificateInput, _a2 ...request.Option) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetSigningCertificateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetSigningCertificateInput, ...request.Option) *cognitoidentityprovider.GetSigningCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetSigningCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetSigningCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUICustomization provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUICustomization(_a0 *cognitoidentityprovider.GetUICustomizationInput) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetUICustomizationOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUICustomizationInput) *cognitoidentityprovider.GetUICustomizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUICustomizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUICustomizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUICustomizationRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUICustomizationRequest(_a0 *cognitoidentityprovider.GetUICustomizationInput) (*request.Request, *cognitoidentityprovider.GetUICustomizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUICustomizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetUICustomizationOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUICustomizationInput) *cognitoidentityprovider.GetUICustomizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetUICustomizationOutput)
		}
	}

	return r0, r1
}

// GetUICustomizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetUICustomizationWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetUICustomizationInput, _a2 ...request.Option) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetUICustomizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUICustomizationInput, ...request.Option) *cognitoidentityprovider.GetUICustomizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUICustomizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUICustomizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUser(_a0 *cognitoidentityprovider.GetUserInput) (*cognitoidentityprovider.GetUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetUserOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUserInput) *cognitoidentityprovider.GetUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAttributeVerificationCode provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUserAttributeVerificationCode(_a0 *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUserAttributeVerificationCodeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAttributeVerificationCodeRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUserAttributeVerificationCodeRequest(_a0 *cognitoidentityprovider.GetUserAttributeVerificationCodeInput) (*request.Request, *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUserAttributeVerificationCodeInput) *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
		}
	}

	return r0, r1
}

// GetUserAttributeVerificationCodeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetUserAttributeVerificationCodeWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, _a2 ...request.Option) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, ...request.Option) *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPoolMfaConfig provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUserPoolMfaConfig(_a0 *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GetUserPoolMfaConfigOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUserPoolMfaConfigInput) *cognitoidentityprovider.GetUserPoolMfaConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUserPoolMfaConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPoolMfaConfigRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUserPoolMfaConfigRequest(_a0 *cognitoidentityprovider.GetUserPoolMfaConfigInput) (*request.Request, *cognitoidentityprovider.GetUserPoolMfaConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUserPoolMfaConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetUserPoolMfaConfigOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUserPoolMfaConfigInput) *cognitoidentityprovider.GetUserPoolMfaConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
		}
	}

	return r0, r1
}

// GetUserPoolMfaConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetUserPoolMfaConfigWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetUserPoolMfaConfigInput, _a2 ...request.Option) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetUserPoolMfaConfigOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserPoolMfaConfigInput, ...request.Option) *cognitoidentityprovider.GetUserPoolMfaConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUserPoolMfaConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GetUserRequest(_a0 *cognitoidentityprovider.GetUserInput) (*request.Request, *cognitoidentityprovider.GetUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GetUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GetUserOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GetUserInput) *cognitoidentityprovider.GetUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GetUserOutput)
		}
	}

	return r0, r1
}

// GetUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GetUserWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GetUserInput, _a2 ...request.Option) (*cognitoidentityprovider.GetUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GetUserOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserInput, ...request.Option) *cognitoidentityprovider.GetUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSignOut provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GlobalSignOut(_a0 *cognitoidentityprovider.GlobalSignOutInput) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.GlobalSignOutOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GlobalSignOutInput) *cognitoidentityprovider.GlobalSignOutOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GlobalSignOutOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GlobalSignOutInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSignOutRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) GlobalSignOutRequest(_a0 *cognitoidentityprovider.GlobalSignOutInput) (*request.Request, *cognitoidentityprovider.GlobalSignOutOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.GlobalSignOutInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.GlobalSignOutOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.GlobalSignOutInput) *cognitoidentityprovider.GlobalSignOutOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.GlobalSignOutOutput)
		}
	}

	return r0, r1
}

// GlobalSignOutWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) GlobalSignOutWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.GlobalSignOutInput, _a2 ...request.Option) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.GlobalSignOutOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GlobalSignOutInput, ...request.Option) *cognitoidentityprovider.GlobalSignOutOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GlobalSignOutOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GlobalSignOutInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateAuth provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) InitiateAuth(_a0 *cognitoidentityprovider.InitiateAuthInput) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.InitiateAuthOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.InitiateAuthInput) *cognitoidentityprovider.InitiateAuthOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.InitiateAuthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.InitiateAuthInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateAuthRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) InitiateAuthRequest(_a0 *cognitoidentityprovider.InitiateAuthInput) (*request.Request, *cognitoidentityprovider.InitiateAuthOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.InitiateAuthInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.InitiateAuthOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.InitiateAuthInput) *cognitoidentityprovider.InitiateAuthOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.InitiateAuthOutput)
		}
	}

	return r0, r1
}

// InitiateAuthWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) InitiateAuthWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.InitiateAuthInput, _a2 ...request.Option) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.InitiateAuthOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...request.Option) *cognitoidentityprovider.InitiateAuthOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.InitiateAuthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListDevices(_a0 *cognitoidentityprovider.ListDevicesInput) (*cognitoidentityprovider.ListDevicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListDevicesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListDevicesInput) *cognitoidentityprovider.ListDevicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListDevicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListDevicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevicesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListDevicesRequest(_a0 *cognitoidentityprovider.ListDevicesInput) (*request.Request, *cognitoidentityprovider.ListDevicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListDevicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListDevicesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListDevicesInput) *cognitoidentityprovider.ListDevicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListDevicesOutput)
		}
	}

	return r0, r1
}

// ListDevicesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListDevicesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListDevicesInput, _a2 ...request.Option) (*cognitoidentityprovider.ListDevicesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListDevicesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListDevicesInput, ...request.Option) *cognitoidentityprovider.ListDevicesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListDevicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListDevicesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListGroups(_a0 *cognitoidentityprovider.ListGroupsInput) (*cognitoidentityprovider.ListGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListGroupsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListGroupsInput) *cognitoidentityprovider.ListGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListGroupsPages(_a0 *cognitoidentityprovider.ListGroupsInput, _a1 func(*cognitoidentityprovider.ListGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListGroupsInput, func(*cognitoidentityprovider.ListGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListGroupsPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListGroupsInput, _a2 func(*cognitoidentityprovider.ListGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListGroupsInput, func(*cognitoidentityprovider.ListGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListGroupsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListGroupsRequest(_a0 *cognitoidentityprovider.ListGroupsInput) (*request.Request, *cognitoidentityprovider.ListGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListGroupsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListGroupsInput) *cognitoidentityprovider.ListGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListGroupsOutput)
		}
	}

	return r0, r1
}

// ListGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListGroupsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListGroupsInput, _a2 ...request.Option) (*cognitoidentityprovider.ListGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListGroupsInput, ...request.Option) *cognitoidentityprovider.ListGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityProviders provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListIdentityProviders(_a0 *cognitoidentityprovider.ListIdentityProvidersInput) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListIdentityProvidersOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListIdentityProvidersInput) *cognitoidentityprovider.ListIdentityProvidersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListIdentityProvidersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListIdentityProvidersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityProvidersPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListIdentityProvidersPages(_a0 *cognitoidentityprovider.ListIdentityProvidersInput, _a1 func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListIdentityProvidersInput, func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListIdentityProvidersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListIdentityProvidersPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListIdentityProvidersInput, _a2 func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListIdentityProvidersInput, func(*cognitoidentityprovider.ListIdentityProvidersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListIdentityProvidersRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListIdentityProvidersRequest(_a0 *cognitoidentityprovider.ListIdentityProvidersInput) (*request.Request, *cognitoidentityprovider.ListIdentityProvidersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListIdentityProvidersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListIdentityProvidersOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListIdentityProvidersInput) *cognitoidentityprovider.ListIdentityProvidersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListIdentityProvidersOutput)
		}
	}

	return r0, r1
}

// ListIdentityProvidersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListIdentityProvidersWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListIdentityProvidersInput, _a2 ...request.Option) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListIdentityProvidersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListIdentityProvidersInput, ...request.Option) *cognitoidentityprovider.ListIdentityProvidersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListIdentityProvidersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListIdentityProvidersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceServers provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListResourceServers(_a0 *cognitoidentityprovider.ListResourceServersInput) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListResourceServersOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListResourceServersInput) *cognitoidentityprovider.ListResourceServersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListResourceServersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListResourceServersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceServersPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListResourceServersPages(_a0 *cognitoidentityprovider.ListResourceServersInput, _a1 func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListResourceServersInput, func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListResourceServersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListResourceServersPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListResourceServersInput, _a2 func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListResourceServersInput, func(*cognitoidentityprovider.ListResourceServersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListResourceServersRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListResourceServersRequest(_a0 *cognitoidentityprovider.ListResourceServersInput) (*request.Request, *cognitoidentityprovider.ListResourceServersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListResourceServersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListResourceServersOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListResourceServersInput) *cognitoidentityprovider.ListResourceServersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListResourceServersOutput)
		}
	}

	return r0, r1
}

// ListResourceServersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListResourceServersWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListResourceServersInput, _a2 ...request.Option) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListResourceServersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListResourceServersInput, ...request.Option) *cognitoidentityprovider.ListResourceServersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListResourceServersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListResourceServersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListTagsForResource(_a0 *cognitoidentityprovider.ListTagsForResourceInput) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListTagsForResourceInput) *cognitoidentityprovider.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListTagsForResourceRequest(_a0 *cognitoidentityprovider.ListTagsForResourceInput) (*request.Request, *cognitoidentityprovider.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListTagsForResourceInput) *cognitoidentityprovider.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListTagsForResourceInput, _a2 ...request.Option) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListTagsForResourceInput, ...request.Option) *cognitoidentityprovider.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserImportJobs provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUserImportJobs(_a0 *cognitoidentityprovider.ListUserImportJobsInput) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListUserImportJobsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserImportJobsInput) *cognitoidentityprovider.ListUserImportJobsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserImportJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUserImportJobsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserImportJobsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUserImportJobsRequest(_a0 *cognitoidentityprovider.ListUserImportJobsInput) (*request.Request, *cognitoidentityprovider.ListUserImportJobsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserImportJobsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListUserImportJobsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUserImportJobsInput) *cognitoidentityprovider.ListUserImportJobsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListUserImportJobsOutput)
		}
	}

	return r0, r1
}

// ListUserImportJobsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListUserImportJobsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUserImportJobsInput, _a2 ...request.Option) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListUserImportJobsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserImportJobsInput, ...request.Option) *cognitoidentityprovider.ListUserImportJobsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserImportJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserImportJobsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserPoolClients provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUserPoolClients(_a0 *cognitoidentityprovider.ListUserPoolClientsInput) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListUserPoolClientsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserPoolClientsInput) *cognitoidentityprovider.ListUserPoolClientsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolClientsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUserPoolClientsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserPoolClientsPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListUserPoolClientsPages(_a0 *cognitoidentityprovider.ListUserPoolClientsInput, _a1 func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserPoolClientsInput, func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUserPoolClientsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListUserPoolClientsPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUserPoolClientsInput, _a2 func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolClientsInput, func(*cognitoidentityprovider.ListUserPoolClientsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUserPoolClientsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUserPoolClientsRequest(_a0 *cognitoidentityprovider.ListUserPoolClientsInput) (*request.Request, *cognitoidentityprovider.ListUserPoolClientsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserPoolClientsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListUserPoolClientsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUserPoolClientsInput) *cognitoidentityprovider.ListUserPoolClientsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListUserPoolClientsOutput)
		}
	}

	return r0, r1
}

// ListUserPoolClientsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListUserPoolClientsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUserPoolClientsInput, _a2 ...request.Option) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListUserPoolClientsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolClientsInput, ...request.Option) *cognitoidentityprovider.ListUserPoolClientsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolClientsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserPoolClientsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserPools provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUserPools(_a0 *cognitoidentityprovider.ListUserPoolsInput) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListUserPoolsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserPoolsInput) *cognitoidentityprovider.ListUserPoolsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUserPoolsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserPoolsPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListUserPoolsPages(_a0 *cognitoidentityprovider.ListUserPoolsInput, _a1 func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserPoolsInput, func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUserPoolsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListUserPoolsPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUserPoolsInput, _a2 func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, func(*cognitoidentityprovider.ListUserPoolsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUserPoolsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUserPoolsRequest(_a0 *cognitoidentityprovider.ListUserPoolsInput) (*request.Request, *cognitoidentityprovider.ListUserPoolsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUserPoolsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListUserPoolsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUserPoolsInput) *cognitoidentityprovider.ListUserPoolsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListUserPoolsOutput)
		}
	}

	return r0, r1
}

// ListUserPoolsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListUserPoolsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUserPoolsInput, _a2 ...request.Option) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListUserPoolsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...request.Option) *cognitoidentityprovider.ListUserPoolsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUsers(_a0 *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListUsersOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInput) *cognitoidentityprovider.ListUsersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUsersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersInGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUsersInGroup(_a0 *cognitoidentityprovider.ListUsersInGroupInput) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ListUsersInGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInGroupInput) *cognitoidentityprovider.ListUsersInGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersInGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUsersInGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersInGroupPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListUsersInGroupPages(_a0 *cognitoidentityprovider.ListUsersInGroupInput, _a1 func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInGroupInput, func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsersInGroupPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListUsersInGroupPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUsersInGroupInput, _a2 func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInGroupInput, func(*cognitoidentityprovider.ListUsersInGroupOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsersInGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUsersInGroupRequest(_a0 *cognitoidentityprovider.ListUsersInGroupInput) (*request.Request, *cognitoidentityprovider.ListUsersInGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListUsersInGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUsersInGroupInput) *cognitoidentityprovider.ListUsersInGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListUsersInGroupOutput)
		}
	}

	return r0, r1
}

// ListUsersInGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListUsersInGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUsersInGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListUsersInGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInGroupInput, ...request.Option) *cognitoidentityprovider.ListUsersInGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersInGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUsersInGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersPages provides a mock function with given fields: _a0, _a1
func (_m *CognitoIdentityProviderAPI) ListUsersPages(_a0 *cognitoidentityprovider.ListUsersInput, _a1 func(*cognitoidentityprovider.ListUsersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInput, func(*cognitoidentityprovider.ListUsersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CognitoIdentityProviderAPI) ListUsersPagesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUsersInput, _a2 func(*cognitoidentityprovider.ListUsersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInput, func(*cognitoidentityprovider.ListUsersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsersRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ListUsersRequest(_a0 *cognitoidentityprovider.ListUsersInput) (*request.Request, *cognitoidentityprovider.ListUsersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ListUsersOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUsersInput) *cognitoidentityprovider.ListUsersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	return r0, r1
}

// ListUsersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ListUsersWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ListUsersInput, _a2 ...request.Option) (*cognitoidentityprovider.ListUsersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ListUsersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...request.Option) *cognitoidentityprovider.ListUsersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendConfirmationCode provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ResendConfirmationCode(_a0 *cognitoidentityprovider.ResendConfirmationCodeInput) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.ResendConfirmationCodeOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ResendConfirmationCodeInput) *cognitoidentityprovider.ResendConfirmationCodeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ResendConfirmationCodeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ResendConfirmationCodeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendConfirmationCodeRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) ResendConfirmationCodeRequest(_a0 *cognitoidentityprovider.ResendConfirmationCodeInput) (*request.Request, *cognitoidentityprovider.ResendConfirmationCodeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ResendConfirmationCodeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.ResendConfirmationCodeOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ResendConfirmationCodeInput) *cognitoidentityprovider.ResendConfirmationCodeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.ResendConfirmationCodeOutput)
		}
	}

	return r0, r1
}

// ResendConfirmationCodeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) ResendConfirmationCodeWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.ResendConfirmationCodeInput, _a2 ...request.Option) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.ResendConfirmationCodeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ResendConfirmationCodeInput, ...request.Option) *cognitoidentityprovider.ResendConfirmationCodeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ResendConfirmationCodeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ResendConfirmationCodeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RespondToAuthChallenge provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) RespondToAuthChallenge(_a0 *cognitoidentityprovider.RespondToAuthChallengeInput) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.RespondToAuthChallengeOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.RespondToAuthChallengeInput) *cognitoidentityprovider.RespondToAuthChallengeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.RespondToAuthChallengeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.RespondToAuthChallengeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RespondToAuthChallengeRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) RespondToAuthChallengeRequest(_a0 *cognitoidentityprovider.RespondToAuthChallengeInput) (*request.Request, *cognitoidentityprovider.RespondToAuthChallengeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.RespondToAuthChallengeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.RespondToAuthChallengeOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.RespondToAuthChallengeInput) *cognitoidentityprovider.RespondToAuthChallengeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.RespondToAuthChallengeOutput)
		}
	}

	return r0, r1
}

// RespondToAuthChallengeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) RespondToAuthChallengeWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.RespondToAuthChallengeInput, _a2 ...request.Option) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.RespondToAuthChallengeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.RespondToAuthChallengeInput, ...request.Option) *cognitoidentityprovider.RespondToAuthChallengeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.RespondToAuthChallengeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.RespondToAuthChallengeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRiskConfiguration provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetRiskConfiguration(_a0 *cognitoidentityprovider.SetRiskConfigurationInput) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.SetRiskConfigurationOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetRiskConfigurationInput) *cognitoidentityprovider.SetRiskConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetRiskConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetRiskConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRiskConfigurationRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetRiskConfigurationRequest(_a0 *cognitoidentityprovider.SetRiskConfigurationInput) (*request.Request, *cognitoidentityprovider.SetRiskConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetRiskConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.SetRiskConfigurationOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetRiskConfigurationInput) *cognitoidentityprovider.SetRiskConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.SetRiskConfigurationOutput)
		}
	}

	return r0, r1
}

// SetRiskConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) SetRiskConfigurationWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.SetRiskConfigurationInput, _a2 ...request.Option) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.SetRiskConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetRiskConfigurationInput, ...request.Option) *cognitoidentityprovider.SetRiskConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetRiskConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetRiskConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUICustomization provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUICustomization(_a0 *cognitoidentityprovider.SetUICustomizationInput) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.SetUICustomizationOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUICustomizationInput) *cognitoidentityprovider.SetUICustomizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUICustomizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUICustomizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUICustomizationRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUICustomizationRequest(_a0 *cognitoidentityprovider.SetUICustomizationInput) (*request.Request, *cognitoidentityprovider.SetUICustomizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUICustomizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.SetUICustomizationOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUICustomizationInput) *cognitoidentityprovider.SetUICustomizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.SetUICustomizationOutput)
		}
	}

	return r0, r1
}

// SetUICustomizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) SetUICustomizationWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.SetUICustomizationInput, _a2 ...request.Option) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.SetUICustomizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUICustomizationInput, ...request.Option) *cognitoidentityprovider.SetUICustomizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUICustomizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUICustomizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserMFAPreference provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUserMFAPreference(_a0 *cognitoidentityprovider.SetUserMFAPreferenceInput) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.SetUserMFAPreferenceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUserMFAPreferenceInput) *cognitoidentityprovider.SetUserMFAPreferenceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUserMFAPreferenceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserMFAPreferenceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUserMFAPreferenceRequest(_a0 *cognitoidentityprovider.SetUserMFAPreferenceInput) (*request.Request, *cognitoidentityprovider.SetUserMFAPreferenceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUserMFAPreferenceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.SetUserMFAPreferenceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUserMFAPreferenceInput) *cognitoidentityprovider.SetUserMFAPreferenceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
		}
	}

	return r0, r1
}

// SetUserMFAPreferenceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) SetUserMFAPreferenceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.SetUserMFAPreferenceInput, _a2 ...request.Option) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.SetUserMFAPreferenceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserMFAPreferenceInput, ...request.Option) *cognitoidentityprovider.SetUserMFAPreferenceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUserMFAPreferenceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserPoolMfaConfig provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUserPoolMfaConfig(_a0 *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.SetUserPoolMfaConfigOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUserPoolMfaConfigInput) *cognitoidentityprovider.SetUserPoolMfaConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUserPoolMfaConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserPoolMfaConfigRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUserPoolMfaConfigRequest(_a0 *cognitoidentityprovider.SetUserPoolMfaConfigInput) (*request.Request, *cognitoidentityprovider.SetUserPoolMfaConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUserPoolMfaConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.SetUserPoolMfaConfigOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUserPoolMfaConfigInput) *cognitoidentityprovider.SetUserPoolMfaConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
		}
	}

	return r0, r1
}

// SetUserPoolMfaConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) SetUserPoolMfaConfigWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.SetUserPoolMfaConfigInput, _a2 ...request.Option) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.SetUserPoolMfaConfigOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserPoolMfaConfigInput, ...request.Option) *cognitoidentityprovider.SetUserPoolMfaConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUserPoolMfaConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserSettings provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUserSettings(_a0 *cognitoidentityprovider.SetUserSettingsInput) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.SetUserSettingsOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUserSettingsInput) *cognitoidentityprovider.SetUserSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUserSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserSettingsRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SetUserSettingsRequest(_a0 *cognitoidentityprovider.SetUserSettingsInput) (*request.Request, *cognitoidentityprovider.SetUserSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SetUserSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.SetUserSettingsOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SetUserSettingsInput) *cognitoidentityprovider.SetUserSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.SetUserSettingsOutput)
		}
	}

	return r0, r1
}

// SetUserSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) SetUserSettingsWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.SetUserSettingsInput, _a2 ...request.Option) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.SetUserSettingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserSettingsInput, ...request.Option) *cognitoidentityprovider.SetUserSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUserSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SignUp(_a0 *cognitoidentityprovider.SignUpInput) (*cognitoidentityprovider.SignUpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.SignUpOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SignUpInput) *cognitoidentityprovider.SignUpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SignUpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SignUpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUpRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) SignUpRequest(_a0 *cognitoidentityprovider.SignUpInput) (*request.Request, *cognitoidentityprovider.SignUpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.SignUpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.SignUpOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.SignUpInput) *cognitoidentityprovider.SignUpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.SignUpOutput)
		}
	}

	return r0, r1
}

// SignUpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) SignUpWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.SignUpInput, _a2 ...request.Option) (*cognitoidentityprovider.SignUpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.SignUpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SignUpInput, ...request.Option) *cognitoidentityprovider.SignUpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SignUpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SignUpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartUserImportJob provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) StartUserImportJob(_a0 *cognitoidentityprovider.StartUserImportJobInput) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.StartUserImportJobOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.StartUserImportJobInput) *cognitoidentityprovider.StartUserImportJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.StartUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.StartUserImportJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartUserImportJobRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) StartUserImportJobRequest(_a0 *cognitoidentityprovider.StartUserImportJobInput) (*request.Request, *cognitoidentityprovider.StartUserImportJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.StartUserImportJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.StartUserImportJobOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.StartUserImportJobInput) *cognitoidentityprovider.StartUserImportJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.StartUserImportJobOutput)
		}
	}

	return r0, r1
}

// StartUserImportJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) StartUserImportJobWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.StartUserImportJobInput, _a2 ...request.Option) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.StartUserImportJobOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.StartUserImportJobInput, ...request.Option) *cognitoidentityprovider.StartUserImportJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.StartUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.StartUserImportJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopUserImportJob provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) StopUserImportJob(_a0 *cognitoidentityprovider.StopUserImportJobInput) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.StopUserImportJobOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.StopUserImportJobInput) *cognitoidentityprovider.StopUserImportJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.StopUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.StopUserImportJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopUserImportJobRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) StopUserImportJobRequest(_a0 *cognitoidentityprovider.StopUserImportJobInput) (*request.Request, *cognitoidentityprovider.StopUserImportJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.StopUserImportJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.StopUserImportJobOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.StopUserImportJobInput) *cognitoidentityprovider.StopUserImportJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.StopUserImportJobOutput)
		}
	}

	return r0, r1
}

// StopUserImportJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) StopUserImportJobWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.StopUserImportJobInput, _a2 ...request.Option) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.StopUserImportJobOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.StopUserImportJobInput, ...request.Option) *cognitoidentityprovider.StopUserImportJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.StopUserImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.StopUserImportJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) TagResource(_a0 *cognitoidentityprovider.TagResourceInput) (*cognitoidentityprovider.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.TagResourceInput) *cognitoidentityprovider.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) TagResourceRequest(_a0 *cognitoidentityprovider.TagResourceInput) (*request.Request, *cognitoidentityprovider.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.TagResourceInput) *cognitoidentityprovider.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) TagResourceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.TagResourceInput, _a2 ...request.Option) (*cognitoidentityprovider.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.TagResourceInput, ...request.Option) *cognitoidentityprovider.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UntagResource(_a0 *cognitoidentityprovider.UntagResourceInput) (*cognitoidentityprovider.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UntagResourceInput) *cognitoidentityprovider.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UntagResourceRequest(_a0 *cognitoidentityprovider.UntagResourceInput) (*request.Request, *cognitoidentityprovider.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UntagResourceInput) *cognitoidentityprovider.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UntagResourceWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UntagResourceInput, _a2 ...request.Option) (*cognitoidentityprovider.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UntagResourceInput, ...request.Option) *cognitoidentityprovider.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthEventFeedback provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateAuthEventFeedback(_a0 *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateAuthEventFeedbackInput) *cognitoidentityprovider.UpdateAuthEventFeedbackOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateAuthEventFeedbackInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthEventFeedbackRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateAuthEventFeedbackRequest(_a0 *cognitoidentityprovider.UpdateAuthEventFeedbackInput) (*request.Request, *cognitoidentityprovider.UpdateAuthEventFeedbackOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateAuthEventFeedbackInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateAuthEventFeedbackInput) *cognitoidentityprovider.UpdateAuthEventFeedbackOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
		}
	}

	return r0, r1
}

// UpdateAuthEventFeedbackWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateAuthEventFeedbackWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateAuthEventFeedbackInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateAuthEventFeedbackInput, ...request.Option) *cognitoidentityprovider.UpdateAuthEventFeedbackOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateAuthEventFeedbackInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceStatus provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateDeviceStatus(_a0 *cognitoidentityprovider.UpdateDeviceStatusInput) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateDeviceStatusOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateDeviceStatusInput) *cognitoidentityprovider.UpdateDeviceStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateDeviceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateDeviceStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceStatusRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateDeviceStatusRequest(_a0 *cognitoidentityprovider.UpdateDeviceStatusInput) (*request.Request, *cognitoidentityprovider.UpdateDeviceStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateDeviceStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateDeviceStatusOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateDeviceStatusInput) *cognitoidentityprovider.UpdateDeviceStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateDeviceStatusOutput)
		}
	}

	return r0, r1
}

// UpdateDeviceStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateDeviceStatusWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateDeviceStatusInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateDeviceStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateDeviceStatusInput, ...request.Option) *cognitoidentityprovider.UpdateDeviceStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateDeviceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateDeviceStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateGroup(_a0 *cognitoidentityprovider.UpdateGroupInput) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateGroupOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateGroupInput) *cognitoidentityprovider.UpdateGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroupRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateGroupRequest(_a0 *cognitoidentityprovider.UpdateGroupInput) (*request.Request, *cognitoidentityprovider.UpdateGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateGroupOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateGroupInput) *cognitoidentityprovider.UpdateGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateGroupOutput)
		}
	}

	return r0, r1
}

// UpdateGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateGroupWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateGroupInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateGroupInput, ...request.Option) *cognitoidentityprovider.UpdateGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityProvider provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateIdentityProvider(_a0 *cognitoidentityprovider.UpdateIdentityProviderInput) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateIdentityProviderInput) *cognitoidentityprovider.UpdateIdentityProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateIdentityProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityProviderRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateIdentityProviderRequest(_a0 *cognitoidentityprovider.UpdateIdentityProviderInput) (*request.Request, *cognitoidentityprovider.UpdateIdentityProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateIdentityProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateIdentityProviderOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateIdentityProviderInput) *cognitoidentityprovider.UpdateIdentityProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateIdentityProviderOutput)
		}
	}

	return r0, r1
}

// UpdateIdentityProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateIdentityProviderWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateIdentityProviderInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateIdentityProviderOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateIdentityProviderInput, ...request.Option) *cognitoidentityprovider.UpdateIdentityProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateIdentityProviderOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateIdentityProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceServer provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateResourceServer(_a0 *cognitoidentityprovider.UpdateResourceServerInput) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateResourceServerOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateResourceServerInput) *cognitoidentityprovider.UpdateResourceServerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateResourceServerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceServerRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateResourceServerRequest(_a0 *cognitoidentityprovider.UpdateResourceServerInput) (*request.Request, *cognitoidentityprovider.UpdateResourceServerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateResourceServerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateResourceServerOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateResourceServerInput) *cognitoidentityprovider.UpdateResourceServerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateResourceServerOutput)
		}
	}

	return r0, r1
}

// UpdateResourceServerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateResourceServerWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateResourceServerInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateResourceServerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateResourceServerInput, ...request.Option) *cognitoidentityprovider.UpdateResourceServerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateResourceServerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateResourceServerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAttributes provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserAttributes(_a0 *cognitoidentityprovider.UpdateUserAttributesInput) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateUserAttributesOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserAttributesInput) *cognitoidentityprovider.UpdateUserAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAttributesRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserAttributesRequest(_a0 *cognitoidentityprovider.UpdateUserAttributesInput) (*request.Request, *cognitoidentityprovider.UpdateUserAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateUserAttributesOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserAttributesInput) *cognitoidentityprovider.UpdateUserAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateUserAttributesOutput)
		}
	}

	return r0, r1
}

// UpdateUserAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateUserAttributesWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateUserAttributesInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateUserAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserAttributesInput, ...request.Option) *cognitoidentityprovider.UpdateUserAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPool provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserPool(_a0 *cognitoidentityprovider.UpdateUserPoolInput) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateUserPoolOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserPoolInput) *cognitoidentityprovider.UpdateUserPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolClient provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolClient(_a0 *cognitoidentityprovider.UpdateUserPoolClientInput) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserPoolClientInput) *cognitoidentityprovider.UpdateUserPoolClientOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserPoolClientInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolClientRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolClientRequest(_a0 *cognitoidentityprovider.UpdateUserPoolClientInput) (*request.Request, *cognitoidentityprovider.UpdateUserPoolClientOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserPoolClientInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateUserPoolClientOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserPoolClientInput) *cognitoidentityprovider.UpdateUserPoolClientOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateUserPoolClientOutput)
		}
	}

	return r0, r1
}

// UpdateUserPoolClientWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolClientWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateUserPoolClientInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateUserPoolClientOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolClientInput, ...request.Option) *cognitoidentityprovider.UpdateUserPoolClientOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolClientOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolClientInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolDomain provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolDomain(_a0 *cognitoidentityprovider.UpdateUserPoolDomainInput) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.UpdateUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserPoolDomainInput) *cognitoidentityprovider.UpdateUserPoolDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserPoolDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolDomainRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolDomainRequest(_a0 *cognitoidentityprovider.UpdateUserPoolDomainInput) (*request.Request, *cognitoidentityprovider.UpdateUserPoolDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserPoolDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateUserPoolDomainOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserPoolDomainInput) *cognitoidentityprovider.UpdateUserPoolDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
		}
	}

	return r0, r1
}

// UpdateUserPoolDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolDomainWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateUserPoolDomainInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateUserPoolDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolDomainInput, ...request.Option) *cognitoidentityprovider.UpdateUserPoolDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolRequest(_a0 *cognitoidentityprovider.UpdateUserPoolInput) (*request.Request, *cognitoidentityprovider.UpdateUserPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.UpdateUserPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.UpdateUserPoolOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.UpdateUserPoolInput) *cognitoidentityprovider.UpdateUserPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.UpdateUserPoolOutput)
		}
	}

	return r0, r1
}

// UpdateUserPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) UpdateUserPoolWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.UpdateUserPoolInput, _a2 ...request.Option) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.UpdateUserPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolInput, ...request.Option) *cognitoidentityprovider.UpdateUserPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySoftwareToken provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) VerifySoftwareToken(_a0 *cognitoidentityprovider.VerifySoftwareTokenInput) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.VerifySoftwareTokenOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.VerifySoftwareTokenInput) *cognitoidentityprovider.VerifySoftwareTokenOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.VerifySoftwareTokenOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.VerifySoftwareTokenInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySoftwareTokenRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) VerifySoftwareTokenRequest(_a0 *cognitoidentityprovider.VerifySoftwareTokenInput) (*request.Request, *cognitoidentityprovider.VerifySoftwareTokenOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.VerifySoftwareTokenInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.VerifySoftwareTokenOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.VerifySoftwareTokenInput) *cognitoidentityprovider.VerifySoftwareTokenOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.VerifySoftwareTokenOutput)
		}
	}

	return r0, r1
}

// VerifySoftwareTokenWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) VerifySoftwareTokenWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.VerifySoftwareTokenInput, _a2 ...request.Option) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.VerifySoftwareTokenOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.VerifySoftwareTokenInput, ...request.Option) *cognitoidentityprovider.VerifySoftwareTokenOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.VerifySoftwareTokenOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.VerifySoftwareTokenInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUserAttribute provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) VerifyUserAttribute(_a0 *cognitoidentityprovider.VerifyUserAttributeInput) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cognitoidentityprovider.VerifyUserAttributeOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.VerifyUserAttributeInput) *cognitoidentityprovider.VerifyUserAttributeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.VerifyUserAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.VerifyUserAttributeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUserAttributeRequest provides a mock function with given fields: _a0
func (_m *CognitoIdentityProviderAPI) VerifyUserAttributeRequest(_a0 *cognitoidentityprovider.VerifyUserAttributeInput) (*request.Request, *cognitoidentityprovider.VerifyUserAttributeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.VerifyUserAttributeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cognitoidentityprovider.VerifyUserAttributeOutput
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.VerifyUserAttributeInput) *cognitoidentityprovider.VerifyUserAttributeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cognitoidentityprovider.VerifyUserAttributeOutput)
		}
	}

	return r0, r1
}

// VerifyUserAttributeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CognitoIdentityProviderAPI) VerifyUserAttributeWithContext(_a0 context.Context, _a1 *cognitoidentityprovider.VerifyUserAttributeInput, _a2 ...request.Option) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cognitoidentityprovider.VerifyUserAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.VerifyUserAttributeInput, ...request.Option) *cognitoidentityprovider.VerifyUserAttributeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.VerifyUserAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.VerifyUserAttributeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
