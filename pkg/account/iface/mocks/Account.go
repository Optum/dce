// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import account "github.com/Optum/dce/pkg/account"

import mock "github.com/stretchr/testify/mock"
import model "github.com/Optum/dce/pkg/model"

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// AdminRoleArn provides a mock function with given fields:
func (_m *Account) AdminRoleArn() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Delete provides a mock function with given fields: d
func (_m *Account) Delete(d account.Deleter) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(account.Deleter) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Account) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MarshalJSON provides a mock function with given fields:
func (_m *Account) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metadata provides a mock function with given fields:
func (_m *Account) Metadata() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// OrphanAccount provides a mock function with given fields:
func (_m *Account) OrphanAccount() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrincipalPolicyHash provides a mock function with given fields:
func (_m *Account) PrincipalPolicyHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PrincipalRoleArn provides a mock function with given fields:
func (_m *Account) PrincipalRoleArn() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Account) Status() model.AccountStatus {
	ret := _m.Called()

	var r0 model.AccountStatus
	if rf, ok := ret.Get(0).(func() model.AccountStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.AccountStatus)
	}

	return r0
}

// Update provides a mock function with given fields: d, u, am
func (_m *Account) Update(d model.Account, u account.Updater, am account.Manager) error {
	ret := _m.Called(d, u, am)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Account, account.Updater, account.Manager) error); ok {
		r0 = rf(d, u, am)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: nextStatus, u
func (_m *Account) UpdateStatus(nextStatus model.AccountStatus, u account.Updater) error {
	ret := _m.Called(nextStatus, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AccountStatus, account.Updater) error); ok {
		r0 = rf(nextStatus, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
