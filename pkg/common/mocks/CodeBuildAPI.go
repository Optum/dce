// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	codebuild "github.com/aws/aws-sdk-go/service/codebuild"

	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// CodeBuildAPI is an autogenerated mock type for the CodeBuildAPI type
type CodeBuildAPI struct {
	mock.Mock
}

// BatchDeleteBuilds provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchDeleteBuilds(_a0 *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchDeleteBuildsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchDeleteBuildsInput) *codebuild.BatchDeleteBuildsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchDeleteBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchDeleteBuildsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteBuildsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchDeleteBuildsRequest(_a0 *codebuild.BatchDeleteBuildsInput) (*request.Request, *codebuild.BatchDeleteBuildsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchDeleteBuildsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchDeleteBuildsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchDeleteBuildsInput) *codebuild.BatchDeleteBuildsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchDeleteBuildsOutput)
		}
	}

	return r0, r1
}

// BatchDeleteBuildsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchDeleteBuildsWithContext(_a0 context.Context, _a1 *codebuild.BatchDeleteBuildsInput, _a2 ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchDeleteBuildsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchDeleteBuildsInput, ...request.Option) *codebuild.BatchDeleteBuildsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchDeleteBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchDeleteBuildsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetBuilds provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetBuilds(_a0 *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetBuildsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetBuildsInput) *codebuild.BatchGetBuildsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetBuildsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetBuildsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetBuildsRequest(_a0 *codebuild.BatchGetBuildsInput) (*request.Request, *codebuild.BatchGetBuildsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetBuildsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetBuildsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetBuildsInput) *codebuild.BatchGetBuildsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetBuildsOutput)
		}
	}

	return r0, r1
}

// BatchGetBuildsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetBuildsWithContext(_a0 context.Context, _a1 *codebuild.BatchGetBuildsInput, _a2 ...request.Option) (*codebuild.BatchGetBuildsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetBuildsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetBuildsInput, ...request.Option) *codebuild.BatchGetBuildsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetBuildsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetProjects provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetProjects(_a0 *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetProjectsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetProjectsInput) *codebuild.BatchGetProjectsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetProjectsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetProjectsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetProjectsRequest(_a0 *codebuild.BatchGetProjectsInput) (*request.Request, *codebuild.BatchGetProjectsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetProjectsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetProjectsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetProjectsInput) *codebuild.BatchGetProjectsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetProjectsOutput)
		}
	}

	return r0, r1
}

// BatchGetProjectsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetProjectsWithContext(_a0 context.Context, _a1 *codebuild.BatchGetProjectsInput, _a2 ...request.Option) (*codebuild.BatchGetProjectsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetProjectsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetProjectsInput, ...request.Option) *codebuild.BatchGetProjectsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetProjectsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateProject(_a0 *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.CreateProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.CreateProjectInput) *codebuild.CreateProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.CreateProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateProjectRequest(_a0 *codebuild.CreateProjectInput) (*request.Request, *codebuild.CreateProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.CreateProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.CreateProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.CreateProjectInput) *codebuild.CreateProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.CreateProjectOutput)
		}
	}

	return r0, r1
}

// CreateProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) CreateProjectWithContext(_a0 context.Context, _a1 *codebuild.CreateProjectInput, _a2 ...request.Option) (*codebuild.CreateProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.CreateProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.CreateProjectInput, ...request.Option) *codebuild.CreateProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.CreateProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebhook provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateWebhook(_a0 *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.CreateWebhookOutput
	if rf, ok := ret.Get(0).(func(*codebuild.CreateWebhookInput) *codebuild.CreateWebhookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.CreateWebhookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebhookRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateWebhookRequest(_a0 *codebuild.CreateWebhookInput) (*request.Request, *codebuild.CreateWebhookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.CreateWebhookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.CreateWebhookOutput
	if rf, ok := ret.Get(1).(func(*codebuild.CreateWebhookInput) *codebuild.CreateWebhookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.CreateWebhookOutput)
		}
	}

	return r0, r1
}

// CreateWebhookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) CreateWebhookWithContext(_a0 context.Context, _a1 *codebuild.CreateWebhookInput, _a2 ...request.Option) (*codebuild.CreateWebhookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.CreateWebhookOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.CreateWebhookInput, ...request.Option) *codebuild.CreateWebhookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.CreateWebhookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteProject(_a0 *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteProjectInput) *codebuild.DeleteProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteProjectRequest(_a0 *codebuild.DeleteProjectInput) (*request.Request, *codebuild.DeleteProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteProjectInput) *codebuild.DeleteProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteProjectOutput)
		}
	}

	return r0, r1
}

// DeleteProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteProjectWithContext(_a0 context.Context, _a1 *codebuild.DeleteProjectInput, _a2 ...request.Option) (*codebuild.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteProjectInput, ...request.Option) *codebuild.DeleteProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceCredentials provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteSourceCredentials(_a0 *codebuild.DeleteSourceCredentialsInput) (*codebuild.DeleteSourceCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteSourceCredentialsInput) *codebuild.DeleteSourceCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteSourceCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceCredentialsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteSourceCredentialsRequest(_a0 *codebuild.DeleteSourceCredentialsInput) (*request.Request, *codebuild.DeleteSourceCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteSourceCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteSourceCredentialsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteSourceCredentialsInput) *codebuild.DeleteSourceCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteSourceCredentialsOutput)
		}
	}

	return r0, r1
}

// DeleteSourceCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteSourceCredentialsWithContext(_a0 context.Context, _a1 *codebuild.DeleteSourceCredentialsInput, _a2 ...request.Option) (*codebuild.DeleteSourceCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteSourceCredentialsInput, ...request.Option) *codebuild.DeleteSourceCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteSourceCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhook provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteWebhook(_a0 *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteWebhookOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteWebhookInput) *codebuild.DeleteWebhookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteWebhookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhookRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteWebhookRequest(_a0 *codebuild.DeleteWebhookInput) (*request.Request, *codebuild.DeleteWebhookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteWebhookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteWebhookOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteWebhookInput) *codebuild.DeleteWebhookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteWebhookOutput)
		}
	}

	return r0, r1
}

// DeleteWebhookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteWebhookWithContext(_a0 context.Context, _a1 *codebuild.DeleteWebhookInput, _a2 ...request.Option) (*codebuild.DeleteWebhookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteWebhookOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteWebhookInput, ...request.Option) *codebuild.DeleteWebhookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteWebhookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSourceCredentials provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ImportSourceCredentials(_a0 *codebuild.ImportSourceCredentialsInput) (*codebuild.ImportSourceCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ImportSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ImportSourceCredentialsInput) *codebuild.ImportSourceCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ImportSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ImportSourceCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSourceCredentialsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ImportSourceCredentialsRequest(_a0 *codebuild.ImportSourceCredentialsInput) (*request.Request, *codebuild.ImportSourceCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ImportSourceCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ImportSourceCredentialsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ImportSourceCredentialsInput) *codebuild.ImportSourceCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ImportSourceCredentialsOutput)
		}
	}

	return r0, r1
}

// ImportSourceCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ImportSourceCredentialsWithContext(_a0 context.Context, _a1 *codebuild.ImportSourceCredentialsInput, _a2 ...request.Option) (*codebuild.ImportSourceCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ImportSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ImportSourceCredentialsInput, ...request.Option) *codebuild.ImportSourceCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ImportSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ImportSourceCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateProjectCache provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) InvalidateProjectCache(_a0 *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.InvalidateProjectCacheOutput
	if rf, ok := ret.Get(0).(func(*codebuild.InvalidateProjectCacheInput) *codebuild.InvalidateProjectCacheOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.InvalidateProjectCacheOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.InvalidateProjectCacheInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateProjectCacheRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) InvalidateProjectCacheRequest(_a0 *codebuild.InvalidateProjectCacheInput) (*request.Request, *codebuild.InvalidateProjectCacheOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.InvalidateProjectCacheInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.InvalidateProjectCacheOutput
	if rf, ok := ret.Get(1).(func(*codebuild.InvalidateProjectCacheInput) *codebuild.InvalidateProjectCacheOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.InvalidateProjectCacheOutput)
		}
	}

	return r0, r1
}

// InvalidateProjectCacheWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) InvalidateProjectCacheWithContext(_a0 context.Context, _a1 *codebuild.InvalidateProjectCacheInput, _a2 ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.InvalidateProjectCacheOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.InvalidateProjectCacheInput, ...request.Option) *codebuild.InvalidateProjectCacheOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.InvalidateProjectCacheOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.InvalidateProjectCacheInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuilds provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuilds(_a0 *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListBuildsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsInput) *codebuild.ListBuildsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildsForProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildsForProject(_a0 *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListBuildsForProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsForProjectInput) *codebuild.ListBuildsForProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsForProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsForProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildsForProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildsForProjectRequest(_a0 *codebuild.ListBuildsForProjectInput) (*request.Request, *codebuild.ListBuildsForProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsForProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListBuildsForProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsForProjectInput) *codebuild.ListBuildsForProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListBuildsForProjectOutput)
		}
	}

	return r0, r1
}

// ListBuildsForProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListBuildsForProjectWithContext(_a0 context.Context, _a1 *codebuild.ListBuildsForProjectInput, _a2 ...request.Option) (*codebuild.ListBuildsForProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListBuildsForProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildsForProjectInput, ...request.Option) *codebuild.ListBuildsForProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsForProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListBuildsForProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildsRequest(_a0 *codebuild.ListBuildsInput) (*request.Request, *codebuild.ListBuildsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListBuildsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsInput) *codebuild.ListBuildsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListBuildsOutput)
		}
	}

	return r0, r1
}

// ListBuildsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListBuildsWithContext(_a0 context.Context, _a1 *codebuild.ListBuildsInput, _a2 ...request.Option) (*codebuild.ListBuildsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListBuildsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildsInput, ...request.Option) *codebuild.ListBuildsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListBuildsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCuratedEnvironmentImages provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListCuratedEnvironmentImages(_a0 *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListCuratedEnvironmentImagesOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListCuratedEnvironmentImagesInput) *codebuild.ListCuratedEnvironmentImagesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListCuratedEnvironmentImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListCuratedEnvironmentImagesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCuratedEnvironmentImagesRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListCuratedEnvironmentImagesRequest(_a0 *codebuild.ListCuratedEnvironmentImagesInput) (*request.Request, *codebuild.ListCuratedEnvironmentImagesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListCuratedEnvironmentImagesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListCuratedEnvironmentImagesOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListCuratedEnvironmentImagesInput) *codebuild.ListCuratedEnvironmentImagesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListCuratedEnvironmentImagesOutput)
		}
	}

	return r0, r1
}

// ListCuratedEnvironmentImagesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListCuratedEnvironmentImagesWithContext(_a0 context.Context, _a1 *codebuild.ListCuratedEnvironmentImagesInput, _a2 ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListCuratedEnvironmentImagesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListCuratedEnvironmentImagesInput, ...request.Option) *codebuild.ListCuratedEnvironmentImagesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListCuratedEnvironmentImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListCuratedEnvironmentImagesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListProjects(_a0 *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListProjectsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListProjectsInput) *codebuild.ListProjectsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListProjectsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListProjectsRequest(_a0 *codebuild.ListProjectsInput) (*request.Request, *codebuild.ListProjectsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListProjectsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListProjectsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListProjectsInput) *codebuild.ListProjectsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListProjectsOutput)
		}
	}

	return r0, r1
}

// ListProjectsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListProjectsWithContext(_a0 context.Context, _a1 *codebuild.ListProjectsInput, _a2 ...request.Option) (*codebuild.ListProjectsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListProjectsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListProjectsInput, ...request.Option) *codebuild.ListProjectsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListProjectsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceCredentials provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSourceCredentials(_a0 *codebuild.ListSourceCredentialsInput) (*codebuild.ListSourceCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListSourceCredentialsInput) *codebuild.ListSourceCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListSourceCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceCredentialsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSourceCredentialsRequest(_a0 *codebuild.ListSourceCredentialsInput) (*request.Request, *codebuild.ListSourceCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListSourceCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListSourceCredentialsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListSourceCredentialsInput) *codebuild.ListSourceCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListSourceCredentialsOutput)
		}
	}

	return r0, r1
}

// ListSourceCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListSourceCredentialsWithContext(_a0 context.Context, _a1 *codebuild.ListSourceCredentialsInput, _a2 ...request.Option) (*codebuild.ListSourceCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListSourceCredentialsInput, ...request.Option) *codebuild.ListSourceCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListSourceCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBuild provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StartBuild(_a0 *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.StartBuildOutput
	if rf, ok := ret.Get(0).(func(*codebuild.StartBuildInput) *codebuild.StartBuildOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StartBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.StartBuildInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBuildRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StartBuildRequest(_a0 *codebuild.StartBuildInput) (*request.Request, *codebuild.StartBuildOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.StartBuildInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.StartBuildOutput
	if rf, ok := ret.Get(1).(func(*codebuild.StartBuildInput) *codebuild.StartBuildOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.StartBuildOutput)
		}
	}

	return r0, r1
}

// StartBuildWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) StartBuildWithContext(_a0 context.Context, _a1 *codebuild.StartBuildInput, _a2 ...request.Option) (*codebuild.StartBuildOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.StartBuildOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.StartBuildInput, ...request.Option) *codebuild.StartBuildOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StartBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.StartBuildInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBuild provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StopBuild(_a0 *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.StopBuildOutput
	if rf, ok := ret.Get(0).(func(*codebuild.StopBuildInput) *codebuild.StopBuildOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StopBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.StopBuildInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBuildRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StopBuildRequest(_a0 *codebuild.StopBuildInput) (*request.Request, *codebuild.StopBuildOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.StopBuildInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.StopBuildOutput
	if rf, ok := ret.Get(1).(func(*codebuild.StopBuildInput) *codebuild.StopBuildOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.StopBuildOutput)
		}
	}

	return r0, r1
}

// StopBuildWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) StopBuildWithContext(_a0 context.Context, _a1 *codebuild.StopBuildInput, _a2 ...request.Option) (*codebuild.StopBuildOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.StopBuildOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.StopBuildInput, ...request.Option) *codebuild.StopBuildOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StopBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.StopBuildInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateProject(_a0 *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.UpdateProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateProjectInput) *codebuild.UpdateProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateProjectRequest(_a0 *codebuild.UpdateProjectInput) (*request.Request, *codebuild.UpdateProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.UpdateProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateProjectInput) *codebuild.UpdateProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.UpdateProjectOutput)
		}
	}

	return r0, r1
}

// UpdateProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) UpdateProjectWithContext(_a0 context.Context, _a1 *codebuild.UpdateProjectInput, _a2 ...request.Option) (*codebuild.UpdateProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.UpdateProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.UpdateProjectInput, ...request.Option) *codebuild.UpdateProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.UpdateProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebhook provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateWebhook(_a0 *codebuild.UpdateWebhookInput) (*codebuild.UpdateWebhookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.UpdateWebhookOutput
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateWebhookInput) *codebuild.UpdateWebhookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateWebhookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebhookRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateWebhookRequest(_a0 *codebuild.UpdateWebhookInput) (*request.Request, *codebuild.UpdateWebhookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateWebhookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.UpdateWebhookOutput
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateWebhookInput) *codebuild.UpdateWebhookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.UpdateWebhookOutput)
		}
	}

	return r0, r1
}

// UpdateWebhookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) UpdateWebhookWithContext(_a0 context.Context, _a1 *codebuild.UpdateWebhookInput, _a2 ...request.Option) (*codebuild.UpdateWebhookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.UpdateWebhookOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.UpdateWebhookInput, ...request.Option) *codebuild.UpdateWebhookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.UpdateWebhookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
