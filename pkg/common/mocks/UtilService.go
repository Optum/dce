// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UtilService is an autogenerated mock type for the UtilService type
type UtilService struct {
	mock.Mock
}

// RequireEnv provides a mock function with given fields: env
func (_m *UtilService) RequireEnv(env string) string {
	ret := _m.Called(env)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RequireEnvFloatSlice provides a mock function with given fields: env, sep
func (_m *UtilService) RequireEnvFloatSlice(env string, sep string) []float64 {
	ret := _m.Called(env, sep)

	var r0 []float64
	if rf, ok := ret.Get(0).(func(string, string) []float64); ok {
		r0 = rf(env, sep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	return r0
}

// RequireEnvInt provides a mock function with given fields: env
func (_m *UtilService) RequireEnvInt(env string) int {
	ret := _m.Called(env)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RequireEnvStringSlice provides a mock function with given fields: env, sep
func (_m *UtilService) RequireEnvStringSlice(env string, sep string) []string {
	ret := _m.Called(env, sep)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(env, sep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
