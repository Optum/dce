// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import account "github.com/Optum/dce/pkg/account"

import lease "github.com/Optum/dce/pkg/lease"
import mock "github.com/stretchr/testify/mock"

// Servicer is an autogenerated mock type for the Servicer type
type Servicer struct {
	mock.Mock
}

// AccountCreate provides a mock function with given fields: data
func (_m *Servicer) AccountCreate(data *account.Account) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Account) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountDelete provides a mock function with given fields: data
func (_m *Servicer) AccountDelete(data *account.Account) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Account) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountReset provides a mock function with given fields: data
func (_m *Servicer) AccountReset(data *account.Account) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Account) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountUpdate provides a mock function with given fields: old, new
func (_m *Servicer) AccountUpdate(old *account.Account, new *account.Account) error {
	ret := _m.Called(old, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(*account.Account, *account.Account) error); ok {
		r0 = rf(old, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaseCreate provides a mock function with given fields: data
func (_m *Servicer) LeaseCreate(data *lease.Lease) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lease.Lease) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaseEnd provides a mock function with given fields: data
func (_m *Servicer) LeaseEnd(data *lease.Lease) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lease.Lease) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaseUpdate provides a mock function with given fields: old, new
func (_m *Servicer) LeaseUpdate(old *lease.Lease, new *lease.Lease) error {
	ret := _m.Called(old, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(*lease.Lease, *lease.Lease) error); ok {
		r0 = rf(old, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
