// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import cloudwatchevents "github.com/aws/aws-sdk-go/service/cloudwatchevents"
import context "context"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// CloudWatchEventsAPI is an autogenerated mock type for the CloudWatchEventsAPI type
type CloudWatchEventsAPI struct {
	mock.Mock
}

// ActivateEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ActivateEventSource(_a0 *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ActivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ActivateEventSourceInput) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ActivateEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ActivateEventSourceRequest(_a0 *cloudwatchevents.ActivateEventSourceInput) (*request.Request, *cloudwatchevents.ActivateEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ActivateEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ActivateEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ActivateEventSourceInput) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	return r0, r1
}

// ActivateEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ActivateEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.ActivateEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ActivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...request.Option) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateEventBus(_a0 *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreateEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateEventBusInput) *cloudwatchevents.CreateEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateEventBusRequest(_a0 *cloudwatchevents.CreateEventBusInput) (*request.Request, *cloudwatchevents.CreateEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreateEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateEventBusInput) *cloudwatchevents.CreateEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	return r0, r1
}

// CreateEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreateEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreateEventBusInput, _a2 ...request.Option) (*cloudwatchevents.CreateEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreateEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...request.Option) *cloudwatchevents.CreateEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreatePartnerEventSource(_a0 *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreatePartnerEventSourceInput) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreatePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreatePartnerEventSourceRequest(_a0 *cloudwatchevents.CreatePartnerEventSourceInput) (*request.Request, *cloudwatchevents.CreatePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreatePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreatePartnerEventSourceInput) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// CreatePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreatePartnerEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreatePartnerEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...request.Option) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeactivateEventSource(_a0 *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeactivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeactivateEventSourceInput) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeactivateEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeactivateEventSourceRequest(_a0 *cloudwatchevents.DeactivateEventSourceInput) (*request.Request, *cloudwatchevents.DeactivateEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeactivateEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeactivateEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeactivateEventSourceInput) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	return r0, r1
}

// DeactivateEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeactivateEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeactivateEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeactivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...request.Option) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteEventBus(_a0 *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteEventBusInput) *cloudwatchevents.DeleteEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteEventBusRequest(_a0 *cloudwatchevents.DeleteEventBusInput) (*request.Request, *cloudwatchevents.DeleteEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteEventBusInput) *cloudwatchevents.DeleteEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	return r0, r1
}

// DeleteEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteEventBusInput, _a2 ...request.Option) (*cloudwatchevents.DeleteEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...request.Option) *cloudwatchevents.DeleteEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeletePartnerEventSource(_a0 *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeletePartnerEventSourceInput) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeletePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeletePartnerEventSourceRequest(_a0 *cloudwatchevents.DeletePartnerEventSourceInput) (*request.Request, *cloudwatchevents.DeletePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeletePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeletePartnerEventSourceInput) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// DeletePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeletePartnerEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeletePartnerEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...request.Option) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteRule(_a0 *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteRuleInput) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteRuleRequest(_a0 *cloudwatchevents.DeleteRuleInput) (*request.Request, *cloudwatchevents.DeleteRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteRuleInput) *cloudwatchevents.DeleteRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteRuleInput, _a2 ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...request.Option) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventBus(_a0 *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventBusInput) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventBusRequest(_a0 *cloudwatchevents.DescribeEventBusInput) (*request.Request, *cloudwatchevents.DescribeEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventBusInput) *cloudwatchevents.DescribeEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	return r0, r1
}

// DescribeEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeEventBusInput, _a2 ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...request.Option) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventSource(_a0 *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventSourceInput) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventSourceRequest(_a0 *cloudwatchevents.DescribeEventSourceInput) (*request.Request, *cloudwatchevents.DescribeEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventSourceInput) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	return r0, r1
}

// DescribeEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...request.Option) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribePartnerEventSource(_a0 *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribePartnerEventSourceInput) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribePartnerEventSourceRequest(_a0 *cloudwatchevents.DescribePartnerEventSourceInput) (*request.Request, *cloudwatchevents.DescribePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribePartnerEventSourceInput) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// DescribePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribePartnerEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribePartnerEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...request.Option) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeRule(_a0 *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeRuleInput) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeRuleRequest(_a0 *cloudwatchevents.DescribeRuleInput) (*request.Request, *cloudwatchevents.DescribeRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeRuleInput) *cloudwatchevents.DescribeRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	return r0, r1
}

// DescribeRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeRuleInput, _a2 ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...request.Option) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DisableRule(_a0 *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DisableRuleInput) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DisableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DisableRuleRequest(_a0 *cloudwatchevents.DisableRuleInput) (*request.Request, *cloudwatchevents.DisableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DisableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DisableRuleInput) *cloudwatchevents.DisableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	return r0, r1
}

// DisableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DisableRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DisableRuleInput, _a2 ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...request.Option) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) EnableRule(_a0 *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.EnableRuleInput) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.EnableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) EnableRuleRequest(_a0 *cloudwatchevents.EnableRuleInput) (*request.Request, *cloudwatchevents.EnableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.EnableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.EnableRuleInput) *cloudwatchevents.EnableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	return r0, r1
}

// EnableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) EnableRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.EnableRuleInput, _a2 ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...request.Option) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBuses provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventBuses(_a0 *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListEventBusesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventBusesInput) *cloudwatchevents.ListEventBusesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventBusesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBusesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventBusesRequest(_a0 *cloudwatchevents.ListEventBusesInput) (*request.Request, *cloudwatchevents.ListEventBusesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventBusesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListEventBusesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventBusesInput) *cloudwatchevents.ListEventBusesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	return r0, r1
}

// ListEventBusesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListEventBusesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListEventBusesInput, _a2 ...request.Option) (*cloudwatchevents.ListEventBusesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListEventBusesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...request.Option) *cloudwatchevents.ListEventBusesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSources provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventSources(_a0 *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListEventSourcesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventSourcesInput) *cloudwatchevents.ListEventSourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventSourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSourcesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventSourcesRequest(_a0 *cloudwatchevents.ListEventSourcesInput) (*request.Request, *cloudwatchevents.ListEventSourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventSourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListEventSourcesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventSourcesInput) *cloudwatchevents.ListEventSourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	return r0, r1
}

// ListEventSourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListEventSourcesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListEventSourcesInput, _a2 ...request.Option) (*cloudwatchevents.ListEventSourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListEventSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...request.Option) *cloudwatchevents.ListEventSourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccounts provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSourceAccounts(_a0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccountsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSourceAccountsRequest(_a0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*request.Request, *cloudwatchevents.ListPartnerEventSourceAccountsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	return r0, r1
}

// ListPartnerEventSourceAccountsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListPartnerEventSourceAccountsWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListPartnerEventSourceAccountsInput, _a2 ...request.Option) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...request.Option) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSources provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSources(_a0 *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourcesInput) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourcesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSourcesRequest(_a0 *cloudwatchevents.ListPartnerEventSourcesInput) (*request.Request, *cloudwatchevents.ListPartnerEventSourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourcesInput) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	return r0, r1
}

// ListPartnerEventSourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListPartnerEventSourcesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListPartnerEventSourcesInput, _a2 ...request.Option) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...request.Option) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTarget provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRuleNamesByTarget(_a0 *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRuleNamesByTargetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTargetRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRuleNamesByTargetRequest(_a0 *cloudwatchevents.ListRuleNamesByTargetInput) (*request.Request, *cloudwatchevents.ListRuleNamesByTargetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	return r0, r1
}

// ListRuleNamesByTargetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListRuleNamesByTargetWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListRuleNamesByTargetInput, _a2 ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...request.Option) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRules(_a0 *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRulesInput) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRulesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRulesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRulesRequest(_a0 *cloudwatchevents.ListRulesInput) (*request.Request, *cloudwatchevents.ListRulesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRulesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRulesInput) *cloudwatchevents.ListRulesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListRulesOutput)
		}
	}

	return r0, r1
}

// ListRulesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListRulesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListRulesInput, _a2 ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRulesInput, ...request.Option) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRulesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTagsForResource(_a0 *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTagsForResourceInput) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTagsForResourceRequest(_a0 *cloudwatchevents.ListTagsForResourceInput) (*request.Request, *cloudwatchevents.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTagsForResourceInput) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListTagsForResourceInput, _a2 ...request.Option) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...request.Option) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTargetsByRule(_a0 *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTargetsByRuleInput) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTargetsByRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTargetsByRuleRequest(_a0 *cloudwatchevents.ListTargetsByRuleInput) (*request.Request, *cloudwatchevents.ListTargetsByRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTargetsByRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTargetsByRuleInput) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	return r0, r1
}

// ListTargetsByRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListTargetsByRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListTargetsByRuleInput, _a2 ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...request.Option) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvents provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutEvents(_a0 *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutEventsInput) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutEventsRequest(_a0 *cloudwatchevents.PutEventsInput) (*request.Request, *cloudwatchevents.PutEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutEventsInput) *cloudwatchevents.PutEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutEventsOutput)
		}
	}

	return r0, r1
}

// PutEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutEventsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutEventsInput, _a2 ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutEventsInput, ...request.Option) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEvents provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPartnerEvents(_a0 *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutPartnerEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPartnerEventsInput) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPartnerEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPartnerEventsRequest(_a0 *cloudwatchevents.PutPartnerEventsInput) (*request.Request, *cloudwatchevents.PutPartnerEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPartnerEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutPartnerEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPartnerEventsInput) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	return r0, r1
}

// PutPartnerEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutPartnerEventsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutPartnerEventsInput, _a2 ...request.Option) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutPartnerEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...request.Option) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermission provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPermission(_a0 *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPermissionInput) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPermissionRequest(_a0 *cloudwatchevents.PutPermissionInput) (*request.Request, *cloudwatchevents.PutPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPermissionInput) *cloudwatchevents.PutPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	return r0, r1
}

// PutPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutPermissionWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutPermissionInput, _a2 ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...request.Option) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutRule(_a0 *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutRuleInput) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutRuleRequest(_a0 *cloudwatchevents.PutRuleInput) (*request.Request, *cloudwatchevents.PutRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutRuleInput) *cloudwatchevents.PutRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutRuleOutput)
		}
	}

	return r0, r1
}

// PutRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutRuleInput, _a2 ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutRuleInput, ...request.Option) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargets provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutTargets(_a0 *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutTargetsInput) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargetsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutTargetsRequest(_a0 *cloudwatchevents.PutTargetsInput) (*request.Request, *cloudwatchevents.PutTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutTargetsInput) *cloudwatchevents.PutTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	return r0, r1
}

// PutTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutTargetsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutTargetsInput, _a2 ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...request.Option) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemovePermission(_a0 *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemovePermissionInput) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemovePermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermissionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemovePermissionRequest(_a0 *cloudwatchevents.RemovePermissionInput) (*request.Request, *cloudwatchevents.RemovePermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemovePermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemovePermissionInput) *cloudwatchevents.RemovePermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	return r0, r1
}

// RemovePermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) RemovePermissionWithContext(_a0 context.Context, _a1 *cloudwatchevents.RemovePermissionInput, _a2 ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...request.Option) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargets provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemoveTargets(_a0 *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemoveTargetsInput) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemoveTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargetsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemoveTargetsRequest(_a0 *cloudwatchevents.RemoveTargetsInput) (*request.Request, *cloudwatchevents.RemoveTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemoveTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemoveTargetsInput) *cloudwatchevents.RemoveTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	return r0, r1
}

// RemoveTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) RemoveTargetsWithContext(_a0 context.Context, _a1 *cloudwatchevents.RemoveTargetsInput, _a2 ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...request.Option) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TagResource(_a0 *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TagResourceInput) *cloudwatchevents.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TagResourceRequest(_a0 *cloudwatchevents.TagResourceInput) (*request.Request, *cloudwatchevents.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TagResourceInput) *cloudwatchevents.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) TagResourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.TagResourceInput, _a2 ...request.Option) (*cloudwatchevents.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TagResourceInput, ...request.Option) *cloudwatchevents.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPattern provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TestEventPattern(_a0 *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TestEventPatternInput) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TestEventPatternInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPatternRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TestEventPatternRequest(_a0 *cloudwatchevents.TestEventPatternInput) (*request.Request, *cloudwatchevents.TestEventPatternOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TestEventPatternInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TestEventPatternInput) *cloudwatchevents.TestEventPatternOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	return r0, r1
}

// TestEventPatternWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) TestEventPatternWithContext(_a0 context.Context, _a1 *cloudwatchevents.TestEventPatternInput, _a2 ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...request.Option) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UntagResource(_a0 *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UntagResourceInput) *cloudwatchevents.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UntagResourceRequest(_a0 *cloudwatchevents.UntagResourceInput) (*request.Request, *cloudwatchevents.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UntagResourceInput) *cloudwatchevents.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) UntagResourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.UntagResourceInput, _a2 ...request.Option) (*cloudwatchevents.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...request.Option) *cloudwatchevents.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
