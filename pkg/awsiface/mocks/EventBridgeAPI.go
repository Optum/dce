// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	eventbridge "github.com/aws/aws-sdk-go/service/eventbridge"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// EventBridgeAPI is an autogenerated mock type for the EventBridgeAPI type
type EventBridgeAPI struct {
	mock.Mock
}

// ActivateEventSource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ActivateEventSource(_a0 *eventbridge.ActivateEventSourceInput) (*eventbridge.ActivateEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ActivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ActivateEventSourceInput) *eventbridge.ActivateEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ActivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ActivateEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateEventSourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ActivateEventSourceRequest(_a0 *eventbridge.ActivateEventSourceInput) (*request.Request, *eventbridge.ActivateEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ActivateEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ActivateEventSourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ActivateEventSourceInput) *eventbridge.ActivateEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ActivateEventSourceOutput)
		}
	}

	return r0, r1
}

// ActivateEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ActivateEventSourceWithContext(_a0 context.Context, _a1 *eventbridge.ActivateEventSourceInput, _a2 ...request.Option) (*eventbridge.ActivateEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ActivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ActivateEventSourceInput, ...request.Option) *eventbridge.ActivateEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ActivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ActivateEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReplay provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CancelReplay(_a0 *eventbridge.CancelReplayInput) (*eventbridge.CancelReplayOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CancelReplayOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CancelReplayInput) *eventbridge.CancelReplayOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CancelReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CancelReplayInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReplayRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CancelReplayRequest(_a0 *eventbridge.CancelReplayInput) (*request.Request, *eventbridge.CancelReplayOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CancelReplayInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CancelReplayOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CancelReplayInput) *eventbridge.CancelReplayOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CancelReplayOutput)
		}
	}

	return r0, r1
}

// CancelReplayWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CancelReplayWithContext(_a0 context.Context, _a1 *eventbridge.CancelReplayInput, _a2 ...request.Option) (*eventbridge.CancelReplayOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CancelReplayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CancelReplayInput, ...request.Option) *eventbridge.CancelReplayOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CancelReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CancelReplayInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiDestination provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateApiDestination(_a0 *eventbridge.CreateApiDestinationInput) (*eventbridge.CreateApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CreateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateApiDestinationInput) *eventbridge.CreateApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiDestinationRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateApiDestinationRequest(_a0 *eventbridge.CreateApiDestinationInput) (*request.Request, *eventbridge.CreateApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CreateApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateApiDestinationInput) *eventbridge.CreateApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CreateApiDestinationOutput)
		}
	}

	return r0, r1
}

// CreateApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CreateApiDestinationWithContext(_a0 context.Context, _a1 *eventbridge.CreateApiDestinationInput, _a2 ...request.Option) (*eventbridge.CreateApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CreateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CreateApiDestinationInput, ...request.Option) *eventbridge.CreateApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CreateApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchive provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateArchive(_a0 *eventbridge.CreateArchiveInput) (*eventbridge.CreateArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CreateArchiveOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateArchiveInput) *eventbridge.CreateArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchiveRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateArchiveRequest(_a0 *eventbridge.CreateArchiveInput) (*request.Request, *eventbridge.CreateArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CreateArchiveOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateArchiveInput) *eventbridge.CreateArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CreateArchiveOutput)
		}
	}

	return r0, r1
}

// CreateArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CreateArchiveWithContext(_a0 context.Context, _a1 *eventbridge.CreateArchiveInput, _a2 ...request.Option) (*eventbridge.CreateArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CreateArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CreateArchiveInput, ...request.Option) *eventbridge.CreateArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CreateArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateConnection(_a0 *eventbridge.CreateConnectionInput) (*eventbridge.CreateConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CreateConnectionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateConnectionInput) *eventbridge.CreateConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateConnectionRequest(_a0 *eventbridge.CreateConnectionInput) (*request.Request, *eventbridge.CreateConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CreateConnectionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateConnectionInput) *eventbridge.CreateConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CreateConnectionOutput)
		}
	}

	return r0, r1
}

// CreateConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CreateConnectionWithContext(_a0 context.Context, _a1 *eventbridge.CreateConnectionInput, _a2 ...request.Option) (*eventbridge.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CreateConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CreateConnectionInput, ...request.Option) *eventbridge.CreateConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CreateConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpoint provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateEndpoint(_a0 *eventbridge.CreateEndpointInput) (*eventbridge.CreateEndpointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CreateEndpointOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateEndpointInput) *eventbridge.CreateEndpointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateEndpointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpointRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateEndpointRequest(_a0 *eventbridge.CreateEndpointInput) (*request.Request, *eventbridge.CreateEndpointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateEndpointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CreateEndpointOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateEndpointInput) *eventbridge.CreateEndpointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CreateEndpointOutput)
		}
	}

	return r0, r1
}

// CreateEndpointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CreateEndpointWithContext(_a0 context.Context, _a1 *eventbridge.CreateEndpointInput, _a2 ...request.Option) (*eventbridge.CreateEndpointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CreateEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CreateEndpointInput, ...request.Option) *eventbridge.CreateEndpointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CreateEndpointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBus provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateEventBus(_a0 *eventbridge.CreateEventBusInput) (*eventbridge.CreateEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CreateEventBusOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateEventBusInput) *eventbridge.CreateEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBusRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreateEventBusRequest(_a0 *eventbridge.CreateEventBusInput) (*request.Request, *eventbridge.CreateEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CreateEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CreateEventBusOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CreateEventBusInput) *eventbridge.CreateEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CreateEventBusOutput)
		}
	}

	return r0, r1
}

// CreateEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CreateEventBusWithContext(_a0 context.Context, _a1 *eventbridge.CreateEventBusInput, _a2 ...request.Option) (*eventbridge.CreateEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CreateEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CreateEventBusInput, ...request.Option) *eventbridge.CreateEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreateEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CreateEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreatePartnerEventSource(_a0 *eventbridge.CreatePartnerEventSourceInput) (*eventbridge.CreatePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.CreatePartnerEventSourceInput) *eventbridge.CreatePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreatePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.CreatePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) CreatePartnerEventSourceRequest(_a0 *eventbridge.CreatePartnerEventSourceInput) (*request.Request, *eventbridge.CreatePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.CreatePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.CreatePartnerEventSourceInput) *eventbridge.CreatePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.CreatePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// CreatePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) CreatePartnerEventSourceWithContext(_a0 context.Context, _a1 *eventbridge.CreatePartnerEventSourceInput, _a2 ...request.Option) (*eventbridge.CreatePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.CreatePartnerEventSourceInput, ...request.Option) *eventbridge.CreatePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.CreatePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.CreatePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeactivateEventSource(_a0 *eventbridge.DeactivateEventSourceInput) (*eventbridge.DeactivateEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeactivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeactivateEventSourceInput) *eventbridge.DeactivateEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeactivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeactivateEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeactivateEventSourceRequest(_a0 *eventbridge.DeactivateEventSourceInput) (*request.Request, *eventbridge.DeactivateEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeactivateEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeactivateEventSourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeactivateEventSourceInput) *eventbridge.DeactivateEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeactivateEventSourceOutput)
		}
	}

	return r0, r1
}

// DeactivateEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeactivateEventSourceWithContext(_a0 context.Context, _a1 *eventbridge.DeactivateEventSourceInput, _a2 ...request.Option) (*eventbridge.DeactivateEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeactivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeactivateEventSourceInput, ...request.Option) *eventbridge.DeactivateEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeactivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeactivateEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeauthorizeConnection provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeauthorizeConnection(_a0 *eventbridge.DeauthorizeConnectionInput) (*eventbridge.DeauthorizeConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeauthorizeConnectionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeauthorizeConnectionInput) *eventbridge.DeauthorizeConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeauthorizeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeauthorizeConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeauthorizeConnectionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeauthorizeConnectionRequest(_a0 *eventbridge.DeauthorizeConnectionInput) (*request.Request, *eventbridge.DeauthorizeConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeauthorizeConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeauthorizeConnectionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeauthorizeConnectionInput) *eventbridge.DeauthorizeConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeauthorizeConnectionOutput)
		}
	}

	return r0, r1
}

// DeauthorizeConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeauthorizeConnectionWithContext(_a0 context.Context, _a1 *eventbridge.DeauthorizeConnectionInput, _a2 ...request.Option) (*eventbridge.DeauthorizeConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeauthorizeConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeauthorizeConnectionInput, ...request.Option) *eventbridge.DeauthorizeConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeauthorizeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeauthorizeConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiDestination provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteApiDestination(_a0 *eventbridge.DeleteApiDestinationInput) (*eventbridge.DeleteApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeleteApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteApiDestinationInput) *eventbridge.DeleteApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiDestinationRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteApiDestinationRequest(_a0 *eventbridge.DeleteApiDestinationInput) (*request.Request, *eventbridge.DeleteApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeleteApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteApiDestinationInput) *eventbridge.DeleteApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeleteApiDestinationOutput)
		}
	}

	return r0, r1
}

// DeleteApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeleteApiDestinationWithContext(_a0 context.Context, _a1 *eventbridge.DeleteApiDestinationInput, _a2 ...request.Option) (*eventbridge.DeleteApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeleteApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeleteApiDestinationInput, ...request.Option) *eventbridge.DeleteApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeleteApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchive provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteArchive(_a0 *eventbridge.DeleteArchiveInput) (*eventbridge.DeleteArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeleteArchiveOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteArchiveInput) *eventbridge.DeleteArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchiveRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteArchiveRequest(_a0 *eventbridge.DeleteArchiveInput) (*request.Request, *eventbridge.DeleteArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeleteArchiveOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteArchiveInput) *eventbridge.DeleteArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeleteArchiveOutput)
		}
	}

	return r0, r1
}

// DeleteArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeleteArchiveWithContext(_a0 context.Context, _a1 *eventbridge.DeleteArchiveInput, _a2 ...request.Option) (*eventbridge.DeleteArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeleteArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeleteArchiveInput, ...request.Option) *eventbridge.DeleteArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeleteArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteConnection(_a0 *eventbridge.DeleteConnectionInput) (*eventbridge.DeleteConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeleteConnectionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteConnectionInput) *eventbridge.DeleteConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteConnectionRequest(_a0 *eventbridge.DeleteConnectionInput) (*request.Request, *eventbridge.DeleteConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeleteConnectionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteConnectionInput) *eventbridge.DeleteConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeleteConnectionOutput)
		}
	}

	return r0, r1
}

// DeleteConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeleteConnectionWithContext(_a0 context.Context, _a1 *eventbridge.DeleteConnectionInput, _a2 ...request.Option) (*eventbridge.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeleteConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeleteConnectionInput, ...request.Option) *eventbridge.DeleteConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeleteConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpoint provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteEndpoint(_a0 *eventbridge.DeleteEndpointInput) (*eventbridge.DeleteEndpointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeleteEndpointOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteEndpointInput) *eventbridge.DeleteEndpointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteEndpointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpointRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteEndpointRequest(_a0 *eventbridge.DeleteEndpointInput) (*request.Request, *eventbridge.DeleteEndpointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteEndpointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeleteEndpointOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteEndpointInput) *eventbridge.DeleteEndpointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeleteEndpointOutput)
		}
	}

	return r0, r1
}

// DeleteEndpointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeleteEndpointWithContext(_a0 context.Context, _a1 *eventbridge.DeleteEndpointInput, _a2 ...request.Option) (*eventbridge.DeleteEndpointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeleteEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeleteEndpointInput, ...request.Option) *eventbridge.DeleteEndpointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeleteEndpointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBus provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteEventBus(_a0 *eventbridge.DeleteEventBusInput) (*eventbridge.DeleteEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeleteEventBusOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteEventBusInput) *eventbridge.DeleteEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBusRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteEventBusRequest(_a0 *eventbridge.DeleteEventBusInput) (*request.Request, *eventbridge.DeleteEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeleteEventBusOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteEventBusInput) *eventbridge.DeleteEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeleteEventBusOutput)
		}
	}

	return r0, r1
}

// DeleteEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeleteEventBusWithContext(_a0 context.Context, _a1 *eventbridge.DeleteEventBusInput, _a2 ...request.Option) (*eventbridge.DeleteEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeleteEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeleteEventBusInput, ...request.Option) *eventbridge.DeleteEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeleteEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeletePartnerEventSource(_a0 *eventbridge.DeletePartnerEventSourceInput) (*eventbridge.DeletePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeletePartnerEventSourceInput) *eventbridge.DeletePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeletePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeletePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeletePartnerEventSourceRequest(_a0 *eventbridge.DeletePartnerEventSourceInput) (*request.Request, *eventbridge.DeletePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeletePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeletePartnerEventSourceInput) *eventbridge.DeletePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeletePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// DeletePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeletePartnerEventSourceWithContext(_a0 context.Context, _a1 *eventbridge.DeletePartnerEventSourceInput, _a2 ...request.Option) (*eventbridge.DeletePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeletePartnerEventSourceInput, ...request.Option) *eventbridge.DeletePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeletePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeletePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteRule(_a0 *eventbridge.DeleteRuleInput) (*eventbridge.DeleteRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteRuleInput) *eventbridge.DeleteRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DeleteRuleRequest(_a0 *eventbridge.DeleteRuleInput) (*request.Request, *eventbridge.DeleteRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DeleteRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DeleteRuleOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DeleteRuleInput) *eventbridge.DeleteRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DeleteRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DeleteRuleWithContext(_a0 context.Context, _a1 *eventbridge.DeleteRuleInput, _a2 ...request.Option) (*eventbridge.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DeleteRuleInput, ...request.Option) *eventbridge.DeleteRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DeleteRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApiDestination provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeApiDestination(_a0 *eventbridge.DescribeApiDestinationInput) (*eventbridge.DescribeApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeApiDestinationInput) *eventbridge.DescribeApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApiDestinationRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeApiDestinationRequest(_a0 *eventbridge.DescribeApiDestinationInput) (*request.Request, *eventbridge.DescribeApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeApiDestinationInput) *eventbridge.DescribeApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeApiDestinationOutput)
		}
	}

	return r0, r1
}

// DescribeApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeApiDestinationWithContext(_a0 context.Context, _a1 *eventbridge.DescribeApiDestinationInput, _a2 ...request.Option) (*eventbridge.DescribeApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeApiDestinationInput, ...request.Option) *eventbridge.DescribeApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeArchive provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeArchive(_a0 *eventbridge.DescribeArchiveInput) (*eventbridge.DescribeArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeArchiveOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeArchiveInput) *eventbridge.DescribeArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeArchiveRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeArchiveRequest(_a0 *eventbridge.DescribeArchiveInput) (*request.Request, *eventbridge.DescribeArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeArchiveOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeArchiveInput) *eventbridge.DescribeArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeArchiveOutput)
		}
	}

	return r0, r1
}

// DescribeArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeArchiveWithContext(_a0 context.Context, _a1 *eventbridge.DescribeArchiveInput, _a2 ...request.Option) (*eventbridge.DescribeArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeArchiveInput, ...request.Option) *eventbridge.DescribeArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnection provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeConnection(_a0 *eventbridge.DescribeConnectionInput) (*eventbridge.DescribeConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeConnectionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeConnectionInput) *eventbridge.DescribeConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeConnectionRequest(_a0 *eventbridge.DescribeConnectionInput) (*request.Request, *eventbridge.DescribeConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeConnectionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeConnectionInput) *eventbridge.DescribeConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeConnectionOutput)
		}
	}

	return r0, r1
}

// DescribeConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeConnectionWithContext(_a0 context.Context, _a1 *eventbridge.DescribeConnectionInput, _a2 ...request.Option) (*eventbridge.DescribeConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeConnectionInput, ...request.Option) *eventbridge.DescribeConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpoint provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeEndpoint(_a0 *eventbridge.DescribeEndpointInput) (*eventbridge.DescribeEndpointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeEndpointOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeEndpointInput) *eventbridge.DescribeEndpointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeEndpointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpointRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeEndpointRequest(_a0 *eventbridge.DescribeEndpointInput) (*request.Request, *eventbridge.DescribeEndpointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeEndpointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeEndpointOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeEndpointInput) *eventbridge.DescribeEndpointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeEndpointOutput)
		}
	}

	return r0, r1
}

// DescribeEndpointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeEndpointWithContext(_a0 context.Context, _a1 *eventbridge.DescribeEndpointInput, _a2 ...request.Option) (*eventbridge.DescribeEndpointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeEndpointInput, ...request.Option) *eventbridge.DescribeEndpointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeEndpointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBus provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeEventBus(_a0 *eventbridge.DescribeEventBusInput) (*eventbridge.DescribeEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeEventBusInput) *eventbridge.DescribeEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBusRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeEventBusRequest(_a0 *eventbridge.DescribeEventBusInput) (*request.Request, *eventbridge.DescribeEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeEventBusOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeEventBusInput) *eventbridge.DescribeEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeEventBusOutput)
		}
	}

	return r0, r1
}

// DescribeEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeEventBusWithContext(_a0 context.Context, _a1 *eventbridge.DescribeEventBusInput, _a2 ...request.Option) (*eventbridge.DescribeEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeEventBusInput, ...request.Option) *eventbridge.DescribeEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeEventSource(_a0 *eventbridge.DescribeEventSourceInput) (*eventbridge.DescribeEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeEventSourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeEventSourceInput) *eventbridge.DescribeEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeEventSourceRequest(_a0 *eventbridge.DescribeEventSourceInput) (*request.Request, *eventbridge.DescribeEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeEventSourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeEventSourceInput) *eventbridge.DescribeEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeEventSourceOutput)
		}
	}

	return r0, r1
}

// DescribeEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeEventSourceWithContext(_a0 context.Context, _a1 *eventbridge.DescribeEventSourceInput, _a2 ...request.Option) (*eventbridge.DescribeEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeEventSourceInput, ...request.Option) *eventbridge.DescribeEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribePartnerEventSource(_a0 *eventbridge.DescribePartnerEventSourceInput) (*eventbridge.DescribePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribePartnerEventSourceInput) *eventbridge.DescribePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribePartnerEventSourceRequest(_a0 *eventbridge.DescribePartnerEventSourceInput) (*request.Request, *eventbridge.DescribePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribePartnerEventSourceInput) *eventbridge.DescribePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// DescribePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribePartnerEventSourceWithContext(_a0 context.Context, _a1 *eventbridge.DescribePartnerEventSourceInput, _a2 ...request.Option) (*eventbridge.DescribePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribePartnerEventSourceInput, ...request.Option) *eventbridge.DescribePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplay provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeReplay(_a0 *eventbridge.DescribeReplayInput) (*eventbridge.DescribeReplayOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeReplayOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeReplayInput) *eventbridge.DescribeReplayOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeReplayInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplayRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeReplayRequest(_a0 *eventbridge.DescribeReplayInput) (*request.Request, *eventbridge.DescribeReplayOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeReplayInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeReplayOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeReplayInput) *eventbridge.DescribeReplayOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeReplayOutput)
		}
	}

	return r0, r1
}

// DescribeReplayWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeReplayWithContext(_a0 context.Context, _a1 *eventbridge.DescribeReplayInput, _a2 ...request.Option) (*eventbridge.DescribeReplayOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeReplayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeReplayInput, ...request.Option) *eventbridge.DescribeReplayOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeReplayInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRule provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeRule(_a0 *eventbridge.DescribeRuleInput) (*eventbridge.DescribeRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeRuleInput) *eventbridge.DescribeRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRuleRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DescribeRuleRequest(_a0 *eventbridge.DescribeRuleInput) (*request.Request, *eventbridge.DescribeRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DescribeRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DescribeRuleOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DescribeRuleInput) *eventbridge.DescribeRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DescribeRuleOutput)
		}
	}

	return r0, r1
}

// DescribeRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DescribeRuleWithContext(_a0 context.Context, _a1 *eventbridge.DescribeRuleInput, _a2 ...request.Option) (*eventbridge.DescribeRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DescribeRuleInput, ...request.Option) *eventbridge.DescribeRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DescribeRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRule provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DisableRule(_a0 *eventbridge.DisableRuleInput) (*eventbridge.DisableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.DisableRuleInput) *eventbridge.DisableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.DisableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRuleRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) DisableRuleRequest(_a0 *eventbridge.DisableRuleInput) (*request.Request, *eventbridge.DisableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.DisableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.DisableRuleOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.DisableRuleInput) *eventbridge.DisableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.DisableRuleOutput)
		}
	}

	return r0, r1
}

// DisableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) DisableRuleWithContext(_a0 context.Context, _a1 *eventbridge.DisableRuleInput, _a2 ...request.Option) (*eventbridge.DisableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.DisableRuleInput, ...request.Option) *eventbridge.DisableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.DisableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRule provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) EnableRule(_a0 *eventbridge.EnableRuleInput) (*eventbridge.EnableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.EnableRuleInput) *eventbridge.EnableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.EnableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRuleRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) EnableRuleRequest(_a0 *eventbridge.EnableRuleInput) (*request.Request, *eventbridge.EnableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.EnableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.EnableRuleOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.EnableRuleInput) *eventbridge.EnableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.EnableRuleOutput)
		}
	}

	return r0, r1
}

// EnableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) EnableRuleWithContext(_a0 context.Context, _a1 *eventbridge.EnableRuleInput, _a2 ...request.Option) (*eventbridge.EnableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.EnableRuleInput, ...request.Option) *eventbridge.EnableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.EnableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiDestinations provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListApiDestinations(_a0 *eventbridge.ListApiDestinationsInput) (*eventbridge.ListApiDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListApiDestinationsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListApiDestinationsInput) *eventbridge.ListApiDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListApiDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListApiDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiDestinationsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListApiDestinationsRequest(_a0 *eventbridge.ListApiDestinationsInput) (*request.Request, *eventbridge.ListApiDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListApiDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListApiDestinationsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListApiDestinationsInput) *eventbridge.ListApiDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListApiDestinationsOutput)
		}
	}

	return r0, r1
}

// ListApiDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListApiDestinationsWithContext(_a0 context.Context, _a1 *eventbridge.ListApiDestinationsInput, _a2 ...request.Option) (*eventbridge.ListApiDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListApiDestinationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListApiDestinationsInput, ...request.Option) *eventbridge.ListApiDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListApiDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListApiDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchives provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListArchives(_a0 *eventbridge.ListArchivesInput) (*eventbridge.ListArchivesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListArchivesOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListArchivesInput) *eventbridge.ListArchivesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListArchivesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListArchivesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchivesRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListArchivesRequest(_a0 *eventbridge.ListArchivesInput) (*request.Request, *eventbridge.ListArchivesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListArchivesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListArchivesOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListArchivesInput) *eventbridge.ListArchivesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListArchivesOutput)
		}
	}

	return r0, r1
}

// ListArchivesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListArchivesWithContext(_a0 context.Context, _a1 *eventbridge.ListArchivesInput, _a2 ...request.Option) (*eventbridge.ListArchivesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListArchivesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListArchivesInput, ...request.Option) *eventbridge.ListArchivesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListArchivesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListArchivesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnections provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListConnections(_a0 *eventbridge.ListConnectionsInput) (*eventbridge.ListConnectionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListConnectionsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListConnectionsInput) *eventbridge.ListConnectionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListConnectionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectionsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListConnectionsRequest(_a0 *eventbridge.ListConnectionsInput) (*request.Request, *eventbridge.ListConnectionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListConnectionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListConnectionsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListConnectionsInput) *eventbridge.ListConnectionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListConnectionsOutput)
		}
	}

	return r0, r1
}

// ListConnectionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListConnectionsWithContext(_a0 context.Context, _a1 *eventbridge.ListConnectionsInput, _a2 ...request.Option) (*eventbridge.ListConnectionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListConnectionsInput, ...request.Option) *eventbridge.ListConnectionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpoints provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListEndpoints(_a0 *eventbridge.ListEndpointsInput) (*eventbridge.ListEndpointsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListEndpointsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListEndpointsInput) *eventbridge.ListEndpointsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListEndpointsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpointsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListEndpointsRequest(_a0 *eventbridge.ListEndpointsInput) (*request.Request, *eventbridge.ListEndpointsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListEndpointsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListEndpointsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListEndpointsInput) *eventbridge.ListEndpointsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListEndpointsOutput)
		}
	}

	return r0, r1
}

// ListEndpointsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListEndpointsWithContext(_a0 context.Context, _a1 *eventbridge.ListEndpointsInput, _a2 ...request.Option) (*eventbridge.ListEndpointsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListEndpointsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListEndpointsInput, ...request.Option) *eventbridge.ListEndpointsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListEndpointsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBuses provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListEventBuses(_a0 *eventbridge.ListEventBusesInput) (*eventbridge.ListEventBusesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListEventBusesOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListEventBusesInput) *eventbridge.ListEventBusesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListEventBusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListEventBusesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBusesRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListEventBusesRequest(_a0 *eventbridge.ListEventBusesInput) (*request.Request, *eventbridge.ListEventBusesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListEventBusesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListEventBusesOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListEventBusesInput) *eventbridge.ListEventBusesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListEventBusesOutput)
		}
	}

	return r0, r1
}

// ListEventBusesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListEventBusesWithContext(_a0 context.Context, _a1 *eventbridge.ListEventBusesInput, _a2 ...request.Option) (*eventbridge.ListEventBusesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListEventBusesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListEventBusesInput, ...request.Option) *eventbridge.ListEventBusesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListEventBusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListEventBusesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSources provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListEventSources(_a0 *eventbridge.ListEventSourcesInput) (*eventbridge.ListEventSourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListEventSourcesOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListEventSourcesInput) *eventbridge.ListEventSourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListEventSourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSourcesRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListEventSourcesRequest(_a0 *eventbridge.ListEventSourcesInput) (*request.Request, *eventbridge.ListEventSourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListEventSourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListEventSourcesOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListEventSourcesInput) *eventbridge.ListEventSourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListEventSourcesOutput)
		}
	}

	return r0, r1
}

// ListEventSourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListEventSourcesWithContext(_a0 context.Context, _a1 *eventbridge.ListEventSourcesInput, _a2 ...request.Option) (*eventbridge.ListEventSourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListEventSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListEventSourcesInput, ...request.Option) *eventbridge.ListEventSourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListEventSourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccounts provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListPartnerEventSourceAccounts(_a0 *eventbridge.ListPartnerEventSourceAccountsInput) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListPartnerEventSourceAccountsInput) *eventbridge.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListPartnerEventSourceAccountsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListPartnerEventSourceAccountsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccountsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListPartnerEventSourceAccountsRequest(_a0 *eventbridge.ListPartnerEventSourceAccountsInput) (*request.Request, *eventbridge.ListPartnerEventSourceAccountsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListPartnerEventSourceAccountsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListPartnerEventSourceAccountsInput) *eventbridge.ListPartnerEventSourceAccountsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListPartnerEventSourceAccountsOutput)
		}
	}

	return r0, r1
}

// ListPartnerEventSourceAccountsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListPartnerEventSourceAccountsWithContext(_a0 context.Context, _a1 *eventbridge.ListPartnerEventSourceAccountsInput, _a2 ...request.Option) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListPartnerEventSourceAccountsInput, ...request.Option) *eventbridge.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListPartnerEventSourceAccountsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListPartnerEventSourceAccountsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSources provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListPartnerEventSources(_a0 *eventbridge.ListPartnerEventSourcesInput) (*eventbridge.ListPartnerEventSourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListPartnerEventSourcesInput) *eventbridge.ListPartnerEventSourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListPartnerEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListPartnerEventSourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourcesRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListPartnerEventSourcesRequest(_a0 *eventbridge.ListPartnerEventSourcesInput) (*request.Request, *eventbridge.ListPartnerEventSourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListPartnerEventSourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListPartnerEventSourcesInput) *eventbridge.ListPartnerEventSourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListPartnerEventSourcesOutput)
		}
	}

	return r0, r1
}

// ListPartnerEventSourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListPartnerEventSourcesWithContext(_a0 context.Context, _a1 *eventbridge.ListPartnerEventSourcesInput, _a2 ...request.Option) (*eventbridge.ListPartnerEventSourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListPartnerEventSourcesInput, ...request.Option) *eventbridge.ListPartnerEventSourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListPartnerEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListPartnerEventSourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplays provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListReplays(_a0 *eventbridge.ListReplaysInput) (*eventbridge.ListReplaysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListReplaysOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListReplaysInput) *eventbridge.ListReplaysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListReplaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListReplaysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplaysRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListReplaysRequest(_a0 *eventbridge.ListReplaysInput) (*request.Request, *eventbridge.ListReplaysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListReplaysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListReplaysOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListReplaysInput) *eventbridge.ListReplaysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListReplaysOutput)
		}
	}

	return r0, r1
}

// ListReplaysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListReplaysWithContext(_a0 context.Context, _a1 *eventbridge.ListReplaysInput, _a2 ...request.Option) (*eventbridge.ListReplaysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListReplaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListReplaysInput, ...request.Option) *eventbridge.ListReplaysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListReplaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListReplaysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTarget provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListRuleNamesByTarget(_a0 *eventbridge.ListRuleNamesByTargetInput) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListRuleNamesByTargetInput) *eventbridge.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListRuleNamesByTargetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTargetRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListRuleNamesByTargetRequest(_a0 *eventbridge.ListRuleNamesByTargetInput) (*request.Request, *eventbridge.ListRuleNamesByTargetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListRuleNamesByTargetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListRuleNamesByTargetInput) *eventbridge.ListRuleNamesByTargetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListRuleNamesByTargetOutput)
		}
	}

	return r0, r1
}

// ListRuleNamesByTargetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListRuleNamesByTargetWithContext(_a0 context.Context, _a1 *eventbridge.ListRuleNamesByTargetInput, _a2 ...request.Option) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListRuleNamesByTargetInput, ...request.Option) *eventbridge.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListRuleNamesByTargetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListRules(_a0 *eventbridge.ListRulesInput) (*eventbridge.ListRulesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListRulesOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListRulesInput) *eventbridge.ListRulesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListRulesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRulesRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListRulesRequest(_a0 *eventbridge.ListRulesInput) (*request.Request, *eventbridge.ListRulesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListRulesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListRulesOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListRulesInput) *eventbridge.ListRulesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListRulesOutput)
		}
	}

	return r0, r1
}

// ListRulesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListRulesWithContext(_a0 context.Context, _a1 *eventbridge.ListRulesInput, _a2 ...request.Option) (*eventbridge.ListRulesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListRulesInput, ...request.Option) *eventbridge.ListRulesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListRulesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListTagsForResource(_a0 *eventbridge.ListTagsForResourceInput) (*eventbridge.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListTagsForResourceInput) *eventbridge.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListTagsForResourceRequest(_a0 *eventbridge.ListTagsForResourceInput) (*request.Request, *eventbridge.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListTagsForResourceInput) *eventbridge.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *eventbridge.ListTagsForResourceInput, _a2 ...request.Option) (*eventbridge.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListTagsForResourceInput, ...request.Option) *eventbridge.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRule provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListTargetsByRule(_a0 *eventbridge.ListTargetsByRuleInput) (*eventbridge.ListTargetsByRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.ListTargetsByRuleInput) *eventbridge.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.ListTargetsByRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRuleRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) ListTargetsByRuleRequest(_a0 *eventbridge.ListTargetsByRuleInput) (*request.Request, *eventbridge.ListTargetsByRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.ListTargetsByRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.ListTargetsByRuleOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.ListTargetsByRuleInput) *eventbridge.ListTargetsByRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.ListTargetsByRuleOutput)
		}
	}

	return r0, r1
}

// ListTargetsByRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) ListTargetsByRuleWithContext(_a0 context.Context, _a1 *eventbridge.ListTargetsByRuleInput, _a2 ...request.Option) (*eventbridge.ListTargetsByRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.ListTargetsByRuleInput, ...request.Option) *eventbridge.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.ListTargetsByRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvents provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutEvents(_a0 *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.PutEventsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.PutEventsInput) *eventbridge.PutEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.PutEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEventsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutEventsRequest(_a0 *eventbridge.PutEventsInput) (*request.Request, *eventbridge.PutEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.PutEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.PutEventsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.PutEventsInput) *eventbridge.PutEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.PutEventsOutput)
		}
	}

	return r0, r1
}

// PutEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) PutEventsWithContext(_a0 context.Context, _a1 *eventbridge.PutEventsInput, _a2 ...request.Option) (*eventbridge.PutEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.PutEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutEventsInput, ...request.Option) *eventbridge.PutEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEvents provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutPartnerEvents(_a0 *eventbridge.PutPartnerEventsInput) (*eventbridge.PutPartnerEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.PutPartnerEventsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.PutPartnerEventsInput) *eventbridge.PutPartnerEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutPartnerEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.PutPartnerEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEventsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutPartnerEventsRequest(_a0 *eventbridge.PutPartnerEventsInput) (*request.Request, *eventbridge.PutPartnerEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.PutPartnerEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.PutPartnerEventsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.PutPartnerEventsInput) *eventbridge.PutPartnerEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.PutPartnerEventsOutput)
		}
	}

	return r0, r1
}

// PutPartnerEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) PutPartnerEventsWithContext(_a0 context.Context, _a1 *eventbridge.PutPartnerEventsInput, _a2 ...request.Option) (*eventbridge.PutPartnerEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.PutPartnerEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutPartnerEventsInput, ...request.Option) *eventbridge.PutPartnerEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutPartnerEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutPartnerEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermission provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutPermission(_a0 *eventbridge.PutPermissionInput) (*eventbridge.PutPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.PutPermissionInput) *eventbridge.PutPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.PutPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutPermissionRequest(_a0 *eventbridge.PutPermissionInput) (*request.Request, *eventbridge.PutPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.PutPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.PutPermissionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.PutPermissionInput) *eventbridge.PutPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.PutPermissionOutput)
		}
	}

	return r0, r1
}

// PutPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) PutPermissionWithContext(_a0 context.Context, _a1 *eventbridge.PutPermissionInput, _a2 ...request.Option) (*eventbridge.PutPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutPermissionInput, ...request.Option) *eventbridge.PutPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRule provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutRule(_a0 *eventbridge.PutRuleInput) (*eventbridge.PutRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.PutRuleOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.PutRuleInput) *eventbridge.PutRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.PutRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRuleRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutRuleRequest(_a0 *eventbridge.PutRuleInput) (*request.Request, *eventbridge.PutRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.PutRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.PutRuleOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.PutRuleInput) *eventbridge.PutRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.PutRuleOutput)
		}
	}

	return r0, r1
}

// PutRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) PutRuleWithContext(_a0 context.Context, _a1 *eventbridge.PutRuleInput, _a2 ...request.Option) (*eventbridge.PutRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.PutRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutRuleInput, ...request.Option) *eventbridge.PutRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargets provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutTargets(_a0 *eventbridge.PutTargetsInput) (*eventbridge.PutTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.PutTargetsInput) *eventbridge.PutTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.PutTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargetsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) PutTargetsRequest(_a0 *eventbridge.PutTargetsInput) (*request.Request, *eventbridge.PutTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.PutTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.PutTargetsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.PutTargetsInput) *eventbridge.PutTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.PutTargetsOutput)
		}
	}

	return r0, r1
}

// PutTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) PutTargetsWithContext(_a0 context.Context, _a1 *eventbridge.PutTargetsInput, _a2 ...request.Option) (*eventbridge.PutTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutTargetsInput, ...request.Option) *eventbridge.PutTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) RemovePermission(_a0 *eventbridge.RemovePermissionInput) (*eventbridge.RemovePermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.RemovePermissionInput) *eventbridge.RemovePermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.RemovePermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermissionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) RemovePermissionRequest(_a0 *eventbridge.RemovePermissionInput) (*request.Request, *eventbridge.RemovePermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.RemovePermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.RemovePermissionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.RemovePermissionInput) *eventbridge.RemovePermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.RemovePermissionOutput)
		}
	}

	return r0, r1
}

// RemovePermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) RemovePermissionWithContext(_a0 context.Context, _a1 *eventbridge.RemovePermissionInput, _a2 ...request.Option) (*eventbridge.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.RemovePermissionInput, ...request.Option) *eventbridge.RemovePermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.RemovePermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargets provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) RemoveTargets(_a0 *eventbridge.RemoveTargetsInput) (*eventbridge.RemoveTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.RemoveTargetsInput) *eventbridge.RemoveTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.RemoveTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargetsRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) RemoveTargetsRequest(_a0 *eventbridge.RemoveTargetsInput) (*request.Request, *eventbridge.RemoveTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.RemoveTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.RemoveTargetsOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.RemoveTargetsInput) *eventbridge.RemoveTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.RemoveTargetsOutput)
		}
	}

	return r0, r1
}

// RemoveTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) RemoveTargetsWithContext(_a0 context.Context, _a1 *eventbridge.RemoveTargetsInput, _a2 ...request.Option) (*eventbridge.RemoveTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.RemoveTargetsInput, ...request.Option) *eventbridge.RemoveTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.RemoveTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplay provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) StartReplay(_a0 *eventbridge.StartReplayInput) (*eventbridge.StartReplayOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.StartReplayOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.StartReplayInput) *eventbridge.StartReplayOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.StartReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.StartReplayInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplayRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) StartReplayRequest(_a0 *eventbridge.StartReplayInput) (*request.Request, *eventbridge.StartReplayOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.StartReplayInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.StartReplayOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.StartReplayInput) *eventbridge.StartReplayOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.StartReplayOutput)
		}
	}

	return r0, r1
}

// StartReplayWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) StartReplayWithContext(_a0 context.Context, _a1 *eventbridge.StartReplayInput, _a2 ...request.Option) (*eventbridge.StartReplayOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.StartReplayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.StartReplayInput, ...request.Option) *eventbridge.StartReplayOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.StartReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.StartReplayInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) TagResource(_a0 *eventbridge.TagResourceInput) (*eventbridge.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.TagResourceInput) *eventbridge.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) TagResourceRequest(_a0 *eventbridge.TagResourceInput) (*request.Request, *eventbridge.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.TagResourceInput) *eventbridge.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) TagResourceWithContext(_a0 context.Context, _a1 *eventbridge.TagResourceInput, _a2 ...request.Option) (*eventbridge.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.TagResourceInput, ...request.Option) *eventbridge.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPattern provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) TestEventPattern(_a0 *eventbridge.TestEventPatternInput) (*eventbridge.TestEventPatternOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.TestEventPatternInput) *eventbridge.TestEventPatternOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.TestEventPatternInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPatternRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) TestEventPatternRequest(_a0 *eventbridge.TestEventPatternInput) (*request.Request, *eventbridge.TestEventPatternOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.TestEventPatternInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.TestEventPatternOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.TestEventPatternInput) *eventbridge.TestEventPatternOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.TestEventPatternOutput)
		}
	}

	return r0, r1
}

// TestEventPatternWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) TestEventPatternWithContext(_a0 context.Context, _a1 *eventbridge.TestEventPatternInput, _a2 ...request.Option) (*eventbridge.TestEventPatternOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.TestEventPatternInput, ...request.Option) *eventbridge.TestEventPatternOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.TestEventPatternInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UntagResource(_a0 *eventbridge.UntagResourceInput) (*eventbridge.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.UntagResourceInput) *eventbridge.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UntagResourceRequest(_a0 *eventbridge.UntagResourceInput) (*request.Request, *eventbridge.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.UntagResourceInput) *eventbridge.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) UntagResourceWithContext(_a0 context.Context, _a1 *eventbridge.UntagResourceInput, _a2 ...request.Option) (*eventbridge.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.UntagResourceInput, ...request.Option) *eventbridge.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiDestination provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateApiDestination(_a0 *eventbridge.UpdateApiDestinationInput) (*eventbridge.UpdateApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.UpdateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateApiDestinationInput) *eventbridge.UpdateApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiDestinationRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateApiDestinationRequest(_a0 *eventbridge.UpdateApiDestinationInput) (*request.Request, *eventbridge.UpdateApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.UpdateApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateApiDestinationInput) *eventbridge.UpdateApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.UpdateApiDestinationOutput)
		}
	}

	return r0, r1
}

// UpdateApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) UpdateApiDestinationWithContext(_a0 context.Context, _a1 *eventbridge.UpdateApiDestinationInput, _a2 ...request.Option) (*eventbridge.UpdateApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.UpdateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.UpdateApiDestinationInput, ...request.Option) *eventbridge.UpdateApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.UpdateApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArchive provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateArchive(_a0 *eventbridge.UpdateArchiveInput) (*eventbridge.UpdateArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.UpdateArchiveOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateArchiveInput) *eventbridge.UpdateArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArchiveRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateArchiveRequest(_a0 *eventbridge.UpdateArchiveInput) (*request.Request, *eventbridge.UpdateArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.UpdateArchiveOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateArchiveInput) *eventbridge.UpdateArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.UpdateArchiveOutput)
		}
	}

	return r0, r1
}

// UpdateArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) UpdateArchiveWithContext(_a0 context.Context, _a1 *eventbridge.UpdateArchiveInput, _a2 ...request.Option) (*eventbridge.UpdateArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.UpdateArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.UpdateArchiveInput, ...request.Option) *eventbridge.UpdateArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.UpdateArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateConnection(_a0 *eventbridge.UpdateConnectionInput) (*eventbridge.UpdateConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.UpdateConnectionOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateConnectionInput) *eventbridge.UpdateConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectionRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateConnectionRequest(_a0 *eventbridge.UpdateConnectionInput) (*request.Request, *eventbridge.UpdateConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.UpdateConnectionOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateConnectionInput) *eventbridge.UpdateConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.UpdateConnectionOutput)
		}
	}

	return r0, r1
}

// UpdateConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) UpdateConnectionWithContext(_a0 context.Context, _a1 *eventbridge.UpdateConnectionInput, _a2 ...request.Option) (*eventbridge.UpdateConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.UpdateConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.UpdateConnectionInput, ...request.Option) *eventbridge.UpdateConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.UpdateConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpoint provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateEndpoint(_a0 *eventbridge.UpdateEndpointInput) (*eventbridge.UpdateEndpointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eventbridge.UpdateEndpointOutput
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateEndpointInput) *eventbridge.UpdateEndpointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateEndpointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpointRequest provides a mock function with given fields: _a0
func (_m *EventBridgeAPI) UpdateEndpointRequest(_a0 *eventbridge.UpdateEndpointInput) (*request.Request, *eventbridge.UpdateEndpointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eventbridge.UpdateEndpointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eventbridge.UpdateEndpointOutput
	if rf, ok := ret.Get(1).(func(*eventbridge.UpdateEndpointInput) *eventbridge.UpdateEndpointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eventbridge.UpdateEndpointOutput)
		}
	}

	return r0, r1
}

// UpdateEndpointWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EventBridgeAPI) UpdateEndpointWithContext(_a0 context.Context, _a1 *eventbridge.UpdateEndpointInput, _a2 ...request.Option) (*eventbridge.UpdateEndpointOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.UpdateEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.UpdateEndpointInput, ...request.Option) *eventbridge.UpdateEndpointOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.UpdateEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.UpdateEndpointInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventBridgeAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventBridgeAPI creates a new instance of EventBridgeAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventBridgeAPI(t mockConstructorTestingTNewEventBridgeAPI) *EventBridgeAPI {
	mock := &EventBridgeAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
