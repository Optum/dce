// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "github.com/Optum/dce/pkg/config"

import mock "github.com/stretchr/testify/mock"

// ConfigurationBuilder is an autogenerated mock type for the ConfigurationBuilder type
type ConfigurationBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *ConfigurationBuilder) Build() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dump provides a mock function with given fields: cfgStruct
func (_m *ConfigurationBuilder) Dump(cfgStruct interface{}) error {
	ret := _m.Called(cfgStruct)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(cfgStruct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetService provides a mock function with given fields: svcFor
func (_m *ConfigurationBuilder) GetService(svcFor interface{}) error {
	ret := _m.Called(svcFor)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(svcFor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStringVal provides a mock function with given fields: key
func (_m *ConfigurationBuilder) GetStringVal(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVal provides a mock function with given fields: key
func (_m *ConfigurationBuilder) GetVal(key string) (interface{}, error) {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveParameterStoreVals provides a mock function with given fields:
func (_m *ConfigurationBuilder) RetrieveParameterStoreVals() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unmarshal provides a mock function with given fields: cfgStruct
func (_m *ConfigurationBuilder) Unmarshal(cfgStruct interface{}) error {
	ret := _m.Called(cfgStruct)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(cfgStruct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithEnv provides a mock function with given fields: key, envVar, defaultValue
func (_m *ConfigurationBuilder) WithEnv(key string, envVar string, defaultValue interface{}) *config.ConfigurationBuilder {
	ret := _m.Called(key, envVar, defaultValue)

	var r0 *config.ConfigurationBuilder
	if rf, ok := ret.Get(0).(func(string, string, interface{}) *config.ConfigurationBuilder); ok {
		r0 = rf(key, envVar, defaultValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ConfigurationBuilder)
		}
	}

	return r0
}

// WithParameterStoreEnv provides a mock function with given fields: key, envVar, defaultValue
func (_m *ConfigurationBuilder) WithParameterStoreEnv(key string, envVar string, defaultValue string) *config.ConfigurationBuilder {
	ret := _m.Called(key, envVar, defaultValue)

	var r0 *config.ConfigurationBuilder
	if rf, ok := ret.Get(0).(func(string, string, string) *config.ConfigurationBuilder); ok {
		r0 = rf(key, envVar, defaultValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ConfigurationBuilder)
		}
	}

	return r0
}

// WithService provides a mock function with given fields: svc
func (_m *ConfigurationBuilder) WithService(svc interface{}) *config.ConfigurationBuilder {
	ret := _m.Called(svc)

	var r0 *config.ConfigurationBuilder
	if rf, ok := ret.Get(0).(func(interface{}) *config.ConfigurationBuilder); ok {
		r0 = rf(svc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ConfigurationBuilder)
		}
	}

	return r0
}

// WithVal provides a mock function with given fields: key, val
func (_m *ConfigurationBuilder) WithVal(key string, val interface{}) *config.ConfigurationBuilder {
	ret := _m.Called(key, val)

	var r0 *config.ConfigurationBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}) *config.ConfigurationBuilder); ok {
		r0 = rf(key, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ConfigurationBuilder)
		}
	}

	return r0
}
