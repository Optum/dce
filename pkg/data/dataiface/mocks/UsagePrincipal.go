// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import time "time"
import usage "github.com/Optum/dce/pkg/usage"

// UsagePrincipal is an autogenerated mock type for the UsagePrincipal type
type UsagePrincipal struct {
	mock.Mock
}

// Get provides a mock function with given fields: id, date
func (_m *UsagePrincipal) Get(id string, date time.Time) (*usage.Principal, error) {
	ret := _m.Called(id, date)

	var r0 *usage.Principal
	if rf, ok := ret.Get(0).(func(string, time.Time) *usage.Principal); ok {
		r0 = rf(id, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usage.Principal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(id, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: query
func (_m *UsagePrincipal) List(query *usage.Principal) (*usage.Principals, error) {
	ret := _m.Called(query)

	var r0 *usage.Principals
	if rf, ok := ret.Get(0).(func(*usage.Principal) *usage.Principals); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usage.Principals)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*usage.Principal) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
