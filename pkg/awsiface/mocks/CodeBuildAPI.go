// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	codebuild "github.com/aws/aws-sdk-go/service/codebuild"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// CodeBuildAPI is an autogenerated mock type for the CodeBuildAPI type
type CodeBuildAPI struct {
	mock.Mock
}

// BatchDeleteBuilds provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchDeleteBuilds(_a0 *codebuild.BatchDeleteBuildsInput) (*codebuild.BatchDeleteBuildsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchDeleteBuildsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchDeleteBuildsInput) *codebuild.BatchDeleteBuildsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchDeleteBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchDeleteBuildsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteBuildsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchDeleteBuildsRequest(_a0 *codebuild.BatchDeleteBuildsInput) (*request.Request, *codebuild.BatchDeleteBuildsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchDeleteBuildsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchDeleteBuildsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchDeleteBuildsInput) *codebuild.BatchDeleteBuildsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchDeleteBuildsOutput)
		}
	}

	return r0, r1
}

// BatchDeleteBuildsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchDeleteBuildsWithContext(_a0 context.Context, _a1 *codebuild.BatchDeleteBuildsInput, _a2 ...request.Option) (*codebuild.BatchDeleteBuildsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchDeleteBuildsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchDeleteBuildsInput, ...request.Option) *codebuild.BatchDeleteBuildsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchDeleteBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchDeleteBuildsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetBuildBatches provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetBuildBatches(_a0 *codebuild.BatchGetBuildBatchesInput) (*codebuild.BatchGetBuildBatchesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetBuildBatchesOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetBuildBatchesInput) *codebuild.BatchGetBuildBatchesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetBuildBatchesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetBuildBatchesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetBuildBatchesRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetBuildBatchesRequest(_a0 *codebuild.BatchGetBuildBatchesInput) (*request.Request, *codebuild.BatchGetBuildBatchesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetBuildBatchesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetBuildBatchesOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetBuildBatchesInput) *codebuild.BatchGetBuildBatchesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetBuildBatchesOutput)
		}
	}

	return r0, r1
}

// BatchGetBuildBatchesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetBuildBatchesWithContext(_a0 context.Context, _a1 *codebuild.BatchGetBuildBatchesInput, _a2 ...request.Option) (*codebuild.BatchGetBuildBatchesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetBuildBatchesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetBuildBatchesInput, ...request.Option) *codebuild.BatchGetBuildBatchesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetBuildBatchesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetBuildBatchesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetBuilds provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetBuilds(_a0 *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetBuildsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetBuildsInput) *codebuild.BatchGetBuildsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetBuildsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetBuildsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetBuildsRequest(_a0 *codebuild.BatchGetBuildsInput) (*request.Request, *codebuild.BatchGetBuildsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetBuildsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetBuildsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetBuildsInput) *codebuild.BatchGetBuildsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetBuildsOutput)
		}
	}

	return r0, r1
}

// BatchGetBuildsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetBuildsWithContext(_a0 context.Context, _a1 *codebuild.BatchGetBuildsInput, _a2 ...request.Option) (*codebuild.BatchGetBuildsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetBuildsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetBuildsInput, ...request.Option) *codebuild.BatchGetBuildsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetBuildsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetProjects provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetProjects(_a0 *codebuild.BatchGetProjectsInput) (*codebuild.BatchGetProjectsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetProjectsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetProjectsInput) *codebuild.BatchGetProjectsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetProjectsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetProjectsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetProjectsRequest(_a0 *codebuild.BatchGetProjectsInput) (*request.Request, *codebuild.BatchGetProjectsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetProjectsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetProjectsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetProjectsInput) *codebuild.BatchGetProjectsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetProjectsOutput)
		}
	}

	return r0, r1
}

// BatchGetProjectsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetProjectsWithContext(_a0 context.Context, _a1 *codebuild.BatchGetProjectsInput, _a2 ...request.Option) (*codebuild.BatchGetProjectsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetProjectsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetProjectsInput, ...request.Option) *codebuild.BatchGetProjectsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetProjectsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetReportGroups provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetReportGroups(_a0 *codebuild.BatchGetReportGroupsInput) (*codebuild.BatchGetReportGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetReportGroupsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetReportGroupsInput) *codebuild.BatchGetReportGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetReportGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetReportGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetReportGroupsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetReportGroupsRequest(_a0 *codebuild.BatchGetReportGroupsInput) (*request.Request, *codebuild.BatchGetReportGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetReportGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetReportGroupsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetReportGroupsInput) *codebuild.BatchGetReportGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetReportGroupsOutput)
		}
	}

	return r0, r1
}

// BatchGetReportGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetReportGroupsWithContext(_a0 context.Context, _a1 *codebuild.BatchGetReportGroupsInput, _a2 ...request.Option) (*codebuild.BatchGetReportGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetReportGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetReportGroupsInput, ...request.Option) *codebuild.BatchGetReportGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetReportGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetReportGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetReports provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetReports(_a0 *codebuild.BatchGetReportsInput) (*codebuild.BatchGetReportsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.BatchGetReportsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetReportsInput) *codebuild.BatchGetReportsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetReportsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetReportsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) BatchGetReportsRequest(_a0 *codebuild.BatchGetReportsInput) (*request.Request, *codebuild.BatchGetReportsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.BatchGetReportsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.BatchGetReportsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.BatchGetReportsInput) *codebuild.BatchGetReportsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.BatchGetReportsOutput)
		}
	}

	return r0, r1
}

// BatchGetReportsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) BatchGetReportsWithContext(_a0 context.Context, _a1 *codebuild.BatchGetReportsInput, _a2 ...request.Option) (*codebuild.BatchGetReportsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.BatchGetReportsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.BatchGetReportsInput, ...request.Option) *codebuild.BatchGetReportsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.BatchGetReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.BatchGetReportsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateProject(_a0 *codebuild.CreateProjectInput) (*codebuild.CreateProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.CreateProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.CreateProjectInput) *codebuild.CreateProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.CreateProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateProjectRequest(_a0 *codebuild.CreateProjectInput) (*request.Request, *codebuild.CreateProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.CreateProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.CreateProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.CreateProjectInput) *codebuild.CreateProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.CreateProjectOutput)
		}
	}

	return r0, r1
}

// CreateProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) CreateProjectWithContext(_a0 context.Context, _a1 *codebuild.CreateProjectInput, _a2 ...request.Option) (*codebuild.CreateProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.CreateProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.CreateProjectInput, ...request.Option) *codebuild.CreateProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.CreateProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReportGroup provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateReportGroup(_a0 *codebuild.CreateReportGroupInput) (*codebuild.CreateReportGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.CreateReportGroupOutput
	if rf, ok := ret.Get(0).(func(*codebuild.CreateReportGroupInput) *codebuild.CreateReportGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.CreateReportGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReportGroupRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateReportGroupRequest(_a0 *codebuild.CreateReportGroupInput) (*request.Request, *codebuild.CreateReportGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.CreateReportGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.CreateReportGroupOutput
	if rf, ok := ret.Get(1).(func(*codebuild.CreateReportGroupInput) *codebuild.CreateReportGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.CreateReportGroupOutput)
		}
	}

	return r0, r1
}

// CreateReportGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) CreateReportGroupWithContext(_a0 context.Context, _a1 *codebuild.CreateReportGroupInput, _a2 ...request.Option) (*codebuild.CreateReportGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.CreateReportGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.CreateReportGroupInput, ...request.Option) *codebuild.CreateReportGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.CreateReportGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebhook provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateWebhook(_a0 *codebuild.CreateWebhookInput) (*codebuild.CreateWebhookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.CreateWebhookOutput
	if rf, ok := ret.Get(0).(func(*codebuild.CreateWebhookInput) *codebuild.CreateWebhookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.CreateWebhookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebhookRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) CreateWebhookRequest(_a0 *codebuild.CreateWebhookInput) (*request.Request, *codebuild.CreateWebhookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.CreateWebhookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.CreateWebhookOutput
	if rf, ok := ret.Get(1).(func(*codebuild.CreateWebhookInput) *codebuild.CreateWebhookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.CreateWebhookOutput)
		}
	}

	return r0, r1
}

// CreateWebhookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) CreateWebhookWithContext(_a0 context.Context, _a1 *codebuild.CreateWebhookInput, _a2 ...request.Option) (*codebuild.CreateWebhookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.CreateWebhookOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.CreateWebhookInput, ...request.Option) *codebuild.CreateWebhookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.CreateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.CreateWebhookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuildBatch provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteBuildBatch(_a0 *codebuild.DeleteBuildBatchInput) (*codebuild.DeleteBuildBatchOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteBuildBatchOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteBuildBatchInput) *codebuild.DeleteBuildBatchOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteBuildBatchInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuildBatchRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteBuildBatchRequest(_a0 *codebuild.DeleteBuildBatchInput) (*request.Request, *codebuild.DeleteBuildBatchOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteBuildBatchInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteBuildBatchOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteBuildBatchInput) *codebuild.DeleteBuildBatchOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteBuildBatchOutput)
		}
	}

	return r0, r1
}

// DeleteBuildBatchWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteBuildBatchWithContext(_a0 context.Context, _a1 *codebuild.DeleteBuildBatchInput, _a2 ...request.Option) (*codebuild.DeleteBuildBatchOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteBuildBatchOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteBuildBatchInput, ...request.Option) *codebuild.DeleteBuildBatchOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteBuildBatchInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteProject(_a0 *codebuild.DeleteProjectInput) (*codebuild.DeleteProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteProjectInput) *codebuild.DeleteProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteProjectRequest(_a0 *codebuild.DeleteProjectInput) (*request.Request, *codebuild.DeleteProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteProjectInput) *codebuild.DeleteProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteProjectOutput)
		}
	}

	return r0, r1
}

// DeleteProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteProjectWithContext(_a0 context.Context, _a1 *codebuild.DeleteProjectInput, _a2 ...request.Option) (*codebuild.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteProjectInput, ...request.Option) *codebuild.DeleteProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReport provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteReport(_a0 *codebuild.DeleteReportInput) (*codebuild.DeleteReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteReportOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteReportInput) *codebuild.DeleteReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReportGroup provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteReportGroup(_a0 *codebuild.DeleteReportGroupInput) (*codebuild.DeleteReportGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteReportGroupOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteReportGroupInput) *codebuild.DeleteReportGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteReportGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReportGroupRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteReportGroupRequest(_a0 *codebuild.DeleteReportGroupInput) (*request.Request, *codebuild.DeleteReportGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteReportGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteReportGroupOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteReportGroupInput) *codebuild.DeleteReportGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteReportGroupOutput)
		}
	}

	return r0, r1
}

// DeleteReportGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteReportGroupWithContext(_a0 context.Context, _a1 *codebuild.DeleteReportGroupInput, _a2 ...request.Option) (*codebuild.DeleteReportGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteReportGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteReportGroupInput, ...request.Option) *codebuild.DeleteReportGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteReportGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReportRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteReportRequest(_a0 *codebuild.DeleteReportInput) (*request.Request, *codebuild.DeleteReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteReportOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteReportInput) *codebuild.DeleteReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteReportOutput)
		}
	}

	return r0, r1
}

// DeleteReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteReportWithContext(_a0 context.Context, _a1 *codebuild.DeleteReportInput, _a2 ...request.Option) (*codebuild.DeleteReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteReportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteReportInput, ...request.Option) *codebuild.DeleteReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteResourcePolicy(_a0 *codebuild.DeleteResourcePolicyInput) (*codebuild.DeleteResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteResourcePolicyInput) *codebuild.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteResourcePolicyRequest(_a0 *codebuild.DeleteResourcePolicyInput) (*request.Request, *codebuild.DeleteResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteResourcePolicyInput) *codebuild.DeleteResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteResourcePolicyOutput)
		}
	}

	return r0, r1
}

// DeleteResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteResourcePolicyWithContext(_a0 context.Context, _a1 *codebuild.DeleteResourcePolicyInput, _a2 ...request.Option) (*codebuild.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteResourcePolicyInput, ...request.Option) *codebuild.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceCredentials provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteSourceCredentials(_a0 *codebuild.DeleteSourceCredentialsInput) (*codebuild.DeleteSourceCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteSourceCredentialsInput) *codebuild.DeleteSourceCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteSourceCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceCredentialsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteSourceCredentialsRequest(_a0 *codebuild.DeleteSourceCredentialsInput) (*request.Request, *codebuild.DeleteSourceCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteSourceCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteSourceCredentialsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteSourceCredentialsInput) *codebuild.DeleteSourceCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteSourceCredentialsOutput)
		}
	}

	return r0, r1
}

// DeleteSourceCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteSourceCredentialsWithContext(_a0 context.Context, _a1 *codebuild.DeleteSourceCredentialsInput, _a2 ...request.Option) (*codebuild.DeleteSourceCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteSourceCredentialsInput, ...request.Option) *codebuild.DeleteSourceCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteSourceCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhook provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteWebhook(_a0 *codebuild.DeleteWebhookInput) (*codebuild.DeleteWebhookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DeleteWebhookOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteWebhookInput) *codebuild.DeleteWebhookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteWebhookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhookRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DeleteWebhookRequest(_a0 *codebuild.DeleteWebhookInput) (*request.Request, *codebuild.DeleteWebhookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DeleteWebhookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DeleteWebhookOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DeleteWebhookInput) *codebuild.DeleteWebhookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DeleteWebhookOutput)
		}
	}

	return r0, r1
}

// DeleteWebhookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DeleteWebhookWithContext(_a0 context.Context, _a1 *codebuild.DeleteWebhookInput, _a2 ...request.Option) (*codebuild.DeleteWebhookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DeleteWebhookOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DeleteWebhookInput, ...request.Option) *codebuild.DeleteWebhookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DeleteWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DeleteWebhookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCodeCoverages provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DescribeCodeCoverages(_a0 *codebuild.DescribeCodeCoveragesInput) (*codebuild.DescribeCodeCoveragesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DescribeCodeCoveragesOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DescribeCodeCoveragesInput) *codebuild.DescribeCodeCoveragesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DescribeCodeCoveragesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DescribeCodeCoveragesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCodeCoveragesPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) DescribeCodeCoveragesPages(_a0 *codebuild.DescribeCodeCoveragesInput, _a1 func(*codebuild.DescribeCodeCoveragesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.DescribeCodeCoveragesInput, func(*codebuild.DescribeCodeCoveragesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCodeCoveragesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) DescribeCodeCoveragesPagesWithContext(_a0 context.Context, _a1 *codebuild.DescribeCodeCoveragesInput, _a2 func(*codebuild.DescribeCodeCoveragesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DescribeCodeCoveragesInput, func(*codebuild.DescribeCodeCoveragesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCodeCoveragesRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DescribeCodeCoveragesRequest(_a0 *codebuild.DescribeCodeCoveragesInput) (*request.Request, *codebuild.DescribeCodeCoveragesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DescribeCodeCoveragesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DescribeCodeCoveragesOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DescribeCodeCoveragesInput) *codebuild.DescribeCodeCoveragesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DescribeCodeCoveragesOutput)
		}
	}

	return r0, r1
}

// DescribeCodeCoveragesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DescribeCodeCoveragesWithContext(_a0 context.Context, _a1 *codebuild.DescribeCodeCoveragesInput, _a2 ...request.Option) (*codebuild.DescribeCodeCoveragesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DescribeCodeCoveragesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DescribeCodeCoveragesInput, ...request.Option) *codebuild.DescribeCodeCoveragesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DescribeCodeCoveragesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DescribeCodeCoveragesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTestCases provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DescribeTestCases(_a0 *codebuild.DescribeTestCasesInput) (*codebuild.DescribeTestCasesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.DescribeTestCasesOutput
	if rf, ok := ret.Get(0).(func(*codebuild.DescribeTestCasesInput) *codebuild.DescribeTestCasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DescribeTestCasesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.DescribeTestCasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTestCasesPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) DescribeTestCasesPages(_a0 *codebuild.DescribeTestCasesInput, _a1 func(*codebuild.DescribeTestCasesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.DescribeTestCasesInput, func(*codebuild.DescribeTestCasesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTestCasesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) DescribeTestCasesPagesWithContext(_a0 context.Context, _a1 *codebuild.DescribeTestCasesInput, _a2 func(*codebuild.DescribeTestCasesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DescribeTestCasesInput, func(*codebuild.DescribeTestCasesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTestCasesRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) DescribeTestCasesRequest(_a0 *codebuild.DescribeTestCasesInput) (*request.Request, *codebuild.DescribeTestCasesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.DescribeTestCasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.DescribeTestCasesOutput
	if rf, ok := ret.Get(1).(func(*codebuild.DescribeTestCasesInput) *codebuild.DescribeTestCasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.DescribeTestCasesOutput)
		}
	}

	return r0, r1
}

// DescribeTestCasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) DescribeTestCasesWithContext(_a0 context.Context, _a1 *codebuild.DescribeTestCasesInput, _a2 ...request.Option) (*codebuild.DescribeTestCasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.DescribeTestCasesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.DescribeTestCasesInput, ...request.Option) *codebuild.DescribeTestCasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.DescribeTestCasesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.DescribeTestCasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportGroupTrend provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) GetReportGroupTrend(_a0 *codebuild.GetReportGroupTrendInput) (*codebuild.GetReportGroupTrendOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.GetReportGroupTrendOutput
	if rf, ok := ret.Get(0).(func(*codebuild.GetReportGroupTrendInput) *codebuild.GetReportGroupTrendOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.GetReportGroupTrendOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.GetReportGroupTrendInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportGroupTrendRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) GetReportGroupTrendRequest(_a0 *codebuild.GetReportGroupTrendInput) (*request.Request, *codebuild.GetReportGroupTrendOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.GetReportGroupTrendInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.GetReportGroupTrendOutput
	if rf, ok := ret.Get(1).(func(*codebuild.GetReportGroupTrendInput) *codebuild.GetReportGroupTrendOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.GetReportGroupTrendOutput)
		}
	}

	return r0, r1
}

// GetReportGroupTrendWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) GetReportGroupTrendWithContext(_a0 context.Context, _a1 *codebuild.GetReportGroupTrendInput, _a2 ...request.Option) (*codebuild.GetReportGroupTrendOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.GetReportGroupTrendOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.GetReportGroupTrendInput, ...request.Option) *codebuild.GetReportGroupTrendOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.GetReportGroupTrendOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.GetReportGroupTrendInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) GetResourcePolicy(_a0 *codebuild.GetResourcePolicyInput) (*codebuild.GetResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.GetResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*codebuild.GetResourcePolicyInput) *codebuild.GetResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.GetResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.GetResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) GetResourcePolicyRequest(_a0 *codebuild.GetResourcePolicyInput) (*request.Request, *codebuild.GetResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.GetResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.GetResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*codebuild.GetResourcePolicyInput) *codebuild.GetResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.GetResourcePolicyOutput)
		}
	}

	return r0, r1
}

// GetResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) GetResourcePolicyWithContext(_a0 context.Context, _a1 *codebuild.GetResourcePolicyInput, _a2 ...request.Option) (*codebuild.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.GetResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.GetResourcePolicyInput, ...request.Option) *codebuild.GetResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.GetResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.GetResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSourceCredentials provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ImportSourceCredentials(_a0 *codebuild.ImportSourceCredentialsInput) (*codebuild.ImportSourceCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ImportSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ImportSourceCredentialsInput) *codebuild.ImportSourceCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ImportSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ImportSourceCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSourceCredentialsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ImportSourceCredentialsRequest(_a0 *codebuild.ImportSourceCredentialsInput) (*request.Request, *codebuild.ImportSourceCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ImportSourceCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ImportSourceCredentialsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ImportSourceCredentialsInput) *codebuild.ImportSourceCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ImportSourceCredentialsOutput)
		}
	}

	return r0, r1
}

// ImportSourceCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ImportSourceCredentialsWithContext(_a0 context.Context, _a1 *codebuild.ImportSourceCredentialsInput, _a2 ...request.Option) (*codebuild.ImportSourceCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ImportSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ImportSourceCredentialsInput, ...request.Option) *codebuild.ImportSourceCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ImportSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ImportSourceCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateProjectCache provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) InvalidateProjectCache(_a0 *codebuild.InvalidateProjectCacheInput) (*codebuild.InvalidateProjectCacheOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.InvalidateProjectCacheOutput
	if rf, ok := ret.Get(0).(func(*codebuild.InvalidateProjectCacheInput) *codebuild.InvalidateProjectCacheOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.InvalidateProjectCacheOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.InvalidateProjectCacheInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateProjectCacheRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) InvalidateProjectCacheRequest(_a0 *codebuild.InvalidateProjectCacheInput) (*request.Request, *codebuild.InvalidateProjectCacheOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.InvalidateProjectCacheInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.InvalidateProjectCacheOutput
	if rf, ok := ret.Get(1).(func(*codebuild.InvalidateProjectCacheInput) *codebuild.InvalidateProjectCacheOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.InvalidateProjectCacheOutput)
		}
	}

	return r0, r1
}

// InvalidateProjectCacheWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) InvalidateProjectCacheWithContext(_a0 context.Context, _a1 *codebuild.InvalidateProjectCacheInput, _a2 ...request.Option) (*codebuild.InvalidateProjectCacheOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.InvalidateProjectCacheOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.InvalidateProjectCacheInput, ...request.Option) *codebuild.InvalidateProjectCacheOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.InvalidateProjectCacheOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.InvalidateProjectCacheInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildBatches provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildBatches(_a0 *codebuild.ListBuildBatchesInput) (*codebuild.ListBuildBatchesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListBuildBatchesOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildBatchesInput) *codebuild.ListBuildBatchesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildBatchesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildBatchesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildBatchesForProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildBatchesForProject(_a0 *codebuild.ListBuildBatchesForProjectInput) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListBuildBatchesForProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildBatchesForProjectInput) *codebuild.ListBuildBatchesForProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildBatchesForProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildBatchesForProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildBatchesForProjectPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListBuildBatchesForProjectPages(_a0 *codebuild.ListBuildBatchesForProjectInput, _a1 func(*codebuild.ListBuildBatchesForProjectOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildBatchesForProjectInput, func(*codebuild.ListBuildBatchesForProjectOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildBatchesForProjectPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListBuildBatchesForProjectPagesWithContext(_a0 context.Context, _a1 *codebuild.ListBuildBatchesForProjectInput, _a2 func(*codebuild.ListBuildBatchesForProjectOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildBatchesForProjectInput, func(*codebuild.ListBuildBatchesForProjectOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildBatchesForProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildBatchesForProjectRequest(_a0 *codebuild.ListBuildBatchesForProjectInput) (*request.Request, *codebuild.ListBuildBatchesForProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildBatchesForProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListBuildBatchesForProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildBatchesForProjectInput) *codebuild.ListBuildBatchesForProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListBuildBatchesForProjectOutput)
		}
	}

	return r0, r1
}

// ListBuildBatchesForProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListBuildBatchesForProjectWithContext(_a0 context.Context, _a1 *codebuild.ListBuildBatchesForProjectInput, _a2 ...request.Option) (*codebuild.ListBuildBatchesForProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListBuildBatchesForProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildBatchesForProjectInput, ...request.Option) *codebuild.ListBuildBatchesForProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildBatchesForProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListBuildBatchesForProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildBatchesPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListBuildBatchesPages(_a0 *codebuild.ListBuildBatchesInput, _a1 func(*codebuild.ListBuildBatchesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildBatchesInput, func(*codebuild.ListBuildBatchesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildBatchesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListBuildBatchesPagesWithContext(_a0 context.Context, _a1 *codebuild.ListBuildBatchesInput, _a2 func(*codebuild.ListBuildBatchesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildBatchesInput, func(*codebuild.ListBuildBatchesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildBatchesRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildBatchesRequest(_a0 *codebuild.ListBuildBatchesInput) (*request.Request, *codebuild.ListBuildBatchesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildBatchesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListBuildBatchesOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildBatchesInput) *codebuild.ListBuildBatchesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListBuildBatchesOutput)
		}
	}

	return r0, r1
}

// ListBuildBatchesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListBuildBatchesWithContext(_a0 context.Context, _a1 *codebuild.ListBuildBatchesInput, _a2 ...request.Option) (*codebuild.ListBuildBatchesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListBuildBatchesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildBatchesInput, ...request.Option) *codebuild.ListBuildBatchesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildBatchesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListBuildBatchesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuilds provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuilds(_a0 *codebuild.ListBuildsInput) (*codebuild.ListBuildsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListBuildsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsInput) *codebuild.ListBuildsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildsForProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildsForProject(_a0 *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListBuildsForProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsForProjectInput) *codebuild.ListBuildsForProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsForProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsForProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildsForProjectPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListBuildsForProjectPages(_a0 *codebuild.ListBuildsForProjectInput, _a1 func(*codebuild.ListBuildsForProjectOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsForProjectInput, func(*codebuild.ListBuildsForProjectOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildsForProjectPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListBuildsForProjectPagesWithContext(_a0 context.Context, _a1 *codebuild.ListBuildsForProjectInput, _a2 func(*codebuild.ListBuildsForProjectOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildsForProjectInput, func(*codebuild.ListBuildsForProjectOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildsForProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildsForProjectRequest(_a0 *codebuild.ListBuildsForProjectInput) (*request.Request, *codebuild.ListBuildsForProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsForProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListBuildsForProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsForProjectInput) *codebuild.ListBuildsForProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListBuildsForProjectOutput)
		}
	}

	return r0, r1
}

// ListBuildsForProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListBuildsForProjectWithContext(_a0 context.Context, _a1 *codebuild.ListBuildsForProjectInput, _a2 ...request.Option) (*codebuild.ListBuildsForProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListBuildsForProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildsForProjectInput, ...request.Option) *codebuild.ListBuildsForProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsForProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListBuildsForProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildsPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListBuildsPages(_a0 *codebuild.ListBuildsInput, _a1 func(*codebuild.ListBuildsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsInput, func(*codebuild.ListBuildsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListBuildsPagesWithContext(_a0 context.Context, _a1 *codebuild.ListBuildsInput, _a2 func(*codebuild.ListBuildsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildsInput, func(*codebuild.ListBuildsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuildsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListBuildsRequest(_a0 *codebuild.ListBuildsInput) (*request.Request, *codebuild.ListBuildsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListBuildsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListBuildsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListBuildsInput) *codebuild.ListBuildsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListBuildsOutput)
		}
	}

	return r0, r1
}

// ListBuildsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListBuildsWithContext(_a0 context.Context, _a1 *codebuild.ListBuildsInput, _a2 ...request.Option) (*codebuild.ListBuildsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListBuildsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListBuildsInput, ...request.Option) *codebuild.ListBuildsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListBuildsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListBuildsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCuratedEnvironmentImages provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListCuratedEnvironmentImages(_a0 *codebuild.ListCuratedEnvironmentImagesInput) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListCuratedEnvironmentImagesOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListCuratedEnvironmentImagesInput) *codebuild.ListCuratedEnvironmentImagesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListCuratedEnvironmentImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListCuratedEnvironmentImagesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCuratedEnvironmentImagesRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListCuratedEnvironmentImagesRequest(_a0 *codebuild.ListCuratedEnvironmentImagesInput) (*request.Request, *codebuild.ListCuratedEnvironmentImagesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListCuratedEnvironmentImagesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListCuratedEnvironmentImagesOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListCuratedEnvironmentImagesInput) *codebuild.ListCuratedEnvironmentImagesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListCuratedEnvironmentImagesOutput)
		}
	}

	return r0, r1
}

// ListCuratedEnvironmentImagesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListCuratedEnvironmentImagesWithContext(_a0 context.Context, _a1 *codebuild.ListCuratedEnvironmentImagesInput, _a2 ...request.Option) (*codebuild.ListCuratedEnvironmentImagesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListCuratedEnvironmentImagesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListCuratedEnvironmentImagesInput, ...request.Option) *codebuild.ListCuratedEnvironmentImagesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListCuratedEnvironmentImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListCuratedEnvironmentImagesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListProjects(_a0 *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListProjectsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListProjectsInput) *codebuild.ListProjectsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListProjectsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectsPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListProjectsPages(_a0 *codebuild.ListProjectsInput, _a1 func(*codebuild.ListProjectsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListProjectsInput, func(*codebuild.ListProjectsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProjectsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListProjectsPagesWithContext(_a0 context.Context, _a1 *codebuild.ListProjectsInput, _a2 func(*codebuild.ListProjectsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListProjectsInput, func(*codebuild.ListProjectsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProjectsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListProjectsRequest(_a0 *codebuild.ListProjectsInput) (*request.Request, *codebuild.ListProjectsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListProjectsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListProjectsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListProjectsInput) *codebuild.ListProjectsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListProjectsOutput)
		}
	}

	return r0, r1
}

// ListProjectsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListProjectsWithContext(_a0 context.Context, _a1 *codebuild.ListProjectsInput, _a2 ...request.Option) (*codebuild.ListProjectsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListProjectsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListProjectsInput, ...request.Option) *codebuild.ListProjectsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListProjectsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportGroups provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListReportGroups(_a0 *codebuild.ListReportGroupsInput) (*codebuild.ListReportGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListReportGroupsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportGroupsInput) *codebuild.ListReportGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListReportGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListReportGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListReportGroupsPages(_a0 *codebuild.ListReportGroupsInput, _a1 func(*codebuild.ListReportGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportGroupsInput, func(*codebuild.ListReportGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListReportGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListReportGroupsPagesWithContext(_a0 context.Context, _a1 *codebuild.ListReportGroupsInput, _a2 func(*codebuild.ListReportGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListReportGroupsInput, func(*codebuild.ListReportGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListReportGroupsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListReportGroupsRequest(_a0 *codebuild.ListReportGroupsInput) (*request.Request, *codebuild.ListReportGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListReportGroupsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListReportGroupsInput) *codebuild.ListReportGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListReportGroupsOutput)
		}
	}

	return r0, r1
}

// ListReportGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListReportGroupsWithContext(_a0 context.Context, _a1 *codebuild.ListReportGroupsInput, _a2 ...request.Option) (*codebuild.ListReportGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListReportGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListReportGroupsInput, ...request.Option) *codebuild.ListReportGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListReportGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListReportGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReports provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListReports(_a0 *codebuild.ListReportsInput) (*codebuild.ListReportsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListReportsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportsInput) *codebuild.ListReportsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListReportsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportsForReportGroup provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListReportsForReportGroup(_a0 *codebuild.ListReportsForReportGroupInput) (*codebuild.ListReportsForReportGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListReportsForReportGroupOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportsForReportGroupInput) *codebuild.ListReportsForReportGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListReportsForReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListReportsForReportGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportsForReportGroupPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListReportsForReportGroupPages(_a0 *codebuild.ListReportsForReportGroupInput, _a1 func(*codebuild.ListReportsForReportGroupOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportsForReportGroupInput, func(*codebuild.ListReportsForReportGroupOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListReportsForReportGroupPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListReportsForReportGroupPagesWithContext(_a0 context.Context, _a1 *codebuild.ListReportsForReportGroupInput, _a2 func(*codebuild.ListReportsForReportGroupOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListReportsForReportGroupInput, func(*codebuild.ListReportsForReportGroupOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListReportsForReportGroupRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListReportsForReportGroupRequest(_a0 *codebuild.ListReportsForReportGroupInput) (*request.Request, *codebuild.ListReportsForReportGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportsForReportGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListReportsForReportGroupOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListReportsForReportGroupInput) *codebuild.ListReportsForReportGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListReportsForReportGroupOutput)
		}
	}

	return r0, r1
}

// ListReportsForReportGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListReportsForReportGroupWithContext(_a0 context.Context, _a1 *codebuild.ListReportsForReportGroupInput, _a2 ...request.Option) (*codebuild.ListReportsForReportGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListReportsForReportGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListReportsForReportGroupInput, ...request.Option) *codebuild.ListReportsForReportGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListReportsForReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListReportsForReportGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportsPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListReportsPages(_a0 *codebuild.ListReportsInput, _a1 func(*codebuild.ListReportsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportsInput, func(*codebuild.ListReportsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListReportsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListReportsPagesWithContext(_a0 context.Context, _a1 *codebuild.ListReportsInput, _a2 func(*codebuild.ListReportsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListReportsInput, func(*codebuild.ListReportsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListReportsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListReportsRequest(_a0 *codebuild.ListReportsInput) (*request.Request, *codebuild.ListReportsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListReportsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListReportsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListReportsInput) *codebuild.ListReportsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListReportsOutput)
		}
	}

	return r0, r1
}

// ListReportsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListReportsWithContext(_a0 context.Context, _a1 *codebuild.ListReportsInput, _a2 ...request.Option) (*codebuild.ListReportsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListReportsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListReportsInput, ...request.Option) *codebuild.ListReportsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListReportsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSharedProjects provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSharedProjects(_a0 *codebuild.ListSharedProjectsInput) (*codebuild.ListSharedProjectsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListSharedProjectsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListSharedProjectsInput) *codebuild.ListSharedProjectsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSharedProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListSharedProjectsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSharedProjectsPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListSharedProjectsPages(_a0 *codebuild.ListSharedProjectsInput, _a1 func(*codebuild.ListSharedProjectsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListSharedProjectsInput, func(*codebuild.ListSharedProjectsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSharedProjectsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListSharedProjectsPagesWithContext(_a0 context.Context, _a1 *codebuild.ListSharedProjectsInput, _a2 func(*codebuild.ListSharedProjectsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListSharedProjectsInput, func(*codebuild.ListSharedProjectsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSharedProjectsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSharedProjectsRequest(_a0 *codebuild.ListSharedProjectsInput) (*request.Request, *codebuild.ListSharedProjectsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListSharedProjectsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListSharedProjectsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListSharedProjectsInput) *codebuild.ListSharedProjectsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListSharedProjectsOutput)
		}
	}

	return r0, r1
}

// ListSharedProjectsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListSharedProjectsWithContext(_a0 context.Context, _a1 *codebuild.ListSharedProjectsInput, _a2 ...request.Option) (*codebuild.ListSharedProjectsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListSharedProjectsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListSharedProjectsInput, ...request.Option) *codebuild.ListSharedProjectsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSharedProjectsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListSharedProjectsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSharedReportGroups provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSharedReportGroups(_a0 *codebuild.ListSharedReportGroupsInput) (*codebuild.ListSharedReportGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListSharedReportGroupsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListSharedReportGroupsInput) *codebuild.ListSharedReportGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSharedReportGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListSharedReportGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSharedReportGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *CodeBuildAPI) ListSharedReportGroupsPages(_a0 *codebuild.ListSharedReportGroupsInput, _a1 func(*codebuild.ListSharedReportGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*codebuild.ListSharedReportGroupsInput, func(*codebuild.ListSharedReportGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSharedReportGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CodeBuildAPI) ListSharedReportGroupsPagesWithContext(_a0 context.Context, _a1 *codebuild.ListSharedReportGroupsInput, _a2 func(*codebuild.ListSharedReportGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListSharedReportGroupsInput, func(*codebuild.ListSharedReportGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSharedReportGroupsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSharedReportGroupsRequest(_a0 *codebuild.ListSharedReportGroupsInput) (*request.Request, *codebuild.ListSharedReportGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListSharedReportGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListSharedReportGroupsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListSharedReportGroupsInput) *codebuild.ListSharedReportGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListSharedReportGroupsOutput)
		}
	}

	return r0, r1
}

// ListSharedReportGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListSharedReportGroupsWithContext(_a0 context.Context, _a1 *codebuild.ListSharedReportGroupsInput, _a2 ...request.Option) (*codebuild.ListSharedReportGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListSharedReportGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListSharedReportGroupsInput, ...request.Option) *codebuild.ListSharedReportGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSharedReportGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListSharedReportGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceCredentials provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSourceCredentials(_a0 *codebuild.ListSourceCredentialsInput) (*codebuild.ListSourceCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.ListSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(*codebuild.ListSourceCredentialsInput) *codebuild.ListSourceCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.ListSourceCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceCredentialsRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) ListSourceCredentialsRequest(_a0 *codebuild.ListSourceCredentialsInput) (*request.Request, *codebuild.ListSourceCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.ListSourceCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.ListSourceCredentialsOutput
	if rf, ok := ret.Get(1).(func(*codebuild.ListSourceCredentialsInput) *codebuild.ListSourceCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.ListSourceCredentialsOutput)
		}
	}

	return r0, r1
}

// ListSourceCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) ListSourceCredentialsWithContext(_a0 context.Context, _a1 *codebuild.ListSourceCredentialsInput, _a2 ...request.Option) (*codebuild.ListSourceCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.ListSourceCredentialsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.ListSourceCredentialsInput, ...request.Option) *codebuild.ListSourceCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.ListSourceCredentialsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.ListSourceCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) PutResourcePolicy(_a0 *codebuild.PutResourcePolicyInput) (*codebuild.PutResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*codebuild.PutResourcePolicyInput) *codebuild.PutResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.PutResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.PutResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) PutResourcePolicyRequest(_a0 *codebuild.PutResourcePolicyInput) (*request.Request, *codebuild.PutResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.PutResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.PutResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*codebuild.PutResourcePolicyInput) *codebuild.PutResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.PutResourcePolicyOutput)
		}
	}

	return r0, r1
}

// PutResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) PutResourcePolicyWithContext(_a0 context.Context, _a1 *codebuild.PutResourcePolicyInput, _a2 ...request.Option) (*codebuild.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.PutResourcePolicyInput, ...request.Option) *codebuild.PutResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.PutResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.PutResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryBuild provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) RetryBuild(_a0 *codebuild.RetryBuildInput) (*codebuild.RetryBuildOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.RetryBuildOutput
	if rf, ok := ret.Get(0).(func(*codebuild.RetryBuildInput) *codebuild.RetryBuildOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.RetryBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.RetryBuildInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryBuildBatch provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) RetryBuildBatch(_a0 *codebuild.RetryBuildBatchInput) (*codebuild.RetryBuildBatchOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.RetryBuildBatchOutput
	if rf, ok := ret.Get(0).(func(*codebuild.RetryBuildBatchInput) *codebuild.RetryBuildBatchOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.RetryBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.RetryBuildBatchInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryBuildBatchRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) RetryBuildBatchRequest(_a0 *codebuild.RetryBuildBatchInput) (*request.Request, *codebuild.RetryBuildBatchOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.RetryBuildBatchInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.RetryBuildBatchOutput
	if rf, ok := ret.Get(1).(func(*codebuild.RetryBuildBatchInput) *codebuild.RetryBuildBatchOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.RetryBuildBatchOutput)
		}
	}

	return r0, r1
}

// RetryBuildBatchWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) RetryBuildBatchWithContext(_a0 context.Context, _a1 *codebuild.RetryBuildBatchInput, _a2 ...request.Option) (*codebuild.RetryBuildBatchOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.RetryBuildBatchOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.RetryBuildBatchInput, ...request.Option) *codebuild.RetryBuildBatchOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.RetryBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.RetryBuildBatchInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryBuildRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) RetryBuildRequest(_a0 *codebuild.RetryBuildInput) (*request.Request, *codebuild.RetryBuildOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.RetryBuildInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.RetryBuildOutput
	if rf, ok := ret.Get(1).(func(*codebuild.RetryBuildInput) *codebuild.RetryBuildOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.RetryBuildOutput)
		}
	}

	return r0, r1
}

// RetryBuildWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) RetryBuildWithContext(_a0 context.Context, _a1 *codebuild.RetryBuildInput, _a2 ...request.Option) (*codebuild.RetryBuildOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.RetryBuildOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.RetryBuildInput, ...request.Option) *codebuild.RetryBuildOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.RetryBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.RetryBuildInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBuild provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StartBuild(_a0 *codebuild.StartBuildInput) (*codebuild.StartBuildOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.StartBuildOutput
	if rf, ok := ret.Get(0).(func(*codebuild.StartBuildInput) *codebuild.StartBuildOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StartBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.StartBuildInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBuildBatch provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StartBuildBatch(_a0 *codebuild.StartBuildBatchInput) (*codebuild.StartBuildBatchOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.StartBuildBatchOutput
	if rf, ok := ret.Get(0).(func(*codebuild.StartBuildBatchInput) *codebuild.StartBuildBatchOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StartBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.StartBuildBatchInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBuildBatchRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StartBuildBatchRequest(_a0 *codebuild.StartBuildBatchInput) (*request.Request, *codebuild.StartBuildBatchOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.StartBuildBatchInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.StartBuildBatchOutput
	if rf, ok := ret.Get(1).(func(*codebuild.StartBuildBatchInput) *codebuild.StartBuildBatchOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.StartBuildBatchOutput)
		}
	}

	return r0, r1
}

// StartBuildBatchWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) StartBuildBatchWithContext(_a0 context.Context, _a1 *codebuild.StartBuildBatchInput, _a2 ...request.Option) (*codebuild.StartBuildBatchOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.StartBuildBatchOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.StartBuildBatchInput, ...request.Option) *codebuild.StartBuildBatchOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StartBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.StartBuildBatchInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBuildRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StartBuildRequest(_a0 *codebuild.StartBuildInput) (*request.Request, *codebuild.StartBuildOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.StartBuildInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.StartBuildOutput
	if rf, ok := ret.Get(1).(func(*codebuild.StartBuildInput) *codebuild.StartBuildOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.StartBuildOutput)
		}
	}

	return r0, r1
}

// StartBuildWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) StartBuildWithContext(_a0 context.Context, _a1 *codebuild.StartBuildInput, _a2 ...request.Option) (*codebuild.StartBuildOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.StartBuildOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.StartBuildInput, ...request.Option) *codebuild.StartBuildOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StartBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.StartBuildInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBuild provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StopBuild(_a0 *codebuild.StopBuildInput) (*codebuild.StopBuildOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.StopBuildOutput
	if rf, ok := ret.Get(0).(func(*codebuild.StopBuildInput) *codebuild.StopBuildOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StopBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.StopBuildInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBuildBatch provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StopBuildBatch(_a0 *codebuild.StopBuildBatchInput) (*codebuild.StopBuildBatchOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.StopBuildBatchOutput
	if rf, ok := ret.Get(0).(func(*codebuild.StopBuildBatchInput) *codebuild.StopBuildBatchOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StopBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.StopBuildBatchInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBuildBatchRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StopBuildBatchRequest(_a0 *codebuild.StopBuildBatchInput) (*request.Request, *codebuild.StopBuildBatchOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.StopBuildBatchInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.StopBuildBatchOutput
	if rf, ok := ret.Get(1).(func(*codebuild.StopBuildBatchInput) *codebuild.StopBuildBatchOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.StopBuildBatchOutput)
		}
	}

	return r0, r1
}

// StopBuildBatchWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) StopBuildBatchWithContext(_a0 context.Context, _a1 *codebuild.StopBuildBatchInput, _a2 ...request.Option) (*codebuild.StopBuildBatchOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.StopBuildBatchOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.StopBuildBatchInput, ...request.Option) *codebuild.StopBuildBatchOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StopBuildBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.StopBuildBatchInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBuildRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) StopBuildRequest(_a0 *codebuild.StopBuildInput) (*request.Request, *codebuild.StopBuildOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.StopBuildInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.StopBuildOutput
	if rf, ok := ret.Get(1).(func(*codebuild.StopBuildInput) *codebuild.StopBuildOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.StopBuildOutput)
		}
	}

	return r0, r1
}

// StopBuildWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) StopBuildWithContext(_a0 context.Context, _a1 *codebuild.StopBuildInput, _a2 ...request.Option) (*codebuild.StopBuildOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.StopBuildOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.StopBuildInput, ...request.Option) *codebuild.StopBuildOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.StopBuildOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.StopBuildInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateProject(_a0 *codebuild.UpdateProjectInput) (*codebuild.UpdateProjectOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.UpdateProjectOutput
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateProjectInput) *codebuild.UpdateProjectOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateProjectInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateProjectRequest(_a0 *codebuild.UpdateProjectInput) (*request.Request, *codebuild.UpdateProjectOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateProjectInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.UpdateProjectOutput
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateProjectInput) *codebuild.UpdateProjectOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.UpdateProjectOutput)
		}
	}

	return r0, r1
}

// UpdateProjectVisibility provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateProjectVisibility(_a0 *codebuild.UpdateProjectVisibilityInput) (*codebuild.UpdateProjectVisibilityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.UpdateProjectVisibilityOutput
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateProjectVisibilityInput) *codebuild.UpdateProjectVisibilityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateProjectVisibilityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateProjectVisibilityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectVisibilityRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateProjectVisibilityRequest(_a0 *codebuild.UpdateProjectVisibilityInput) (*request.Request, *codebuild.UpdateProjectVisibilityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateProjectVisibilityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.UpdateProjectVisibilityOutput
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateProjectVisibilityInput) *codebuild.UpdateProjectVisibilityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.UpdateProjectVisibilityOutput)
		}
	}

	return r0, r1
}

// UpdateProjectVisibilityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) UpdateProjectVisibilityWithContext(_a0 context.Context, _a1 *codebuild.UpdateProjectVisibilityInput, _a2 ...request.Option) (*codebuild.UpdateProjectVisibilityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.UpdateProjectVisibilityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.UpdateProjectVisibilityInput, ...request.Option) *codebuild.UpdateProjectVisibilityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateProjectVisibilityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.UpdateProjectVisibilityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) UpdateProjectWithContext(_a0 context.Context, _a1 *codebuild.UpdateProjectInput, _a2 ...request.Option) (*codebuild.UpdateProjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.UpdateProjectOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.UpdateProjectInput, ...request.Option) *codebuild.UpdateProjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateProjectOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.UpdateProjectInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportGroup provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateReportGroup(_a0 *codebuild.UpdateReportGroupInput) (*codebuild.UpdateReportGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.UpdateReportGroupOutput
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateReportGroupInput) *codebuild.UpdateReportGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateReportGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportGroupRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateReportGroupRequest(_a0 *codebuild.UpdateReportGroupInput) (*request.Request, *codebuild.UpdateReportGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateReportGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.UpdateReportGroupOutput
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateReportGroupInput) *codebuild.UpdateReportGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.UpdateReportGroupOutput)
		}
	}

	return r0, r1
}

// UpdateReportGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) UpdateReportGroupWithContext(_a0 context.Context, _a1 *codebuild.UpdateReportGroupInput, _a2 ...request.Option) (*codebuild.UpdateReportGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.UpdateReportGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.UpdateReportGroupInput, ...request.Option) *codebuild.UpdateReportGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateReportGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.UpdateReportGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebhook provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateWebhook(_a0 *codebuild.UpdateWebhookInput) (*codebuild.UpdateWebhookOutput, error) {
	ret := _m.Called(_a0)

	var r0 *codebuild.UpdateWebhookOutput
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateWebhookInput) *codebuild.UpdateWebhookOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateWebhookInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebhookRequest provides a mock function with given fields: _a0
func (_m *CodeBuildAPI) UpdateWebhookRequest(_a0 *codebuild.UpdateWebhookInput) (*request.Request, *codebuild.UpdateWebhookOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*codebuild.UpdateWebhookInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *codebuild.UpdateWebhookOutput
	if rf, ok := ret.Get(1).(func(*codebuild.UpdateWebhookInput) *codebuild.UpdateWebhookOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*codebuild.UpdateWebhookOutput)
		}
	}

	return r0, r1
}

// UpdateWebhookWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CodeBuildAPI) UpdateWebhookWithContext(_a0 context.Context, _a1 *codebuild.UpdateWebhookInput, _a2 ...request.Option) (*codebuild.UpdateWebhookOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *codebuild.UpdateWebhookOutput
	if rf, ok := ret.Get(0).(func(context.Context, *codebuild.UpdateWebhookInput, ...request.Option) *codebuild.UpdateWebhookOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codebuild.UpdateWebhookOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *codebuild.UpdateWebhookInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCodeBuildAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewCodeBuildAPI creates a new instance of CodeBuildAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCodeBuildAPI(t mockConstructorTestingTNewCodeBuildAPI) *CodeBuildAPI {
	mock := &CodeBuildAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
