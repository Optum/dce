// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	costexplorer "github.com/aws/aws-sdk-go/service/costexplorer"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// CostExplorerAPI is an autogenerated mock type for the CostExplorerAPI type
type CostExplorerAPI struct {
	mock.Mock
}

// GetCostAndUsage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsage(_a0 *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageInput) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageRequest(_a0 *costexplorer.GetCostAndUsageInput) (*request.Request, *costexplorer.GetCostAndUsageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageInput) *costexplorer.GetCostAndUsageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	return r0, r1
}

// GetCostAndUsageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostAndUsageWithContext(_a0 context.Context, _a1 *costexplorer.GetCostAndUsageInput, _a2 ...request.Option) (*costexplorer.GetCostAndUsageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...request.Option) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecast provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostForecast(_a0 *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostForecastInput) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostForecastInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecastRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostForecastRequest(_a0 *costexplorer.GetCostForecastInput) (*request.Request, *costexplorer.GetCostForecastOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostForecastInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostForecastInput) *costexplorer.GetCostForecastOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostForecastOutput)
		}
	}

	return r0, r1
}

// GetCostForecastWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostForecastWithContext(_a0 context.Context, _a1 *costexplorer.GetCostForecastInput, _a2 ...request.Option) (*costexplorer.GetCostForecastOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostForecastInput, ...request.Option) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostForecastInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValues provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetDimensionValues(_a0 *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetDimensionValuesInput) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetDimensionValuesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValuesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetDimensionValuesRequest(_a0 *costexplorer.GetDimensionValuesInput) (*request.Request, *costexplorer.GetDimensionValuesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetDimensionValuesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetDimensionValuesInput) *costexplorer.GetDimensionValuesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	return r0, r1
}

// GetDimensionValuesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetDimensionValuesWithContext(_a0 context.Context, _a1 *costexplorer.GetDimensionValuesInput, _a2 ...request.Option) (*costexplorer.GetDimensionValuesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...request.Option) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationCoverage(_a0 *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationCoverageInput) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationCoverageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationCoverageRequest(_a0 *costexplorer.GetReservationCoverageInput) (*request.Request, *costexplorer.GetReservationCoverageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationCoverageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationCoverageInput) *costexplorer.GetReservationCoverageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	return r0, r1
}

// GetReservationCoverageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationCoverageWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationCoverageInput, _a2 ...request.Option) (*costexplorer.GetReservationCoverageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...request.Option) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendation(_a0 *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationPurchaseRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendationRequest(_a0 *costexplorer.GetReservationPurchaseRecommendationInput) (*request.Request, *costexplorer.GetReservationPurchaseRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	return r0, r1
}

// GetReservationPurchaseRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationPurchaseRecommendationInput, _a2 ...request.Option) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...request.Option) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilization provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationUtilization(_a0 *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationUtilizationInput) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationUtilizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilizationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationUtilizationRequest(_a0 *costexplorer.GetReservationUtilizationInput) (*request.Request, *costexplorer.GetReservationUtilizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationUtilizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationUtilizationInput) *costexplorer.GetReservationUtilizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	return r0, r1
}

// GetReservationUtilizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationUtilizationWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationUtilizationInput, _a2 ...request.Option) (*costexplorer.GetReservationUtilizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...request.Option) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetTags(_a0 *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetTagsInput) *costexplorer.GetTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetTagsRequest(_a0 *costexplorer.GetTagsInput) (*request.Request, *costexplorer.GetTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetTagsInput) *costexplorer.GetTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetTagsOutput)
		}
	}

	return r0, r1
}

// GetTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetTagsWithContext(_a0 context.Context, _a1 *costexplorer.GetTagsInput, _a2 ...request.Option) (*costexplorer.GetTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetTagsInput, ...request.Option) *costexplorer.GetTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
