// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudwatchevents "github.com/aws/aws-sdk-go/service/cloudwatchevents"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// CloudWatchEventsAPI is an autogenerated mock type for the CloudWatchEventsAPI type
type CloudWatchEventsAPI struct {
	mock.Mock
}

// ActivateEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ActivateEventSource(_a0 *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ActivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ActivateEventSourceInput) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ActivateEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ActivateEventSourceRequest(_a0 *cloudwatchevents.ActivateEventSourceInput) (*request.Request, *cloudwatchevents.ActivateEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ActivateEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ActivateEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ActivateEventSourceInput) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	return r0, r1
}

// ActivateEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ActivateEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.ActivateEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ActivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...request.Option) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReplay provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CancelReplay(_a0 *cloudwatchevents.CancelReplayInput) (*cloudwatchevents.CancelReplayOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CancelReplayOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CancelReplayInput) *cloudwatchevents.CancelReplayOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CancelReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CancelReplayInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReplayRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CancelReplayRequest(_a0 *cloudwatchevents.CancelReplayInput) (*request.Request, *cloudwatchevents.CancelReplayOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CancelReplayInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CancelReplayOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CancelReplayInput) *cloudwatchevents.CancelReplayOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CancelReplayOutput)
		}
	}

	return r0, r1
}

// CancelReplayWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CancelReplayWithContext(_a0 context.Context, _a1 *cloudwatchevents.CancelReplayInput, _a2 ...request.Option) (*cloudwatchevents.CancelReplayOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CancelReplayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CancelReplayInput, ...request.Option) *cloudwatchevents.CancelReplayOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CancelReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CancelReplayInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiDestination provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateApiDestination(_a0 *cloudwatchevents.CreateApiDestinationInput) (*cloudwatchevents.CreateApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateApiDestinationInput) *cloudwatchevents.CreateApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateApiDestinationRequest(_a0 *cloudwatchevents.CreateApiDestinationInput) (*request.Request, *cloudwatchevents.CreateApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreateApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateApiDestinationInput) *cloudwatchevents.CreateApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreateApiDestinationOutput)
		}
	}

	return r0, r1
}

// CreateApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreateApiDestinationWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreateApiDestinationInput, _a2 ...request.Option) (*cloudwatchevents.CreateApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateApiDestinationInput, ...request.Option) *cloudwatchevents.CreateApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchive provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateArchive(_a0 *cloudwatchevents.CreateArchiveInput) (*cloudwatchevents.CreateArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreateArchiveOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateArchiveInput) *cloudwatchevents.CreateArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchiveRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateArchiveRequest(_a0 *cloudwatchevents.CreateArchiveInput) (*request.Request, *cloudwatchevents.CreateArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreateArchiveOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateArchiveInput) *cloudwatchevents.CreateArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreateArchiveOutput)
		}
	}

	return r0, r1
}

// CreateArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreateArchiveWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreateArchiveInput, _a2 ...request.Option) (*cloudwatchevents.CreateArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreateArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateArchiveInput, ...request.Option) *cloudwatchevents.CreateArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateConnection(_a0 *cloudwatchevents.CreateConnectionInput) (*cloudwatchevents.CreateConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreateConnectionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateConnectionInput) *cloudwatchevents.CreateConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateConnectionRequest(_a0 *cloudwatchevents.CreateConnectionInput) (*request.Request, *cloudwatchevents.CreateConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreateConnectionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateConnectionInput) *cloudwatchevents.CreateConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreateConnectionOutput)
		}
	}

	return r0, r1
}

// CreateConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreateConnectionWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreateConnectionInput, _a2 ...request.Option) (*cloudwatchevents.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreateConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateConnectionInput, ...request.Option) *cloudwatchevents.CreateConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateEventBus(_a0 *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreateEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateEventBusInput) *cloudwatchevents.CreateEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreateEventBusRequest(_a0 *cloudwatchevents.CreateEventBusInput) (*request.Request, *cloudwatchevents.CreateEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreateEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreateEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreateEventBusInput) *cloudwatchevents.CreateEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	return r0, r1
}

// CreateEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreateEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreateEventBusInput, _a2 ...request.Option) (*cloudwatchevents.CreateEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreateEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...request.Option) *cloudwatchevents.CreateEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreatePartnerEventSource(_a0 *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreatePartnerEventSourceInput) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreatePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) CreatePartnerEventSourceRequest(_a0 *cloudwatchevents.CreatePartnerEventSourceInput) (*request.Request, *cloudwatchevents.CreatePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.CreatePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.CreatePartnerEventSourceInput) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// CreatePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) CreatePartnerEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.CreatePartnerEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.CreatePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...request.Option) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeactivateEventSource(_a0 *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeactivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeactivateEventSourceInput) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeactivateEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeactivateEventSourceRequest(_a0 *cloudwatchevents.DeactivateEventSourceInput) (*request.Request, *cloudwatchevents.DeactivateEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeactivateEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeactivateEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeactivateEventSourceInput) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	return r0, r1
}

// DeactivateEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeactivateEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeactivateEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeactivateEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...request.Option) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeauthorizeConnection provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeauthorizeConnection(_a0 *cloudwatchevents.DeauthorizeConnectionInput) (*cloudwatchevents.DeauthorizeConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeauthorizeConnectionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeauthorizeConnectionInput) *cloudwatchevents.DeauthorizeConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeauthorizeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeauthorizeConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeauthorizeConnectionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeauthorizeConnectionRequest(_a0 *cloudwatchevents.DeauthorizeConnectionInput) (*request.Request, *cloudwatchevents.DeauthorizeConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeauthorizeConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeauthorizeConnectionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeauthorizeConnectionInput) *cloudwatchevents.DeauthorizeConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeauthorizeConnectionOutput)
		}
	}

	return r0, r1
}

// DeauthorizeConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeauthorizeConnectionWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeauthorizeConnectionInput, _a2 ...request.Option) (*cloudwatchevents.DeauthorizeConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeauthorizeConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeauthorizeConnectionInput, ...request.Option) *cloudwatchevents.DeauthorizeConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeauthorizeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeauthorizeConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiDestination provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteApiDestination(_a0 *cloudwatchevents.DeleteApiDestinationInput) (*cloudwatchevents.DeleteApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteApiDestinationInput) *cloudwatchevents.DeleteApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteApiDestinationRequest(_a0 *cloudwatchevents.DeleteApiDestinationInput) (*request.Request, *cloudwatchevents.DeleteApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteApiDestinationInput) *cloudwatchevents.DeleteApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteApiDestinationOutput)
		}
	}

	return r0, r1
}

// DeleteApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteApiDestinationWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteApiDestinationInput, _a2 ...request.Option) (*cloudwatchevents.DeleteApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteApiDestinationInput, ...request.Option) *cloudwatchevents.DeleteApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchive provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteArchive(_a0 *cloudwatchevents.DeleteArchiveInput) (*cloudwatchevents.DeleteArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteArchiveOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteArchiveInput) *cloudwatchevents.DeleteArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchiveRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteArchiveRequest(_a0 *cloudwatchevents.DeleteArchiveInput) (*request.Request, *cloudwatchevents.DeleteArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteArchiveOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteArchiveInput) *cloudwatchevents.DeleteArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteArchiveOutput)
		}
	}

	return r0, r1
}

// DeleteArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteArchiveWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteArchiveInput, _a2 ...request.Option) (*cloudwatchevents.DeleteArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteArchiveInput, ...request.Option) *cloudwatchevents.DeleteArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteConnection(_a0 *cloudwatchevents.DeleteConnectionInput) (*cloudwatchevents.DeleteConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteConnectionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteConnectionInput) *cloudwatchevents.DeleteConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteConnectionRequest(_a0 *cloudwatchevents.DeleteConnectionInput) (*request.Request, *cloudwatchevents.DeleteConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteConnectionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteConnectionInput) *cloudwatchevents.DeleteConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteConnectionOutput)
		}
	}

	return r0, r1
}

// DeleteConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteConnectionWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteConnectionInput, _a2 ...request.Option) (*cloudwatchevents.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteConnectionInput, ...request.Option) *cloudwatchevents.DeleteConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteEventBus(_a0 *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteEventBusInput) *cloudwatchevents.DeleteEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteEventBusRequest(_a0 *cloudwatchevents.DeleteEventBusInput) (*request.Request, *cloudwatchevents.DeleteEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteEventBusInput) *cloudwatchevents.DeleteEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	return r0, r1
}

// DeleteEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteEventBusInput, _a2 ...request.Option) (*cloudwatchevents.DeleteEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...request.Option) *cloudwatchevents.DeleteEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeletePartnerEventSource(_a0 *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeletePartnerEventSourceInput) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeletePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeletePartnerEventSourceRequest(_a0 *cloudwatchevents.DeletePartnerEventSourceInput) (*request.Request, *cloudwatchevents.DeletePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeletePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeletePartnerEventSourceInput) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// DeletePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeletePartnerEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeletePartnerEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeletePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...request.Option) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteRule(_a0 *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteRuleInput) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DeleteRuleRequest(_a0 *cloudwatchevents.DeleteRuleInput) (*request.Request, *cloudwatchevents.DeleteRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DeleteRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DeleteRuleInput) *cloudwatchevents.DeleteRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DeleteRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DeleteRuleInput, _a2 ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...request.Option) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApiDestination provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeApiDestination(_a0 *cloudwatchevents.DescribeApiDestinationInput) (*cloudwatchevents.DescribeApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeApiDestinationInput) *cloudwatchevents.DescribeApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApiDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeApiDestinationRequest(_a0 *cloudwatchevents.DescribeApiDestinationInput) (*request.Request, *cloudwatchevents.DescribeApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeApiDestinationInput) *cloudwatchevents.DescribeApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeApiDestinationOutput)
		}
	}

	return r0, r1
}

// DescribeApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeApiDestinationWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeApiDestinationInput, _a2 ...request.Option) (*cloudwatchevents.DescribeApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeApiDestinationInput, ...request.Option) *cloudwatchevents.DescribeApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeArchive provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeArchive(_a0 *cloudwatchevents.DescribeArchiveInput) (*cloudwatchevents.DescribeArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeArchiveOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeArchiveInput) *cloudwatchevents.DescribeArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeArchiveRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeArchiveRequest(_a0 *cloudwatchevents.DescribeArchiveInput) (*request.Request, *cloudwatchevents.DescribeArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeArchiveOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeArchiveInput) *cloudwatchevents.DescribeArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeArchiveOutput)
		}
	}

	return r0, r1
}

// DescribeArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeArchiveWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeArchiveInput, _a2 ...request.Option) (*cloudwatchevents.DescribeArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeArchiveInput, ...request.Option) *cloudwatchevents.DescribeArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnection provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeConnection(_a0 *cloudwatchevents.DescribeConnectionInput) (*cloudwatchevents.DescribeConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeConnectionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeConnectionInput) *cloudwatchevents.DescribeConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeConnectionRequest(_a0 *cloudwatchevents.DescribeConnectionInput) (*request.Request, *cloudwatchevents.DescribeConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeConnectionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeConnectionInput) *cloudwatchevents.DescribeConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeConnectionOutput)
		}
	}

	return r0, r1
}

// DescribeConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeConnectionWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeConnectionInput, _a2 ...request.Option) (*cloudwatchevents.DescribeConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeConnectionInput, ...request.Option) *cloudwatchevents.DescribeConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBus provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventBus(_a0 *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventBusInput) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventBusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBusRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventBusRequest(_a0 *cloudwatchevents.DescribeEventBusInput) (*request.Request, *cloudwatchevents.DescribeEventBusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventBusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventBusInput) *cloudwatchevents.DescribeEventBusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	return r0, r1
}

// DescribeEventBusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeEventBusWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeEventBusInput, _a2 ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeEventBusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...request.Option) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventSource(_a0 *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventSourceInput) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeEventSourceRequest(_a0 *cloudwatchevents.DescribeEventSourceInput) (*request.Request, *cloudwatchevents.DescribeEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeEventSourceInput) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	return r0, r1
}

// DescribeEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...request.Option) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribePartnerEventSource(_a0 *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribePartnerEventSourceInput) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribePartnerEventSourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribePartnerEventSourceRequest(_a0 *cloudwatchevents.DescribePartnerEventSourceInput) (*request.Request, *cloudwatchevents.DescribePartnerEventSourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribePartnerEventSourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribePartnerEventSourceInput) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	return r0, r1
}

// DescribePartnerEventSourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribePartnerEventSourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribePartnerEventSourceInput, _a2 ...request.Option) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribePartnerEventSourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...request.Option) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplay provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeReplay(_a0 *cloudwatchevents.DescribeReplayInput) (*cloudwatchevents.DescribeReplayOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeReplayOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeReplayInput) *cloudwatchevents.DescribeReplayOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeReplayInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplayRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeReplayRequest(_a0 *cloudwatchevents.DescribeReplayInput) (*request.Request, *cloudwatchevents.DescribeReplayOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeReplayInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeReplayOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeReplayInput) *cloudwatchevents.DescribeReplayOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeReplayOutput)
		}
	}

	return r0, r1
}

// DescribeReplayWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeReplayWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeReplayInput, _a2 ...request.Option) (*cloudwatchevents.DescribeReplayOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeReplayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeReplayInput, ...request.Option) *cloudwatchevents.DescribeReplayOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeReplayInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeRule(_a0 *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeRuleInput) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DescribeRuleRequest(_a0 *cloudwatchevents.DescribeRuleInput) (*request.Request, *cloudwatchevents.DescribeRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DescribeRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DescribeRuleInput) *cloudwatchevents.DescribeRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	return r0, r1
}

// DescribeRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DescribeRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DescribeRuleInput, _a2 ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DescribeRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...request.Option) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DisableRule(_a0 *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DisableRuleInput) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DisableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) DisableRuleRequest(_a0 *cloudwatchevents.DisableRuleInput) (*request.Request, *cloudwatchevents.DisableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.DisableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.DisableRuleInput) *cloudwatchevents.DisableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	return r0, r1
}

// DisableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) DisableRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.DisableRuleInput, _a2 ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.DisableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...request.Option) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) EnableRule(_a0 *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.EnableRuleInput) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.EnableRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) EnableRuleRequest(_a0 *cloudwatchevents.EnableRuleInput) (*request.Request, *cloudwatchevents.EnableRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.EnableRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.EnableRuleInput) *cloudwatchevents.EnableRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	return r0, r1
}

// EnableRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) EnableRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.EnableRuleInput, _a2 ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.EnableRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...request.Option) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiDestinations provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListApiDestinations(_a0 *cloudwatchevents.ListApiDestinationsInput) (*cloudwatchevents.ListApiDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListApiDestinationsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListApiDestinationsInput) *cloudwatchevents.ListApiDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListApiDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListApiDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiDestinationsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListApiDestinationsRequest(_a0 *cloudwatchevents.ListApiDestinationsInput) (*request.Request, *cloudwatchevents.ListApiDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListApiDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListApiDestinationsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListApiDestinationsInput) *cloudwatchevents.ListApiDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListApiDestinationsOutput)
		}
	}

	return r0, r1
}

// ListApiDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListApiDestinationsWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListApiDestinationsInput, _a2 ...request.Option) (*cloudwatchevents.ListApiDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListApiDestinationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListApiDestinationsInput, ...request.Option) *cloudwatchevents.ListApiDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListApiDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListApiDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchives provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListArchives(_a0 *cloudwatchevents.ListArchivesInput) (*cloudwatchevents.ListArchivesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListArchivesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListArchivesInput) *cloudwatchevents.ListArchivesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListArchivesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListArchivesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchivesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListArchivesRequest(_a0 *cloudwatchevents.ListArchivesInput) (*request.Request, *cloudwatchevents.ListArchivesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListArchivesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListArchivesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListArchivesInput) *cloudwatchevents.ListArchivesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListArchivesOutput)
		}
	}

	return r0, r1
}

// ListArchivesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListArchivesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListArchivesInput, _a2 ...request.Option) (*cloudwatchevents.ListArchivesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListArchivesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListArchivesInput, ...request.Option) *cloudwatchevents.ListArchivesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListArchivesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListArchivesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnections provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListConnections(_a0 *cloudwatchevents.ListConnectionsInput) (*cloudwatchevents.ListConnectionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListConnectionsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListConnectionsInput) *cloudwatchevents.ListConnectionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListConnectionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectionsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListConnectionsRequest(_a0 *cloudwatchevents.ListConnectionsInput) (*request.Request, *cloudwatchevents.ListConnectionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListConnectionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListConnectionsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListConnectionsInput) *cloudwatchevents.ListConnectionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListConnectionsOutput)
		}
	}

	return r0, r1
}

// ListConnectionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListConnectionsWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListConnectionsInput, _a2 ...request.Option) (*cloudwatchevents.ListConnectionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListConnectionsInput, ...request.Option) *cloudwatchevents.ListConnectionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBuses provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventBuses(_a0 *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListEventBusesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventBusesInput) *cloudwatchevents.ListEventBusesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventBusesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBusesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventBusesRequest(_a0 *cloudwatchevents.ListEventBusesInput) (*request.Request, *cloudwatchevents.ListEventBusesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventBusesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListEventBusesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventBusesInput) *cloudwatchevents.ListEventBusesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	return r0, r1
}

// ListEventBusesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListEventBusesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListEventBusesInput, _a2 ...request.Option) (*cloudwatchevents.ListEventBusesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListEventBusesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...request.Option) *cloudwatchevents.ListEventBusesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSources provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventSources(_a0 *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListEventSourcesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventSourcesInput) *cloudwatchevents.ListEventSourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventSourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSourcesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListEventSourcesRequest(_a0 *cloudwatchevents.ListEventSourcesInput) (*request.Request, *cloudwatchevents.ListEventSourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListEventSourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListEventSourcesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListEventSourcesInput) *cloudwatchevents.ListEventSourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	return r0, r1
}

// ListEventSourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListEventSourcesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListEventSourcesInput, _a2 ...request.Option) (*cloudwatchevents.ListEventSourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListEventSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...request.Option) *cloudwatchevents.ListEventSourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccounts provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSourceAccounts(_a0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccountsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSourceAccountsRequest(_a0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*request.Request, *cloudwatchevents.ListPartnerEventSourceAccountsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourceAccountsInput) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	return r0, r1
}

// ListPartnerEventSourceAccountsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListPartnerEventSourceAccountsWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListPartnerEventSourceAccountsInput, _a2 ...request.Option) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...request.Option) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSources provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSources(_a0 *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourcesInput) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourcesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListPartnerEventSourcesRequest(_a0 *cloudwatchevents.ListPartnerEventSourcesInput) (*request.Request, *cloudwatchevents.ListPartnerEventSourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListPartnerEventSourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListPartnerEventSourcesInput) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	return r0, r1
}

// ListPartnerEventSourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListPartnerEventSourcesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListPartnerEventSourcesInput, _a2 ...request.Option) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListPartnerEventSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...request.Option) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplays provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListReplays(_a0 *cloudwatchevents.ListReplaysInput) (*cloudwatchevents.ListReplaysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListReplaysOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListReplaysInput) *cloudwatchevents.ListReplaysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListReplaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListReplaysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplaysRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListReplaysRequest(_a0 *cloudwatchevents.ListReplaysInput) (*request.Request, *cloudwatchevents.ListReplaysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListReplaysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListReplaysOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListReplaysInput) *cloudwatchevents.ListReplaysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListReplaysOutput)
		}
	}

	return r0, r1
}

// ListReplaysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListReplaysWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListReplaysInput, _a2 ...request.Option) (*cloudwatchevents.ListReplaysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListReplaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListReplaysInput, ...request.Option) *cloudwatchevents.ListReplaysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListReplaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListReplaysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTarget provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRuleNamesByTarget(_a0 *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRuleNamesByTargetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTargetRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRuleNamesByTargetRequest(_a0 *cloudwatchevents.ListRuleNamesByTargetInput) (*request.Request, *cloudwatchevents.ListRuleNamesByTargetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRuleNamesByTargetInput) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	return r0, r1
}

// ListRuleNamesByTargetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListRuleNamesByTargetWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListRuleNamesByTargetInput, _a2 ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...request.Option) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRules(_a0 *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRulesInput) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRulesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRulesRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListRulesRequest(_a0 *cloudwatchevents.ListRulesInput) (*request.Request, *cloudwatchevents.ListRulesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListRulesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListRulesInput) *cloudwatchevents.ListRulesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListRulesOutput)
		}
	}

	return r0, r1
}

// ListRulesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListRulesWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListRulesInput, _a2 ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRulesInput, ...request.Option) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRulesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTagsForResource(_a0 *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTagsForResourceInput) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTagsForResourceRequest(_a0 *cloudwatchevents.ListTagsForResourceInput) (*request.Request, *cloudwatchevents.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTagsForResourceInput) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListTagsForResourceInput, _a2 ...request.Option) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...request.Option) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTargetsByRule(_a0 *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTargetsByRuleInput) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTargetsByRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) ListTargetsByRuleRequest(_a0 *cloudwatchevents.ListTargetsByRuleInput) (*request.Request, *cloudwatchevents.ListTargetsByRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.ListTargetsByRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.ListTargetsByRuleInput) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	return r0, r1
}

// ListTargetsByRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) ListTargetsByRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.ListTargetsByRuleInput, _a2 ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...request.Option) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvents provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutEvents(_a0 *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutEventsInput) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutEventsRequest(_a0 *cloudwatchevents.PutEventsInput) (*request.Request, *cloudwatchevents.PutEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutEventsInput) *cloudwatchevents.PutEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutEventsOutput)
		}
	}

	return r0, r1
}

// PutEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutEventsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutEventsInput, _a2 ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutEventsInput, ...request.Option) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEvents provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPartnerEvents(_a0 *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutPartnerEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPartnerEventsInput) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPartnerEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEventsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPartnerEventsRequest(_a0 *cloudwatchevents.PutPartnerEventsInput) (*request.Request, *cloudwatchevents.PutPartnerEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPartnerEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutPartnerEventsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPartnerEventsInput) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	return r0, r1
}

// PutPartnerEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutPartnerEventsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutPartnerEventsInput, _a2 ...request.Option) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutPartnerEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...request.Option) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermission provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPermission(_a0 *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPermissionInput) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutPermissionRequest(_a0 *cloudwatchevents.PutPermissionInput) (*request.Request, *cloudwatchevents.PutPermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutPermissionInput) *cloudwatchevents.PutPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	return r0, r1
}

// PutPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutPermissionWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutPermissionInput, _a2 ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutPermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...request.Option) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRule provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutRule(_a0 *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutRuleInput) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRuleRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutRuleRequest(_a0 *cloudwatchevents.PutRuleInput) (*request.Request, *cloudwatchevents.PutRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutRuleInput) *cloudwatchevents.PutRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutRuleOutput)
		}
	}

	return r0, r1
}

// PutRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutRuleWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutRuleInput, _a2 ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutRuleInput, ...request.Option) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargets provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutTargets(_a0 *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutTargetsInput) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargetsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) PutTargetsRequest(_a0 *cloudwatchevents.PutTargetsInput) (*request.Request, *cloudwatchevents.PutTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.PutTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.PutTargetsInput) *cloudwatchevents.PutTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	return r0, r1
}

// PutTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) PutTargetsWithContext(_a0 context.Context, _a1 *cloudwatchevents.PutTargetsInput, _a2 ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.PutTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...request.Option) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemovePermission(_a0 *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemovePermissionInput) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemovePermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermissionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemovePermissionRequest(_a0 *cloudwatchevents.RemovePermissionInput) (*request.Request, *cloudwatchevents.RemovePermissionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemovePermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemovePermissionInput) *cloudwatchevents.RemovePermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	return r0, r1
}

// RemovePermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) RemovePermissionWithContext(_a0 context.Context, _a1 *cloudwatchevents.RemovePermissionInput, _a2 ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...request.Option) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargets provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemoveTargets(_a0 *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemoveTargetsInput) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemoveTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargetsRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) RemoveTargetsRequest(_a0 *cloudwatchevents.RemoveTargetsInput) (*request.Request, *cloudwatchevents.RemoveTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.RemoveTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.RemoveTargetsInput) *cloudwatchevents.RemoveTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	return r0, r1
}

// RemoveTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) RemoveTargetsWithContext(_a0 context.Context, _a1 *cloudwatchevents.RemoveTargetsInput, _a2 ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.RemoveTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...request.Option) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplay provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) StartReplay(_a0 *cloudwatchevents.StartReplayInput) (*cloudwatchevents.StartReplayOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.StartReplayOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.StartReplayInput) *cloudwatchevents.StartReplayOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.StartReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.StartReplayInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplayRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) StartReplayRequest(_a0 *cloudwatchevents.StartReplayInput) (*request.Request, *cloudwatchevents.StartReplayOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.StartReplayInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.StartReplayOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.StartReplayInput) *cloudwatchevents.StartReplayOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.StartReplayOutput)
		}
	}

	return r0, r1
}

// StartReplayWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) StartReplayWithContext(_a0 context.Context, _a1 *cloudwatchevents.StartReplayInput, _a2 ...request.Option) (*cloudwatchevents.StartReplayOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.StartReplayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.StartReplayInput, ...request.Option) *cloudwatchevents.StartReplayOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.StartReplayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.StartReplayInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TagResource(_a0 *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TagResourceInput) *cloudwatchevents.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TagResourceRequest(_a0 *cloudwatchevents.TagResourceInput) (*request.Request, *cloudwatchevents.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TagResourceInput) *cloudwatchevents.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) TagResourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.TagResourceInput, _a2 ...request.Option) (*cloudwatchevents.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TagResourceInput, ...request.Option) *cloudwatchevents.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPattern provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TestEventPattern(_a0 *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TestEventPatternInput) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TestEventPatternInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPatternRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) TestEventPatternRequest(_a0 *cloudwatchevents.TestEventPatternInput) (*request.Request, *cloudwatchevents.TestEventPatternOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.TestEventPatternInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.TestEventPatternInput) *cloudwatchevents.TestEventPatternOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	return r0, r1
}

// TestEventPatternWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) TestEventPatternWithContext(_a0 context.Context, _a1 *cloudwatchevents.TestEventPatternInput, _a2 ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.TestEventPatternOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...request.Option) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UntagResource(_a0 *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UntagResourceInput) *cloudwatchevents.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UntagResourceRequest(_a0 *cloudwatchevents.UntagResourceInput) (*request.Request, *cloudwatchevents.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UntagResourceInput) *cloudwatchevents.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) UntagResourceWithContext(_a0 context.Context, _a1 *cloudwatchevents.UntagResourceInput, _a2 ...request.Option) (*cloudwatchevents.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...request.Option) *cloudwatchevents.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiDestination provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UpdateApiDestination(_a0 *cloudwatchevents.UpdateApiDestinationInput) (*cloudwatchevents.UpdateApiDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.UpdateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UpdateApiDestinationInput) *cloudwatchevents.UpdateApiDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UpdateApiDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiDestinationRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UpdateApiDestinationRequest(_a0 *cloudwatchevents.UpdateApiDestinationInput) (*request.Request, *cloudwatchevents.UpdateApiDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UpdateApiDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.UpdateApiDestinationOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UpdateApiDestinationInput) *cloudwatchevents.UpdateApiDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.UpdateApiDestinationOutput)
		}
	}

	return r0, r1
}

// UpdateApiDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) UpdateApiDestinationWithContext(_a0 context.Context, _a1 *cloudwatchevents.UpdateApiDestinationInput, _a2 ...request.Option) (*cloudwatchevents.UpdateApiDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.UpdateApiDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateApiDestinationInput, ...request.Option) *cloudwatchevents.UpdateApiDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateApiDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UpdateApiDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArchive provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UpdateArchive(_a0 *cloudwatchevents.UpdateArchiveInput) (*cloudwatchevents.UpdateArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.UpdateArchiveOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UpdateArchiveInput) *cloudwatchevents.UpdateArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UpdateArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArchiveRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UpdateArchiveRequest(_a0 *cloudwatchevents.UpdateArchiveInput) (*request.Request, *cloudwatchevents.UpdateArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UpdateArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.UpdateArchiveOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UpdateArchiveInput) *cloudwatchevents.UpdateArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.UpdateArchiveOutput)
		}
	}

	return r0, r1
}

// UpdateArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) UpdateArchiveWithContext(_a0 context.Context, _a1 *cloudwatchevents.UpdateArchiveInput, _a2 ...request.Option) (*cloudwatchevents.UpdateArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.UpdateArchiveOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateArchiveInput, ...request.Option) *cloudwatchevents.UpdateArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UpdateArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UpdateConnection(_a0 *cloudwatchevents.UpdateConnectionInput) (*cloudwatchevents.UpdateConnectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchevents.UpdateConnectionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UpdateConnectionInput) *cloudwatchevents.UpdateConnectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UpdateConnectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectionRequest provides a mock function with given fields: _a0
func (_m *CloudWatchEventsAPI) UpdateConnectionRequest(_a0 *cloudwatchevents.UpdateConnectionInput) (*request.Request, *cloudwatchevents.UpdateConnectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*cloudwatchevents.UpdateConnectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *cloudwatchevents.UpdateConnectionOutput
	if rf, ok := ret.Get(1).(func(*cloudwatchevents.UpdateConnectionInput) *cloudwatchevents.UpdateConnectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchevents.UpdateConnectionOutput)
		}
	}

	return r0, r1
}

// UpdateConnectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CloudWatchEventsAPI) UpdateConnectionWithContext(_a0 context.Context, _a1 *cloudwatchevents.UpdateConnectionInput, _a2 ...request.Option) (*cloudwatchevents.UpdateConnectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchevents.UpdateConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateConnectionInput, ...request.Option) *cloudwatchevents.UpdateConnectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UpdateConnectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCloudWatchEventsAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloudWatchEventsAPI creates a new instance of CloudWatchEventsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloudWatchEventsAPI(t mockConstructorTestingTNewCloudWatchEventsAPI) *CloudWatchEventsAPI {
	mock := &CloudWatchEventsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
