// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import costexplorer "github.com/aws/aws-sdk-go/service/costexplorer"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// CostExplorerAPI is an autogenerated mock type for the CostExplorerAPI type
type CostExplorerAPI struct {
	mock.Mock
}

// GetCostAndUsage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsage(_a0 *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageInput) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageRequest(_a0 *costexplorer.GetCostAndUsageInput) (*request.Request, *costexplorer.GetCostAndUsageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageInput) *costexplorer.GetCostAndUsageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	return r0, r1
}

// GetCostAndUsageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostAndUsageWithContext(_a0 context.Context, _a1 *costexplorer.GetCostAndUsageInput, _a2 ...request.Option) (*costexplorer.GetCostAndUsageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...request.Option) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageWithResources provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageWithResources(_a0 *costexplorer.GetCostAndUsageWithResourcesInput) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostAndUsageWithResourcesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageWithResourcesInput) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageWithResourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageWithResourcesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageWithResourcesRequest(_a0 *costexplorer.GetCostAndUsageWithResourcesInput) (*request.Request, *costexplorer.GetCostAndUsageWithResourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageWithResourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostAndUsageWithResourcesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageWithResourcesInput) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	return r0, r1
}

// GetCostAndUsageWithResourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostAndUsageWithResourcesWithContext(_a0 context.Context, _a1 *costexplorer.GetCostAndUsageWithResourcesInput, _a2 ...request.Option) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostAndUsageWithResourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...request.Option) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecast provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostForecast(_a0 *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostForecastInput) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostForecastInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecastRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostForecastRequest(_a0 *costexplorer.GetCostForecastInput) (*request.Request, *costexplorer.GetCostForecastOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostForecastInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostForecastInput) *costexplorer.GetCostForecastOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostForecastOutput)
		}
	}

	return r0, r1
}

// GetCostForecastWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostForecastWithContext(_a0 context.Context, _a1 *costexplorer.GetCostForecastInput, _a2 ...request.Option) (*costexplorer.GetCostForecastOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostForecastInput, ...request.Option) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostForecastInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValues provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetDimensionValues(_a0 *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetDimensionValuesInput) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetDimensionValuesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValuesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetDimensionValuesRequest(_a0 *costexplorer.GetDimensionValuesInput) (*request.Request, *costexplorer.GetDimensionValuesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetDimensionValuesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetDimensionValuesInput) *costexplorer.GetDimensionValuesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	return r0, r1
}

// GetDimensionValuesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetDimensionValuesWithContext(_a0 context.Context, _a1 *costexplorer.GetDimensionValuesInput, _a2 ...request.Option) (*costexplorer.GetDimensionValuesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...request.Option) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationCoverage(_a0 *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationCoverageInput) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationCoverageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationCoverageRequest(_a0 *costexplorer.GetReservationCoverageInput) (*request.Request, *costexplorer.GetReservationCoverageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationCoverageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationCoverageInput) *costexplorer.GetReservationCoverageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	return r0, r1
}

// GetReservationCoverageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationCoverageWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationCoverageInput, _a2 ...request.Option) (*costexplorer.GetReservationCoverageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...request.Option) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendation(_a0 *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationPurchaseRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendationRequest(_a0 *costexplorer.GetReservationPurchaseRecommendationInput) (*request.Request, *costexplorer.GetReservationPurchaseRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	return r0, r1
}

// GetReservationPurchaseRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationPurchaseRecommendationInput, _a2 ...request.Option) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...request.Option) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilization provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationUtilization(_a0 *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationUtilizationInput) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationUtilizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilizationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationUtilizationRequest(_a0 *costexplorer.GetReservationUtilizationInput) (*request.Request, *costexplorer.GetReservationUtilizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationUtilizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationUtilizationInput) *costexplorer.GetReservationUtilizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	return r0, r1
}

// GetReservationUtilizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationUtilizationWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationUtilizationInput, _a2 ...request.Option) (*costexplorer.GetReservationUtilizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...request.Option) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRightsizingRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetRightsizingRecommendation(_a0 *costexplorer.GetRightsizingRecommendationInput) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetRightsizingRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetRightsizingRecommendationInput) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetRightsizingRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRightsizingRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetRightsizingRecommendationRequest(_a0 *costexplorer.GetRightsizingRecommendationInput) (*request.Request, *costexplorer.GetRightsizingRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetRightsizingRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetRightsizingRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetRightsizingRecommendationInput) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	return r0, r1
}

// GetRightsizingRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetRightsizingRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetRightsizingRecommendationInput, _a2 ...request.Option) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetRightsizingRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...request.Option) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansCoverage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansCoverage(_a0 *costexplorer.GetSavingsPlansCoverageInput) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansCoverageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansCoverageInput) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansCoverageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansCoveragePages provides a mock function with given fields: _a0, _a1
func (_m *CostExplorerAPI) GetSavingsPlansCoveragePages(_a0 *costexplorer.GetSavingsPlansCoverageInput, _a1 func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansCoverageInput, func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansCoveragePagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CostExplorerAPI) GetSavingsPlansCoveragePagesWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansCoverageInput, _a2 func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansCoverageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansCoverageRequest(_a0 *costexplorer.GetSavingsPlansCoverageInput) (*request.Request, *costexplorer.GetSavingsPlansCoverageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansCoverageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansCoverageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansCoverageInput) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansCoverageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansCoverageWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansCoverageInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansCoverageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...request.Option) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansPurchaseRecommendation(_a0 *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansPurchaseRecommendationRequest(_a0 *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*request.Request, *costexplorer.GetSavingsPlansPurchaseRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansPurchaseRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansPurchaseRecommendationInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...request.Option) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilization provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilization(_a0 *costexplorer.GetSavingsPlansUtilizationInput) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansUtilizationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationInput) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetails provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetails(_a0 *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetailsPages provides a mock function with given fields: _a0, _a1
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsPages(_a0 *costexplorer.GetSavingsPlansUtilizationDetailsInput, _a1 func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput, func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansUtilizationDetailsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsPagesWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansUtilizationDetailsInput, _a2 func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansUtilizationDetailsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsRequest(_a0 *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*request.Request, *costexplorer.GetSavingsPlansUtilizationDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansUtilizationDetailsInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...request.Option) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationRequest(_a0 *costexplorer.GetSavingsPlansUtilizationInput) (*request.Request, *costexplorer.GetSavingsPlansUtilizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansUtilizationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationInput) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansUtilizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansUtilizationInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansUtilizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...request.Option) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetTags(_a0 *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetTagsInput) *costexplorer.GetTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetTagsRequest(_a0 *costexplorer.GetTagsInput) (*request.Request, *costexplorer.GetTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetTagsInput) *costexplorer.GetTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetTagsOutput)
		}
	}

	return r0, r1
}

// GetTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetTagsWithContext(_a0 context.Context, _a1 *costexplorer.GetTagsInput, _a2 ...request.Option) (*costexplorer.GetTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetTagsInput, ...request.Option) *costexplorer.GetTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForecast provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetUsageForecast(_a0 *costexplorer.GetUsageForecastInput) (*costexplorer.GetUsageForecastOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetUsageForecastOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetUsageForecastInput) *costexplorer.GetUsageForecastOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetUsageForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetUsageForecastInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForecastRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetUsageForecastRequest(_a0 *costexplorer.GetUsageForecastInput) (*request.Request, *costexplorer.GetUsageForecastOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetUsageForecastInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetUsageForecastOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetUsageForecastInput) *costexplorer.GetUsageForecastOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetUsageForecastOutput)
		}
	}

	return r0, r1
}

// GetUsageForecastWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetUsageForecastWithContext(_a0 context.Context, _a1 *costexplorer.GetUsageForecastInput, _a2 ...request.Option) (*costexplorer.GetUsageForecastOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetUsageForecastOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetUsageForecastInput, ...request.Option) *costexplorer.GetUsageForecastOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetUsageForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetUsageForecastInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
