// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	costexplorer "github.com/aws/aws-sdk-go/service/costexplorer"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// CostExplorerAPI is an autogenerated mock type for the CostExplorerAPI type
type CostExplorerAPI struct {
	mock.Mock
}

// CreateAnomalyMonitor provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) CreateAnomalyMonitor(_a0 *costexplorer.CreateAnomalyMonitorInput) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.CreateAnomalyMonitorOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.CreateAnomalyMonitorInput) *costexplorer.CreateAnomalyMonitorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateAnomalyMonitorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.CreateAnomalyMonitorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAnomalyMonitorRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) CreateAnomalyMonitorRequest(_a0 *costexplorer.CreateAnomalyMonitorInput) (*request.Request, *costexplorer.CreateAnomalyMonitorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.CreateAnomalyMonitorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.CreateAnomalyMonitorOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.CreateAnomalyMonitorInput) *costexplorer.CreateAnomalyMonitorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.CreateAnomalyMonitorOutput)
		}
	}

	return r0, r1
}

// CreateAnomalyMonitorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) CreateAnomalyMonitorWithContext(_a0 context.Context, _a1 *costexplorer.CreateAnomalyMonitorInput, _a2 ...request.Option) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.CreateAnomalyMonitorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateAnomalyMonitorInput, ...request.Option) *costexplorer.CreateAnomalyMonitorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateAnomalyMonitorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.CreateAnomalyMonitorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAnomalySubscription provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) CreateAnomalySubscription(_a0 *costexplorer.CreateAnomalySubscriptionInput) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.CreateAnomalySubscriptionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.CreateAnomalySubscriptionInput) *costexplorer.CreateAnomalySubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateAnomalySubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.CreateAnomalySubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAnomalySubscriptionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) CreateAnomalySubscriptionRequest(_a0 *costexplorer.CreateAnomalySubscriptionInput) (*request.Request, *costexplorer.CreateAnomalySubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.CreateAnomalySubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.CreateAnomalySubscriptionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.CreateAnomalySubscriptionInput) *costexplorer.CreateAnomalySubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.CreateAnomalySubscriptionOutput)
		}
	}

	return r0, r1
}

// CreateAnomalySubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) CreateAnomalySubscriptionWithContext(_a0 context.Context, _a1 *costexplorer.CreateAnomalySubscriptionInput, _a2 ...request.Option) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.CreateAnomalySubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateAnomalySubscriptionInput, ...request.Option) *costexplorer.CreateAnomalySubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateAnomalySubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.CreateAnomalySubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCostCategoryDefinition provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) CreateCostCategoryDefinition(_a0 *costexplorer.CreateCostCategoryDefinitionInput) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.CreateCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.CreateCostCategoryDefinitionInput) *costexplorer.CreateCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.CreateCostCategoryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCostCategoryDefinitionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) CreateCostCategoryDefinitionRequest(_a0 *costexplorer.CreateCostCategoryDefinitionInput) (*request.Request, *costexplorer.CreateCostCategoryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.CreateCostCategoryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.CreateCostCategoryDefinitionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.CreateCostCategoryDefinitionInput) *costexplorer.CreateCostCategoryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.CreateCostCategoryDefinitionOutput)
		}
	}

	return r0, r1
}

// CreateCostCategoryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) CreateCostCategoryDefinitionWithContext(_a0 context.Context, _a1 *costexplorer.CreateCostCategoryDefinitionInput, _a2 ...request.Option) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.CreateCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateCostCategoryDefinitionInput, ...request.Option) *costexplorer.CreateCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.CreateCostCategoryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalyMonitor provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DeleteAnomalyMonitor(_a0 *costexplorer.DeleteAnomalyMonitorInput) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.DeleteAnomalyMonitorOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.DeleteAnomalyMonitorInput) *costexplorer.DeleteAnomalyMonitorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteAnomalyMonitorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.DeleteAnomalyMonitorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalyMonitorRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DeleteAnomalyMonitorRequest(_a0 *costexplorer.DeleteAnomalyMonitorInput) (*request.Request, *costexplorer.DeleteAnomalyMonitorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.DeleteAnomalyMonitorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.DeleteAnomalyMonitorOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.DeleteAnomalyMonitorInput) *costexplorer.DeleteAnomalyMonitorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.DeleteAnomalyMonitorOutput)
		}
	}

	return r0, r1
}

// DeleteAnomalyMonitorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) DeleteAnomalyMonitorWithContext(_a0 context.Context, _a1 *costexplorer.DeleteAnomalyMonitorInput, _a2 ...request.Option) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.DeleteAnomalyMonitorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteAnomalyMonitorInput, ...request.Option) *costexplorer.DeleteAnomalyMonitorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteAnomalyMonitorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DeleteAnomalyMonitorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalySubscription provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DeleteAnomalySubscription(_a0 *costexplorer.DeleteAnomalySubscriptionInput) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.DeleteAnomalySubscriptionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.DeleteAnomalySubscriptionInput) *costexplorer.DeleteAnomalySubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteAnomalySubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.DeleteAnomalySubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalySubscriptionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DeleteAnomalySubscriptionRequest(_a0 *costexplorer.DeleteAnomalySubscriptionInput) (*request.Request, *costexplorer.DeleteAnomalySubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.DeleteAnomalySubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.DeleteAnomalySubscriptionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.DeleteAnomalySubscriptionInput) *costexplorer.DeleteAnomalySubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.DeleteAnomalySubscriptionOutput)
		}
	}

	return r0, r1
}

// DeleteAnomalySubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) DeleteAnomalySubscriptionWithContext(_a0 context.Context, _a1 *costexplorer.DeleteAnomalySubscriptionInput, _a2 ...request.Option) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.DeleteAnomalySubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteAnomalySubscriptionInput, ...request.Option) *costexplorer.DeleteAnomalySubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteAnomalySubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DeleteAnomalySubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCostCategoryDefinition provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DeleteCostCategoryDefinition(_a0 *costexplorer.DeleteCostCategoryDefinitionInput) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.DeleteCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.DeleteCostCategoryDefinitionInput) *costexplorer.DeleteCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.DeleteCostCategoryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCostCategoryDefinitionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DeleteCostCategoryDefinitionRequest(_a0 *costexplorer.DeleteCostCategoryDefinitionInput) (*request.Request, *costexplorer.DeleteCostCategoryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.DeleteCostCategoryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.DeleteCostCategoryDefinitionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.DeleteCostCategoryDefinitionInput) *costexplorer.DeleteCostCategoryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.DeleteCostCategoryDefinitionOutput)
		}
	}

	return r0, r1
}

// DeleteCostCategoryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) DeleteCostCategoryDefinitionWithContext(_a0 context.Context, _a1 *costexplorer.DeleteCostCategoryDefinitionInput, _a2 ...request.Option) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.DeleteCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteCostCategoryDefinitionInput, ...request.Option) *costexplorer.DeleteCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DeleteCostCategoryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCostCategoryDefinition provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DescribeCostCategoryDefinition(_a0 *costexplorer.DescribeCostCategoryDefinitionInput) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.DescribeCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.DescribeCostCategoryDefinitionInput) *costexplorer.DescribeCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DescribeCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.DescribeCostCategoryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCostCategoryDefinitionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) DescribeCostCategoryDefinitionRequest(_a0 *costexplorer.DescribeCostCategoryDefinitionInput) (*request.Request, *costexplorer.DescribeCostCategoryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.DescribeCostCategoryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.DescribeCostCategoryDefinitionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.DescribeCostCategoryDefinitionInput) *costexplorer.DescribeCostCategoryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.DescribeCostCategoryDefinitionOutput)
		}
	}

	return r0, r1
}

// DescribeCostCategoryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) DescribeCostCategoryDefinitionWithContext(_a0 context.Context, _a1 *costexplorer.DescribeCostCategoryDefinitionInput, _a2 ...request.Option) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.DescribeCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DescribeCostCategoryDefinitionInput, ...request.Option) *costexplorer.DescribeCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DescribeCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DescribeCostCategoryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalies provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetAnomalies(_a0 *costexplorer.GetAnomaliesInput) (*costexplorer.GetAnomaliesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetAnomaliesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetAnomaliesInput) *costexplorer.GetAnomaliesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomaliesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetAnomaliesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomaliesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetAnomaliesRequest(_a0 *costexplorer.GetAnomaliesInput) (*request.Request, *costexplorer.GetAnomaliesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetAnomaliesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetAnomaliesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetAnomaliesInput) *costexplorer.GetAnomaliesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetAnomaliesOutput)
		}
	}

	return r0, r1
}

// GetAnomaliesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetAnomaliesWithContext(_a0 context.Context, _a1 *costexplorer.GetAnomaliesInput, _a2 ...request.Option) (*costexplorer.GetAnomaliesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetAnomaliesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomaliesInput, ...request.Option) *costexplorer.GetAnomaliesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomaliesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetAnomaliesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalyMonitors provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetAnomalyMonitors(_a0 *costexplorer.GetAnomalyMonitorsInput) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetAnomalyMonitorsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetAnomalyMonitorsInput) *costexplorer.GetAnomalyMonitorsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomalyMonitorsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetAnomalyMonitorsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalyMonitorsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetAnomalyMonitorsRequest(_a0 *costexplorer.GetAnomalyMonitorsInput) (*request.Request, *costexplorer.GetAnomalyMonitorsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetAnomalyMonitorsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetAnomalyMonitorsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetAnomalyMonitorsInput) *costexplorer.GetAnomalyMonitorsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetAnomalyMonitorsOutput)
		}
	}

	return r0, r1
}

// GetAnomalyMonitorsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetAnomalyMonitorsWithContext(_a0 context.Context, _a1 *costexplorer.GetAnomalyMonitorsInput, _a2 ...request.Option) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetAnomalyMonitorsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomalyMonitorsInput, ...request.Option) *costexplorer.GetAnomalyMonitorsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomalyMonitorsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetAnomalyMonitorsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalySubscriptions provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetAnomalySubscriptions(_a0 *costexplorer.GetAnomalySubscriptionsInput) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetAnomalySubscriptionsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetAnomalySubscriptionsInput) *costexplorer.GetAnomalySubscriptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomalySubscriptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetAnomalySubscriptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalySubscriptionsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetAnomalySubscriptionsRequest(_a0 *costexplorer.GetAnomalySubscriptionsInput) (*request.Request, *costexplorer.GetAnomalySubscriptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetAnomalySubscriptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetAnomalySubscriptionsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetAnomalySubscriptionsInput) *costexplorer.GetAnomalySubscriptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetAnomalySubscriptionsOutput)
		}
	}

	return r0, r1
}

// GetAnomalySubscriptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetAnomalySubscriptionsWithContext(_a0 context.Context, _a1 *costexplorer.GetAnomalySubscriptionsInput, _a2 ...request.Option) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetAnomalySubscriptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomalySubscriptionsInput, ...request.Option) *costexplorer.GetAnomalySubscriptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomalySubscriptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetAnomalySubscriptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsage(_a0 *costexplorer.GetCostAndUsageInput) (*costexplorer.GetCostAndUsageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageInput) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageRequest(_a0 *costexplorer.GetCostAndUsageInput) (*request.Request, *costexplorer.GetCostAndUsageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageInput) *costexplorer.GetCostAndUsageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	return r0, r1
}

// GetCostAndUsageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostAndUsageWithContext(_a0 context.Context, _a1 *costexplorer.GetCostAndUsageInput, _a2 ...request.Option) (*costexplorer.GetCostAndUsageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostAndUsageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...request.Option) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageWithResources provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageWithResources(_a0 *costexplorer.GetCostAndUsageWithResourcesInput) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostAndUsageWithResourcesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageWithResourcesInput) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageWithResourcesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageWithResourcesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostAndUsageWithResourcesRequest(_a0 *costexplorer.GetCostAndUsageWithResourcesInput) (*request.Request, *costexplorer.GetCostAndUsageWithResourcesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostAndUsageWithResourcesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostAndUsageWithResourcesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostAndUsageWithResourcesInput) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	return r0, r1
}

// GetCostAndUsageWithResourcesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostAndUsageWithResourcesWithContext(_a0 context.Context, _a1 *costexplorer.GetCostAndUsageWithResourcesInput, _a2 ...request.Option) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostAndUsageWithResourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...request.Option) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostCategories provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostCategories(_a0 *costexplorer.GetCostCategoriesInput) (*costexplorer.GetCostCategoriesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostCategoriesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostCategoriesInput) *costexplorer.GetCostCategoriesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostCategoriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostCategoriesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostCategoriesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostCategoriesRequest(_a0 *costexplorer.GetCostCategoriesInput) (*request.Request, *costexplorer.GetCostCategoriesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostCategoriesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostCategoriesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostCategoriesInput) *costexplorer.GetCostCategoriesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostCategoriesOutput)
		}
	}

	return r0, r1
}

// GetCostCategoriesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostCategoriesWithContext(_a0 context.Context, _a1 *costexplorer.GetCostCategoriesInput, _a2 ...request.Option) (*costexplorer.GetCostCategoriesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostCategoriesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostCategoriesInput, ...request.Option) *costexplorer.GetCostCategoriesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostCategoriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostCategoriesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecast provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostForecast(_a0 *costexplorer.GetCostForecastInput) (*costexplorer.GetCostForecastOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostForecastInput) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostForecastInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecastRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetCostForecastRequest(_a0 *costexplorer.GetCostForecastInput) (*request.Request, *costexplorer.GetCostForecastOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetCostForecastInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetCostForecastInput) *costexplorer.GetCostForecastOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetCostForecastOutput)
		}
	}

	return r0, r1
}

// GetCostForecastWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetCostForecastWithContext(_a0 context.Context, _a1 *costexplorer.GetCostForecastInput, _a2 ...request.Option) (*costexplorer.GetCostForecastOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetCostForecastOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostForecastInput, ...request.Option) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostForecastInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValues provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetDimensionValues(_a0 *costexplorer.GetDimensionValuesInput) (*costexplorer.GetDimensionValuesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetDimensionValuesInput) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetDimensionValuesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValuesRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetDimensionValuesRequest(_a0 *costexplorer.GetDimensionValuesInput) (*request.Request, *costexplorer.GetDimensionValuesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetDimensionValuesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetDimensionValuesInput) *costexplorer.GetDimensionValuesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	return r0, r1
}

// GetDimensionValuesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetDimensionValuesWithContext(_a0 context.Context, _a1 *costexplorer.GetDimensionValuesInput, _a2 ...request.Option) (*costexplorer.GetDimensionValuesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetDimensionValuesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...request.Option) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationCoverage(_a0 *costexplorer.GetReservationCoverageInput) (*costexplorer.GetReservationCoverageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationCoverageInput) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationCoverageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationCoverageRequest(_a0 *costexplorer.GetReservationCoverageInput) (*request.Request, *costexplorer.GetReservationCoverageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationCoverageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationCoverageInput) *costexplorer.GetReservationCoverageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	return r0, r1
}

// GetReservationCoverageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationCoverageWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationCoverageInput, _a2 ...request.Option) (*costexplorer.GetReservationCoverageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationCoverageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...request.Option) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendation(_a0 *costexplorer.GetReservationPurchaseRecommendationInput) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationPurchaseRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendationRequest(_a0 *costexplorer.GetReservationPurchaseRecommendationInput) (*request.Request, *costexplorer.GetReservationPurchaseRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationPurchaseRecommendationInput) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	return r0, r1
}

// GetReservationPurchaseRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationPurchaseRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationPurchaseRecommendationInput, _a2 ...request.Option) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...request.Option) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilization provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationUtilization(_a0 *costexplorer.GetReservationUtilizationInput) (*costexplorer.GetReservationUtilizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationUtilizationInput) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationUtilizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilizationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetReservationUtilizationRequest(_a0 *costexplorer.GetReservationUtilizationInput) (*request.Request, *costexplorer.GetReservationUtilizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetReservationUtilizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetReservationUtilizationInput) *costexplorer.GetReservationUtilizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	return r0, r1
}

// GetReservationUtilizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetReservationUtilizationWithContext(_a0 context.Context, _a1 *costexplorer.GetReservationUtilizationInput, _a2 ...request.Option) (*costexplorer.GetReservationUtilizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetReservationUtilizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...request.Option) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRightsizingRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetRightsizingRecommendation(_a0 *costexplorer.GetRightsizingRecommendationInput) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetRightsizingRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetRightsizingRecommendationInput) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetRightsizingRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRightsizingRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetRightsizingRecommendationRequest(_a0 *costexplorer.GetRightsizingRecommendationInput) (*request.Request, *costexplorer.GetRightsizingRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetRightsizingRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetRightsizingRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetRightsizingRecommendationInput) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	return r0, r1
}

// GetRightsizingRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetRightsizingRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetRightsizingRecommendationInput, _a2 ...request.Option) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetRightsizingRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...request.Option) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansCoverage provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansCoverage(_a0 *costexplorer.GetSavingsPlansCoverageInput) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansCoverageOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansCoverageInput) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansCoverageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansCoveragePages provides a mock function with given fields: _a0, _a1
func (_m *CostExplorerAPI) GetSavingsPlansCoveragePages(_a0 *costexplorer.GetSavingsPlansCoverageInput, _a1 func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansCoverageInput, func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansCoveragePagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CostExplorerAPI) GetSavingsPlansCoveragePagesWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansCoverageInput, _a2 func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, func(*costexplorer.GetSavingsPlansCoverageOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansCoverageRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansCoverageRequest(_a0 *costexplorer.GetSavingsPlansCoverageInput) (*request.Request, *costexplorer.GetSavingsPlansCoverageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansCoverageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansCoverageOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansCoverageInput) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansCoverageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansCoverageWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansCoverageInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansCoverageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...request.Option) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendation provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansPurchaseRecommendation(_a0 *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansPurchaseRecommendationRequest(_a0 *costexplorer.GetSavingsPlansPurchaseRecommendationInput) (*request.Request, *costexplorer.GetSavingsPlansPurchaseRecommendationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansPurchaseRecommendationInput) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansPurchaseRecommendationWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansPurchaseRecommendationInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...request.Option) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilization provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilization(_a0 *costexplorer.GetSavingsPlansUtilizationInput) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansUtilizationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationInput) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetails provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetails(_a0 *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetailsPages provides a mock function with given fields: _a0, _a1
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsPages(_a0 *costexplorer.GetSavingsPlansUtilizationDetailsInput, _a1 func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput, func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansUtilizationDetailsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsPagesWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansUtilizationDetailsInput, _a2 func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, func(*costexplorer.GetSavingsPlansUtilizationDetailsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSavingsPlansUtilizationDetailsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsRequest(_a0 *costexplorer.GetSavingsPlansUtilizationDetailsInput) (*request.Request, *costexplorer.GetSavingsPlansUtilizationDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationDetailsInput) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationDetailsWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansUtilizationDetailsInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...request.Option) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationRequest(_a0 *costexplorer.GetSavingsPlansUtilizationInput) (*request.Request, *costexplorer.GetSavingsPlansUtilizationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetSavingsPlansUtilizationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetSavingsPlansUtilizationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetSavingsPlansUtilizationInput) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	return r0, r1
}

// GetSavingsPlansUtilizationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetSavingsPlansUtilizationWithContext(_a0 context.Context, _a1 *costexplorer.GetSavingsPlansUtilizationInput, _a2 ...request.Option) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetSavingsPlansUtilizationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...request.Option) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetTags(_a0 *costexplorer.GetTagsInput) (*costexplorer.GetTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetTagsInput) *costexplorer.GetTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetTagsRequest(_a0 *costexplorer.GetTagsInput) (*request.Request, *costexplorer.GetTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetTagsInput) *costexplorer.GetTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetTagsOutput)
		}
	}

	return r0, r1
}

// GetTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetTagsWithContext(_a0 context.Context, _a1 *costexplorer.GetTagsInput, _a2 ...request.Option) (*costexplorer.GetTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetTagsInput, ...request.Option) *costexplorer.GetTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForecast provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetUsageForecast(_a0 *costexplorer.GetUsageForecastInput) (*costexplorer.GetUsageForecastOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.GetUsageForecastOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.GetUsageForecastInput) *costexplorer.GetUsageForecastOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetUsageForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.GetUsageForecastInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForecastRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) GetUsageForecastRequest(_a0 *costexplorer.GetUsageForecastInput) (*request.Request, *costexplorer.GetUsageForecastOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.GetUsageForecastInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.GetUsageForecastOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.GetUsageForecastInput) *costexplorer.GetUsageForecastOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.GetUsageForecastOutput)
		}
	}

	return r0, r1
}

// GetUsageForecastWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) GetUsageForecastWithContext(_a0 context.Context, _a1 *costexplorer.GetUsageForecastInput, _a2 ...request.Option) (*costexplorer.GetUsageForecastOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.GetUsageForecastOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetUsageForecastInput, ...request.Option) *costexplorer.GetUsageForecastOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetUsageForecastOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetUsageForecastInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostAllocationTags provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListCostAllocationTags(_a0 *costexplorer.ListCostAllocationTagsInput) (*costexplorer.ListCostAllocationTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.ListCostAllocationTagsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.ListCostAllocationTagsInput) *costexplorer.ListCostAllocationTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostAllocationTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.ListCostAllocationTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostAllocationTagsPages provides a mock function with given fields: _a0, _a1
func (_m *CostExplorerAPI) ListCostAllocationTagsPages(_a0 *costexplorer.ListCostAllocationTagsInput, _a1 func(*costexplorer.ListCostAllocationTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*costexplorer.ListCostAllocationTagsInput, func(*costexplorer.ListCostAllocationTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCostAllocationTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CostExplorerAPI) ListCostAllocationTagsPagesWithContext(_a0 context.Context, _a1 *costexplorer.ListCostAllocationTagsInput, _a2 func(*costexplorer.ListCostAllocationTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostAllocationTagsInput, func(*costexplorer.ListCostAllocationTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCostAllocationTagsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListCostAllocationTagsRequest(_a0 *costexplorer.ListCostAllocationTagsInput) (*request.Request, *costexplorer.ListCostAllocationTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.ListCostAllocationTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.ListCostAllocationTagsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.ListCostAllocationTagsInput) *costexplorer.ListCostAllocationTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.ListCostAllocationTagsOutput)
		}
	}

	return r0, r1
}

// ListCostAllocationTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) ListCostAllocationTagsWithContext(_a0 context.Context, _a1 *costexplorer.ListCostAllocationTagsInput, _a2 ...request.Option) (*costexplorer.ListCostAllocationTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.ListCostAllocationTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostAllocationTagsInput, ...request.Option) *costexplorer.ListCostAllocationTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostAllocationTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListCostAllocationTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostCategoryDefinitions provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListCostCategoryDefinitions(_a0 *costexplorer.ListCostCategoryDefinitionsInput) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.ListCostCategoryDefinitionsOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.ListCostCategoryDefinitionsInput) *costexplorer.ListCostCategoryDefinitionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostCategoryDefinitionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.ListCostCategoryDefinitionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostCategoryDefinitionsPages provides a mock function with given fields: _a0, _a1
func (_m *CostExplorerAPI) ListCostCategoryDefinitionsPages(_a0 *costexplorer.ListCostCategoryDefinitionsInput, _a1 func(*costexplorer.ListCostCategoryDefinitionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*costexplorer.ListCostCategoryDefinitionsInput, func(*costexplorer.ListCostCategoryDefinitionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCostCategoryDefinitionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CostExplorerAPI) ListCostCategoryDefinitionsPagesWithContext(_a0 context.Context, _a1 *costexplorer.ListCostCategoryDefinitionsInput, _a2 func(*costexplorer.ListCostCategoryDefinitionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostCategoryDefinitionsInput, func(*costexplorer.ListCostCategoryDefinitionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCostCategoryDefinitionsRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListCostCategoryDefinitionsRequest(_a0 *costexplorer.ListCostCategoryDefinitionsInput) (*request.Request, *costexplorer.ListCostCategoryDefinitionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.ListCostCategoryDefinitionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.ListCostCategoryDefinitionsOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.ListCostCategoryDefinitionsInput) *costexplorer.ListCostCategoryDefinitionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.ListCostCategoryDefinitionsOutput)
		}
	}

	return r0, r1
}

// ListCostCategoryDefinitionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) ListCostCategoryDefinitionsWithContext(_a0 context.Context, _a1 *costexplorer.ListCostCategoryDefinitionsInput, _a2 ...request.Option) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.ListCostCategoryDefinitionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostCategoryDefinitionsInput, ...request.Option) *costexplorer.ListCostCategoryDefinitionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostCategoryDefinitionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListCostCategoryDefinitionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSavingsPlansPurchaseRecommendationGeneration provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListSavingsPlansPurchaseRecommendationGeneration(_a0 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput) (*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput) *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSavingsPlansPurchaseRecommendationGenerationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListSavingsPlansPurchaseRecommendationGenerationRequest(_a0 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput) (*request.Request, *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput) *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	return r0, r1
}

// ListSavingsPlansPurchaseRecommendationGenerationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) ListSavingsPlansPurchaseRecommendationGenerationWithContext(_a0 context.Context, _a1 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, _a2 ...request.Option) (*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, ...request.Option) *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListTagsForResource(_a0 *costexplorer.ListTagsForResourceInput) (*costexplorer.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.ListTagsForResourceInput) *costexplorer.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ListTagsForResourceRequest(_a0 *costexplorer.ListTagsForResourceInput) (*request.Request, *costexplorer.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.ListTagsForResourceInput) *costexplorer.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *costexplorer.ListTagsForResourceInput, _a2 ...request.Option) (*costexplorer.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListTagsForResourceInput, ...request.Option) *costexplorer.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvideAnomalyFeedback provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ProvideAnomalyFeedback(_a0 *costexplorer.ProvideAnomalyFeedbackInput) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.ProvideAnomalyFeedbackOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.ProvideAnomalyFeedbackInput) *costexplorer.ProvideAnomalyFeedbackOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ProvideAnomalyFeedbackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.ProvideAnomalyFeedbackInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvideAnomalyFeedbackRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) ProvideAnomalyFeedbackRequest(_a0 *costexplorer.ProvideAnomalyFeedbackInput) (*request.Request, *costexplorer.ProvideAnomalyFeedbackOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.ProvideAnomalyFeedbackInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.ProvideAnomalyFeedbackOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.ProvideAnomalyFeedbackInput) *costexplorer.ProvideAnomalyFeedbackOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.ProvideAnomalyFeedbackOutput)
		}
	}

	return r0, r1
}

// ProvideAnomalyFeedbackWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) ProvideAnomalyFeedbackWithContext(_a0 context.Context, _a1 *costexplorer.ProvideAnomalyFeedbackInput, _a2 ...request.Option) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.ProvideAnomalyFeedbackOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ProvideAnomalyFeedbackInput, ...request.Option) *costexplorer.ProvideAnomalyFeedbackOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ProvideAnomalyFeedbackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ProvideAnomalyFeedbackInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSavingsPlansPurchaseRecommendationGeneration provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) StartSavingsPlansPurchaseRecommendationGeneration(_a0 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput) (*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput) *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSavingsPlansPurchaseRecommendationGenerationRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) StartSavingsPlansPurchaseRecommendationGenerationRequest(_a0 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput) (*request.Request, *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput) *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	return r0, r1
}

// StartSavingsPlansPurchaseRecommendationGenerationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) StartSavingsPlansPurchaseRecommendationGenerationWithContext(_a0 context.Context, _a1 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, _a2 ...request.Option) (*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, ...request.Option) *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) TagResource(_a0 *costexplorer.TagResourceInput) (*costexplorer.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.TagResourceInput) *costexplorer.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) TagResourceRequest(_a0 *costexplorer.TagResourceInput) (*request.Request, *costexplorer.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.TagResourceInput) *costexplorer.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) TagResourceWithContext(_a0 context.Context, _a1 *costexplorer.TagResourceInput, _a2 ...request.Option) (*costexplorer.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.TagResourceInput, ...request.Option) *costexplorer.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UntagResource(_a0 *costexplorer.UntagResourceInput) (*costexplorer.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.UntagResourceInput) *costexplorer.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UntagResourceRequest(_a0 *costexplorer.UntagResourceInput) (*request.Request, *costexplorer.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.UntagResourceInput) *costexplorer.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) UntagResourceWithContext(_a0 context.Context, _a1 *costexplorer.UntagResourceInput, _a2 ...request.Option) (*costexplorer.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UntagResourceInput, ...request.Option) *costexplorer.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalyMonitor provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateAnomalyMonitor(_a0 *costexplorer.UpdateAnomalyMonitorInput) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.UpdateAnomalyMonitorOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateAnomalyMonitorInput) *costexplorer.UpdateAnomalyMonitorOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateAnomalyMonitorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateAnomalyMonitorInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalyMonitorRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateAnomalyMonitorRequest(_a0 *costexplorer.UpdateAnomalyMonitorInput) (*request.Request, *costexplorer.UpdateAnomalyMonitorOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateAnomalyMonitorInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.UpdateAnomalyMonitorOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateAnomalyMonitorInput) *costexplorer.UpdateAnomalyMonitorOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.UpdateAnomalyMonitorOutput)
		}
	}

	return r0, r1
}

// UpdateAnomalyMonitorWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) UpdateAnomalyMonitorWithContext(_a0 context.Context, _a1 *costexplorer.UpdateAnomalyMonitorInput, _a2 ...request.Option) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.UpdateAnomalyMonitorOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateAnomalyMonitorInput, ...request.Option) *costexplorer.UpdateAnomalyMonitorOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateAnomalyMonitorOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateAnomalyMonitorInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalySubscription provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateAnomalySubscription(_a0 *costexplorer.UpdateAnomalySubscriptionInput) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.UpdateAnomalySubscriptionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateAnomalySubscriptionInput) *costexplorer.UpdateAnomalySubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateAnomalySubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateAnomalySubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalySubscriptionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateAnomalySubscriptionRequest(_a0 *costexplorer.UpdateAnomalySubscriptionInput) (*request.Request, *costexplorer.UpdateAnomalySubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateAnomalySubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.UpdateAnomalySubscriptionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateAnomalySubscriptionInput) *costexplorer.UpdateAnomalySubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.UpdateAnomalySubscriptionOutput)
		}
	}

	return r0, r1
}

// UpdateAnomalySubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) UpdateAnomalySubscriptionWithContext(_a0 context.Context, _a1 *costexplorer.UpdateAnomalySubscriptionInput, _a2 ...request.Option) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.UpdateAnomalySubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateAnomalySubscriptionInput, ...request.Option) *costexplorer.UpdateAnomalySubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateAnomalySubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateAnomalySubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCostAllocationTagsStatus provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateCostAllocationTagsStatus(_a0 *costexplorer.UpdateCostAllocationTagsStatusInput) (*costexplorer.UpdateCostAllocationTagsStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.UpdateCostAllocationTagsStatusOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateCostAllocationTagsStatusInput) *costexplorer.UpdateCostAllocationTagsStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateCostAllocationTagsStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateCostAllocationTagsStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCostAllocationTagsStatusRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateCostAllocationTagsStatusRequest(_a0 *costexplorer.UpdateCostAllocationTagsStatusInput) (*request.Request, *costexplorer.UpdateCostAllocationTagsStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateCostAllocationTagsStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.UpdateCostAllocationTagsStatusOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateCostAllocationTagsStatusInput) *costexplorer.UpdateCostAllocationTagsStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.UpdateCostAllocationTagsStatusOutput)
		}
	}

	return r0, r1
}

// UpdateCostAllocationTagsStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) UpdateCostAllocationTagsStatusWithContext(_a0 context.Context, _a1 *costexplorer.UpdateCostAllocationTagsStatusInput, _a2 ...request.Option) (*costexplorer.UpdateCostAllocationTagsStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.UpdateCostAllocationTagsStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateCostAllocationTagsStatusInput, ...request.Option) *costexplorer.UpdateCostAllocationTagsStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateCostAllocationTagsStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateCostAllocationTagsStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCostCategoryDefinition provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateCostCategoryDefinition(_a0 *costexplorer.UpdateCostCategoryDefinitionInput) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *costexplorer.UpdateCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateCostCategoryDefinitionInput) *costexplorer.UpdateCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateCostCategoryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCostCategoryDefinitionRequest provides a mock function with given fields: _a0
func (_m *CostExplorerAPI) UpdateCostCategoryDefinitionRequest(_a0 *costexplorer.UpdateCostCategoryDefinitionInput) (*request.Request, *costexplorer.UpdateCostCategoryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*costexplorer.UpdateCostCategoryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *costexplorer.UpdateCostCategoryDefinitionOutput
	if rf, ok := ret.Get(1).(func(*costexplorer.UpdateCostCategoryDefinitionInput) *costexplorer.UpdateCostCategoryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*costexplorer.UpdateCostCategoryDefinitionOutput)
		}
	}

	return r0, r1
}

// UpdateCostCategoryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *CostExplorerAPI) UpdateCostCategoryDefinitionWithContext(_a0 context.Context, _a1 *costexplorer.UpdateCostCategoryDefinitionInput, _a2 ...request.Option) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *costexplorer.UpdateCostCategoryDefinitionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateCostCategoryDefinitionInput, ...request.Option) *costexplorer.UpdateCostCategoryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateCostCategoryDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateCostCategoryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCostExplorerAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewCostExplorerAPI creates a new instance of CostExplorerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCostExplorerAPI(t mockConstructorTestingTNewCostExplorerAPI) *CostExplorerAPI {
	mock := &CostExplorerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
