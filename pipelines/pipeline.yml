pool:
  vmImage: "Ubuntu 16.04"

trigger:
  # Run build on tagged versions
  tags:
    include:
      - "v*"

# Run builds for PRs against `master`
pr:
  - master
  - release/*

stages:
  - stage: TestAndBuild
    jobs:
      - job: Test
        steps:
          # Setup Python
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
              addToPath: true
              architecture: "x64"

          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "0.12.18"
            displayName: "Install Terraform"

          # Install GO
          - task: GoTool@0
            inputs:
              version: "1.13.4"
            displayName: "Set up the Go workspace"

          # Install tools needed for CI environment
          - script: |
              ./scripts/install_ci.sh
            displayName: "Set up Golang CI Tools"

          # Unit Tests
          - task: AWSShellScript@1
            displayName: "Unit Tests"
            inputs:
              awsCredentials: "AWS_Login"
              regionName: "us-east-1"
              scriptType: "inline"
              inlineScript: |
                set -euxo pipefail
                make test

          # Publish code coverage results
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
            condition: always()

          # Publish junit test results (for unit and functional tests)
          - task: PublishTestResults@2
            inputs:
              testRunner: JUnit
              testResultsFiles: $(System.DefaultWorkingDirectory)/junit-report/*.xml
              testRunTitle: Unit Tests
            condition: always()

      - job: Build
        dependsOn: Test
        steps:
          # Build go executables
          - script: |
              make build
            displayName: "Build"

          # Publish build artifacts
          # for deploying to PR environment, and for Github releases
          - publish: $(System.DefaultWorkingDirectory)/bin
            artifact: bin
          - publish: $(System.DefaultWorkingDirectory)/scripts
            artifact: deploy_scripts

  - stage: Deploy
    dependsOn: TestAndBuild
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "create"
        strategy:
          runOnce:
            deploy:
              steps:
                # Checkout the git repo code
                - checkout: self

                # Configure the namespace used by Terraform
                # May be referenced as an env var (eg. "${NAMESPACE}")
                # Or as a pipeline variable (eg. "$(namespace)")
                - bash: |
                    # Use the PR number in the namespace
                    # so each PR gets its own DCE env.
                    # Note that sometimes Azure DevOps fails to provide
                    # the PR number, and the var resolves to "$(System.PullRequest.PullRequestNumber)"
                    if [[ "${PR_NUMBER}" != *'System.'* ]]; then
                      NS="github-pr-${PR_NUMBER}"
                    else
                      NS="cd"
                    fi

                    echo "Namespace is ${NS}"

                    # Set the namespace as a Azure Pipeline variable
                    # See https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-in-script
                    echo "##vso[task.setvariable variable=namespace]${NS}"
                    
                    # We'll also write it to a file, so we can use it from other stage
                    # (variables can be used across steps and jobs, but not across stages)
                    echo "${NS}" > ./namespace.txt
                    
                  displayName: "Configure AWS Namespace"
                  env:
                    PR_NUMBER: $(System.PullRequest.PullRequestNumber)
                    # This is the branch name, or the git tag name
                    NS_BRANCH_OR_TAG: $(Build.SourceBranchName)

                # Install GO
                - task: GoTool@0
                  inputs:
                    version: "1.13.4"
                    goPath: "$(System.DefaultWorkingDirectory)/gopath"
                    goBin: "$(System.DefaultWorkingDirectory)/gopath/bin"
                  displayName: "Set up the Go workspace"

                - bash: |
                    set -ex
                    echo '##vso[task.prependpath]$(GOBIN)'
                    echo '##vso[task.prependpath]$(GOROOT)/bin'
                    go get github.com/jstemmer/go-junit-report

                    # Download dce-cli
                    wget -q https://github.com/Optum/dce-cli/releases/download/v0.3.0/dce_linux_amd64.zip
                    # Validate checksum
                    expected_sha="d19e1ecee5eb9646dbd5bf509ea813f4db1c22bf843551bd1ec8c8f42efe54c2"
                    test $(shasum -a256 ./dce_linux_amd64.zip | awk '{print $1}') == "${expected_sha}"
                    unzip ./dce_linux_amd64.zip -d ./
                  displayName: "Download pipeline dependencies"

                # Lease a DCE account, to use for deploying our PR environment
                # (deploy DCE in DCE)
                - task: AWSShellScript@1
                  displayName: "Lease DCE Account"
                  inputs:
                    awsCredentials: "AWS_DCE_API_NONPROD"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: |
                      set -ex

                      echo "Principal ID is ${NAMESPACE}"

                      echo "Configuring the dce-cli"
                      echo "
                        api:
                          host: $(DCE_NONPROD_HOSTNAME)
                          basepath: /api
                        region: us-east-1
                      " > ./dce.yml


                      # Check if we already have an active lease for this PR
                      # (note that dce-cli exits 1, if none exist
                      #  see https://github.com/Optum/dce/issues/204)
                      echo "Checking if a lease exists for ${NAMESPACE}..."
                      # We can't filter by status and principal together
                      # (see https://github.com/Optum/dce-cli/issues/58)
                      # so we'll just filter by status, and then
                      # filter by principalId client side
                      set +e
                      leases=$(
                        ./dce --config=dce.yml leases list -s Active \
                        2>&1 >/dev/null)
                      echo $leases
                      lease_id=$(
                        echo $leases | \
                        jq -r \
                          --arg PrincipalID "${NAMESPACE}" \
                          '.[] | select( .principalId==$PrincipalID ) | .id'
                      )
                      retVal=$?
                      set -e
                      if [ $retVal -ne 0 ] || [ ! "${lease_id}" ]; then
                        echo "No lease exists for ${NAMESPACE}. Creating one..."
                        # Note that dce lease create doesn't return valid JSON
                        # See https://github.com/Optum/dce-cli/issues/11
                        created_lease=$(
                          ./dce --config=dce.yml leases create \
                            --principal-id ${NAMESPACE} \
                            --expires-on 2d \
                            --budget-amount 100 --budget-currency USD \
                            --email noreply@example.com \
                              2>&1 >/dev/null | \
                            sed 's/Lease created://'
                        )
                        echo "Created lease: ${created_lease}"
                        lease_id=$(echo "${created_lease}" | jq -r .id)
                      fi

                      echo "Using lease for PrincipalId=${NAMESPACE}, Id=${lease_id}"
                      echo "Logging into the DCE account"
                      ./dce --config=dce.yml leases login ${lease_id}

                      # Save the lease ID to a file, so we can reference it later
                      # (note that we can't assign variables across jobs in different stages)
                      echo "${lease_id}" > ./lease_id.txt
                    env:
                      NAMESPACE=$(namespace)

                # Install Terraform
                - task: TerraformInstaller@0
                  inputs:
                    terraformVersion: "0.12.18"
                  displayName: "Install Terraform"

                # Configure the Terraform backend
                - bash: ./scripts/create-tf-backend.sh
                  displayName: "Configure Terraform Backend"

                # terraform init
                - bash: |
                    cd modules
                    cat ./backend.tf
                    terraform init -input=false
                    terraform apply \
                      -auto-approve \
                      -input=false \
                      -var="namespace=${NAMESPACE}" \
                      -var="budget_notification_from_email=${NOTIFY_EMAIL}"
                  displayName: "Terraform Init/Apply"
                  env:
                    NAMESPACE: $(namespace)
                    NOTIFY_EMAIL: $(NOTIFY_EMAIL)

                # Deploy Application Code to AWS
                - bash: |
                    ARTIFACTS_BUCKET_NAME=$(cd modules && terraform output artifacts_bucket_name)
                    NAMESPACE=$(cd modules && terraform output namespace)
                    ./scripts/deploy.sh \
                      $(Pipeline.Workspace)/bin/build_artifacts.zip \
                      ${NAMESPACE} \
                      ${ARTIFACTS_BUCKET_NAME}
                  displayName: "Deploy Application Code"
                  env:
                    AWS_DEFAULT_REGION: us-east-1


                # Functional Tests
                - bash: |
                    set -euxo pipefail
                    mkdir -p junit-report
                    # Run functional tests
                    go test -v ./tests/... 2>&1 | tee >(go-junit-report > junit-report/functional.xml)
                  displayName: "Functional Tests"


                # Publish junit test results (for unit and functional tests)
                - task: PublishTestResults@2
                  inputs:
                    testRunner: JUnit
                    testResultsFiles: $(System.DefaultWorkingDirectory)/junit-report/*.xml
                    testRunTitle: Functional Tests
                  condition: always()

                # Publish the dce-cli executable, so we can use
                # it in our Cleanup stage
                - publish: $(System.DefaultWorkingDirectory)/dce
                  artifact: dce-cli
                - publish: $(System.DefaultWorkingDirectory)/dce.yml
                  artifact: dce-yml
                - publish: $(System.DefaultWorkingDirectory)/lease_id.txt
                  artifact: lease_id
                - publish: $(System.DefaultWorkingDirectory)/namespace.txt
                  artifact: namespace
                - publish: $(System.DefaultWorkingDirectory)/modules/backend.tf
                  artifact: backend-tf

  - stage: Cleanup
    dependsOn: Deploy
    jobs:
      - deployment: Deploy
        displayName: TerraformDestroy
        environment: "destroy"
        strategy:
          runOnce:
            deploy:
              steps:
                # Checkout the git repo code
                - checkout: self

                # Download dce-cli artifacts
                - download: current
                  artifact: dce-cli
                - download: current
                  artifact: dce-yml
                - download: current
                  artifact: lease_id
                - download: current
                  artifact: namespace
                - download: current
                  artifact: backend-tf

                - bash: |
                    set -ex

                    # Azure DevOps wraps artifact files inside a directory
                    # in the  Pipeline.Workspace dir (which is different than our working dir...)
                    # Extract these out into our working dir, for easier access
                    cp $(Pipeline.Workspace)/dce-cli/dce ./
                    cp $(Pipeline.Workspace)/dce-yml/dce.yml ./
                    cp $(Pipeline.Workspace)/lease_id/lease_id.txt ./
                    cp $(Pipeline.Workspace)/namespace/namespace.txt ./
                    cp $(Pipeline.Workspace)/backend-tf/backend.tf ./modules/

                    chmod +x ./dce
                  displayName: Copy Artifacts to Working Dir

                # Login to our DCE lease
                - task: AWSShellScript@1
                  displayName: "DCE Lease Login"
                  inputs:
                    awsCredentials: "AWS_DCE_API_NONPROD"
                    regionName: "us-east-1"
                    scriptType: "inline"
                    inlineScript: |
                      set -ex
                      lease_id=$(cat ./lease_id.txt)
                      echo "Logging into lease ${lease_id}"

                      cat ./dce.yml

                      ./dce --config=./dce.yml leases login ${lease_id}

                # Install Terraform
                - task: TerraformInstaller@0
                  inputs:
                    terraformVersion: "0.12.18"
                  displayName: "Install Terraform"

                - bash: |
                    set -ex
                    namespace=$(cat ./namespace.txt)
                    
                    cd modules
                    terraform init -input=false
                    terraform destroy -force \
                      -var="namespace=$(namespace)" \
                      -var="budget_notification_from_email=$(NOTIFY_EMAIL)"
                  displayName: "Terraform destroy"

  - stage: Release
    dependsOn: Cleanup
    jobs:
      - job: ReleaseArtifacts
        steps:
          # Grab artifacts from our build stage
          - download: current
            artifact: bin
          - download: current
            artifact: deploy_scripts

          # Publish a Github Release for tagged commits
          # See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
          - task: GithubRelease@0
            displayName: "Create GitHub Release"
            inputs:
              gitHubConnection: Github
              repositoryName: Optum/dce
              assets: |
                $(Pipeline.Workspace)/bin/build_artifacts.zip
                $(Pipeline.Workspace)/bin/terraform_artifacts.zip
                $(Pipeline.Workspace)/deploy_scripts/deploy.sh
                $(Pipeline.Workspace)/deploy_scripts/restore_db.sh
