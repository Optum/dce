// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "github.com/Optum/dce/pkg/config"

import mock "github.com/stretchr/testify/mock"

// ServiceBuilder is an autogenerated mock type for the ServiceBuilder type
type ServiceBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *ServiceBuilder) Build() (*config.ConfigurationBuilder, error) {
	ret := _m.Called()

	var r0 *config.ConfigurationBuilder
	if rf, ok := ret.Get(0).(func() *config.ConfigurationBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ConfigurationBuilder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithCodeBuild provides a mock function with given fields:
func (_m *ServiceBuilder) WithCodeBuild() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithCognito provides a mock function with given fields:
func (_m *ServiceBuilder) WithCognito() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithDynamoDB provides a mock function with given fields:
func (_m *ServiceBuilder) WithDynamoDB() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithS3 provides a mock function with given fields:
func (_m *ServiceBuilder) WithS3() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithSNS provides a mock function with given fields:
func (_m *ServiceBuilder) WithSNS() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithSQS provides a mock function with given fields:
func (_m *ServiceBuilder) WithSQS() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithSSM provides a mock function with given fields:
func (_m *ServiceBuilder) WithSSM() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}

// WithSTS provides a mock function with given fields:
func (_m *ServiceBuilder) WithSTS() *config.ServiceBuilder {
	ret := _m.Called()

	var r0 *config.ServiceBuilder
	if rf, ok := ret.Get(0).(func() *config.ServiceBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ServiceBuilder)
		}
	}

	return r0
}
