// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	db "github.com/Optum/dce/pkg/db"
	mock "github.com/stretchr/testify/mock"
)

// Provisioner is an autogenerated mock type for the Provisioner type
type Provisioner struct {
	mock.Mock
}

// ActivateAccount provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *Provisioner) ActivateAccount(_a0 bool, _a1 string, _a2 string, _a3 float64, _a4 string, _a5 []string, _a6 int64) (*db.Lease, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 *db.Lease
	if rf, ok := ret.Get(0).(func(bool, string, string, float64, string, []string, int64) *db.Lease); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Lease)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, string, string, float64, string, []string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindActiveLeaseForPrincipal provides a mock function with given fields: _a0
func (_m *Provisioner) FindActiveLeaseForPrincipal(_a0 string) (*db.Lease, error) {
	ret := _m.Called(_a0)

	var r0 *db.Lease
	if rf, ok := ret.Get(0).(func(string) *db.Lease); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Lease)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLeaseWithAccount provides a mock function with given fields: _a0, _a1
func (_m *Provisioner) FindLeaseWithAccount(_a0 string, _a1 string) (*db.Lease, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *db.Lease
	if rf, ok := ret.Get(0).(func(string, string) *db.Lease); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Lease)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackProvisionAccount provides a mock function with given fields: _a0, _a1, _a2
func (_m *Provisioner) RollbackProvisionAccount(_a0 bool, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
